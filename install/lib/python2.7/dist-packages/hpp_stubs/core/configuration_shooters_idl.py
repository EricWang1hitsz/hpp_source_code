# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl")


#
# Start of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp.core_idl"
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl")


# interface ConfigurationShooter
_0_hpp.core_idl._d_ConfigurationShooter = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/ConfigurationShooter:1.0", "ConfigurationShooter")
omniORB.typeMapping["IDL:hpp/core_idl/ConfigurationShooter:1.0"] = _0_hpp.core_idl._d_ConfigurationShooter
_0_hpp.core_idl.ConfigurationShooter = omniORB.newEmptyClass()
class ConfigurationShooter :
    _NP_RepositoryId = _0_hpp.core_idl._d_ConfigurationShooter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.ConfigurationShooter = ConfigurationShooter
_0_hpp.core_idl._tc_ConfigurationShooter = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_ConfigurationShooter)
omniORB.registerType(ConfigurationShooter._NP_RepositoryId, _0_hpp.core_idl._d_ConfigurationShooter, _0_hpp.core_idl._tc_ConfigurationShooter)

# ConfigurationShooter operations and attributes
ConfigurationShooter._d_shoot = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# ConfigurationShooter object reference
class _objref_ConfigurationShooter (CORBA.Object):
    _NP_RepositoryId = ConfigurationShooter._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def shoot(self, *args):
        return _omnipy.invoke(self, "shoot", _0_hpp.core_idl.ConfigurationShooter._d_shoot, args)

    __methods__ = ["shoot"] + CORBA.Object.__methods__

omniORB.registerObjref(ConfigurationShooter._NP_RepositoryId, _objref_ConfigurationShooter)
_0_hpp.core_idl._objref_ConfigurationShooter = _objref_ConfigurationShooter
del ConfigurationShooter, _objref_ConfigurationShooter

# ConfigurationShooter skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class ConfigurationShooter (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.core_idl.ConfigurationShooter._NP_RepositoryId


    _omni_op_d = {"shoot": _0_hpp.core_idl.ConfigurationShooter._d_shoot}

ConfigurationShooter._omni_skeleton = ConfigurationShooter
_0_hpp__POA.core_idl.ConfigurationShooter = ConfigurationShooter
omniORB.registerSkeleton(ConfigurationShooter._NP_RepositoryId, ConfigurationShooter)
del ConfigurationShooter
__name__ = "hpp_idl.hpp.core_idl"

#
# Start of module "hpp.core_idl.configuration_shooter"
#
__name__ = "hpp_idl.hpp.core_idl.configuration_shooter"
_0_hpp.core_idl.configuration_shooter = omniORB.openModule("hpp_idl.hpp.core_idl.configuration_shooter", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl")
_0_hpp__POA.core_idl.configuration_shooter = omniORB.openModule("hpp_idl.hpp__POA.core_idl.configuration_shooter", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/configuration_shooters.idl")


# interface Gaussian
_0_hpp.core_idl.configuration_shooter._d_Gaussian = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/configuration_shooter/Gaussian:1.0", "Gaussian")
omniORB.typeMapping["IDL:hpp/core_idl/configuration_shooter/Gaussian:1.0"] = _0_hpp.core_idl.configuration_shooter._d_Gaussian
_0_hpp.core_idl.configuration_shooter.Gaussian = omniORB.newEmptyClass()
class Gaussian (_0_hpp.core_idl.ConfigurationShooter):
    _NP_RepositoryId = _0_hpp.core_idl.configuration_shooter._d_Gaussian[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.configuration_shooter.Gaussian = Gaussian
_0_hpp.core_idl.configuration_shooter._tc_Gaussian = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl.configuration_shooter._d_Gaussian)
omniORB.registerType(Gaussian._NP_RepositoryId, _0_hpp.core_idl.configuration_shooter._d_Gaussian, _0_hpp.core_idl.configuration_shooter._tc_Gaussian)

# Gaussian operations and attributes
Gaussian._d_setCenter = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Gaussian._d_getCenter = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Gaussian._d_getSigmas = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Gaussian._d_setSigmas = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Gaussian object reference
class _objref_Gaussian (_0_hpp.core_idl._objref_ConfigurationShooter):
    _NP_RepositoryId = Gaussian._NP_RepositoryId

    def __init__(self):
        _0_hpp.core_idl._objref_ConfigurationShooter.__init__(self)

    def setCenter(self, *args):
        return _omnipy.invoke(self, "setCenter", _0_hpp.core_idl.configuration_shooter.Gaussian._d_setCenter, args)

    def getCenter(self, *args):
        return _omnipy.invoke(self, "getCenter", _0_hpp.core_idl.configuration_shooter.Gaussian._d_getCenter, args)

    def getSigmas(self, *args):
        return _omnipy.invoke(self, "getSigmas", _0_hpp.core_idl.configuration_shooter.Gaussian._d_getSigmas, args)

    def setSigmas(self, *args):
        return _omnipy.invoke(self, "setSigmas", _0_hpp.core_idl.configuration_shooter.Gaussian._d_setSigmas, args)

    __methods__ = ["setCenter", "getCenter", "getSigmas", "setSigmas"] + _0_hpp.core_idl._objref_ConfigurationShooter.__methods__

omniORB.registerObjref(Gaussian._NP_RepositoryId, _objref_Gaussian)
_0_hpp.core_idl.configuration_shooter._objref_Gaussian = _objref_Gaussian
del Gaussian, _objref_Gaussian

# Gaussian skeleton
__name__ = "hpp_idl.hpp__POA.core_idl.configuration_shooter"
class Gaussian (_0_hpp__POA.core_idl.ConfigurationShooter):
    _NP_RepositoryId = _0_hpp.core_idl.configuration_shooter.Gaussian._NP_RepositoryId


    _omni_op_d = {"setCenter": _0_hpp.core_idl.configuration_shooter.Gaussian._d_setCenter, "getCenter": _0_hpp.core_idl.configuration_shooter.Gaussian._d_getCenter, "getSigmas": _0_hpp.core_idl.configuration_shooter.Gaussian._d_getSigmas, "setSigmas": _0_hpp.core_idl.configuration_shooter.Gaussian._d_setSigmas}
    _omni_op_d.update(_0_hpp__POA.core_idl.ConfigurationShooter._omni_op_d)

Gaussian._omni_skeleton = Gaussian
_0_hpp__POA.core_idl.configuration_shooter.Gaussian = Gaussian
omniORB.registerSkeleton(Gaussian._NP_RepositoryId, Gaussian)
del Gaussian
__name__ = "hpp_idl.hpp.core_idl.configuration_shooter"

#
# End of module "hpp.core_idl.configuration_shooter"
#
__name__ = "hpp_idl.hpp.core_idl"


#
# End of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.core.configuration_shooters_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.core_idl", "hpp_idl.hpp.core_idl.configuration_shooter")

# The end.
