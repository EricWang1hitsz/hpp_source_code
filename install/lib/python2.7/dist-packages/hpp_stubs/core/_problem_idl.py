# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_problem.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_problem.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_problem.idl")


#
# Start of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp.core_idl"
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_problem.idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_problem.idl")


# interface Distance;
_0_hpp.core_idl._d_Distance = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/Distance:1.0", "Distance")
omniORB.typeMapping["IDL:hpp/core_idl/Distance:1.0"] = _0_hpp.core_idl._d_Distance

# interface SteeringMethod;
_0_hpp.core_idl._d_SteeringMethod = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/SteeringMethod:1.0", "SteeringMethod")
omniORB.typeMapping["IDL:hpp/core_idl/SteeringMethod:1.0"] = _0_hpp.core_idl._d_SteeringMethod

# interface PathValidation;
_0_hpp.core_idl._d_PathValidation = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/PathValidation:1.0", "PathValidation")
omniORB.typeMapping["IDL:hpp/core_idl/PathValidation:1.0"] = _0_hpp.core_idl._d_PathValidation

# interface ConfigurationShooter;
_0_hpp.core_idl._d_ConfigurationShooter = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/ConfigurationShooter:1.0", "ConfigurationShooter")
omniORB.typeMapping["IDL:hpp/core_idl/ConfigurationShooter:1.0"] = _0_hpp.core_idl._d_ConfigurationShooter

# interface Constraint;
_0_hpp.core_idl._d_Constraint = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/Constraint:1.0", "Constraint")
omniORB.typeMapping["IDL:hpp/core_idl/Constraint:1.0"] = _0_hpp.core_idl._d_Constraint

# interface Problem
_0_hpp.core_idl._d_Problem = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/Problem:1.0", "Problem")
omniORB.typeMapping["IDL:hpp/core_idl/Problem:1.0"] = _0_hpp.core_idl._d_Problem
_0_hpp.core_idl.Problem = omniORB.newEmptyClass()
class Problem :
    _NP_RepositoryId = _0_hpp.core_idl._d_Problem[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.Problem = Problem
_0_hpp.core_idl._tc_Problem = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_Problem)
omniORB.registerType(Problem._NP_RepositoryId, _0_hpp.core_idl._d_Problem, _0_hpp.core_idl._tc_Problem)

# Problem operations and attributes
Problem._d_setInitConfig = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getInitConfig = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetGoalConfigs = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getConstraints = ((), (omniORB.typeMapping["IDL:hpp/core_idl/Constraint:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getDistance = ((), (omniORB.typeMapping["IDL:hpp/core_idl/Distance:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setDistance = ((omniORB.typeMapping["IDL:hpp/core_idl/Distance:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getSteeringMethod = ((), (omniORB.typeMapping["IDL:hpp/core_idl/SteeringMethod:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setSteeringMethod = ((omniORB.typeMapping["IDL:hpp/core_idl/SteeringMethod:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getPathValidation = ((), (omniORB.typeMapping["IDL:hpp/core_idl/PathValidation:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setPathValidation = ((omniORB.typeMapping["IDL:hpp/core_idl/PathValidation:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getConfigurationShooter = ((), (omniORB.typeMapping["IDL:hpp/core_idl/ConfigurationShooter:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setConfigurationShooter = ((omniORB.typeMapping["IDL:hpp/core_idl/ConfigurationShooter:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Problem object reference
class _objref_Problem (CORBA.Object):
    _NP_RepositoryId = Problem._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def setInitConfig(self, *args):
        return _omnipy.invoke(self, "setInitConfig", _0_hpp.core_idl.Problem._d_setInitConfig, args)

    def getInitConfig(self, *args):
        return _omnipy.invoke(self, "getInitConfig", _0_hpp.core_idl.Problem._d_getInitConfig, args)

    def resetGoalConfigs(self, *args):
        return _omnipy.invoke(self, "resetGoalConfigs", _0_hpp.core_idl.Problem._d_resetGoalConfigs, args)

    def getConstraints(self, *args):
        return _omnipy.invoke(self, "getConstraints", _0_hpp.core_idl.Problem._d_getConstraints, args)

    def getDistance(self, *args):
        return _omnipy.invoke(self, "getDistance", _0_hpp.core_idl.Problem._d_getDistance, args)

    def setDistance(self, *args):
        return _omnipy.invoke(self, "setDistance", _0_hpp.core_idl.Problem._d_setDistance, args)

    def getSteeringMethod(self, *args):
        return _omnipy.invoke(self, "getSteeringMethod", _0_hpp.core_idl.Problem._d_getSteeringMethod, args)

    def setSteeringMethod(self, *args):
        return _omnipy.invoke(self, "setSteeringMethod", _0_hpp.core_idl.Problem._d_setSteeringMethod, args)

    def getPathValidation(self, *args):
        return _omnipy.invoke(self, "getPathValidation", _0_hpp.core_idl.Problem._d_getPathValidation, args)

    def setPathValidation(self, *args):
        return _omnipy.invoke(self, "setPathValidation", _0_hpp.core_idl.Problem._d_setPathValidation, args)

    def getConfigurationShooter(self, *args):
        return _omnipy.invoke(self, "getConfigurationShooter", _0_hpp.core_idl.Problem._d_getConfigurationShooter, args)

    def setConfigurationShooter(self, *args):
        return _omnipy.invoke(self, "setConfigurationShooter", _0_hpp.core_idl.Problem._d_setConfigurationShooter, args)

    __methods__ = ["setInitConfig", "getInitConfig", "resetGoalConfigs", "getConstraints", "getDistance", "setDistance", "getSteeringMethod", "setSteeringMethod", "getPathValidation", "setPathValidation", "getConfigurationShooter", "setConfigurationShooter"] + CORBA.Object.__methods__

omniORB.registerObjref(Problem._NP_RepositoryId, _objref_Problem)
_0_hpp.core_idl._objref_Problem = _objref_Problem
del Problem, _objref_Problem

# Problem skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class Problem (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.core_idl.Problem._NP_RepositoryId


    _omni_op_d = {"setInitConfig": _0_hpp.core_idl.Problem._d_setInitConfig, "getInitConfig": _0_hpp.core_idl.Problem._d_getInitConfig, "resetGoalConfigs": _0_hpp.core_idl.Problem._d_resetGoalConfigs, "getConstraints": _0_hpp.core_idl.Problem._d_getConstraints, "getDistance": _0_hpp.core_idl.Problem._d_getDistance, "setDistance": _0_hpp.core_idl.Problem._d_setDistance, "getSteeringMethod": _0_hpp.core_idl.Problem._d_getSteeringMethod, "setSteeringMethod": _0_hpp.core_idl.Problem._d_setSteeringMethod, "getPathValidation": _0_hpp.core_idl.Problem._d_getPathValidation, "setPathValidation": _0_hpp.core_idl.Problem._d_setPathValidation, "getConfigurationShooter": _0_hpp.core_idl.Problem._d_getConfigurationShooter, "setConfigurationShooter": _0_hpp.core_idl.Problem._d_setConfigurationShooter}

Problem._omni_skeleton = Problem
_0_hpp__POA.core_idl.Problem = Problem
omniORB.registerSkeleton(Problem._NP_RepositoryId, Problem)
del Problem
__name__ = "hpp_idl.hpp.core_idl"

#
# End of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.core._problem_idl"

# #include "hpp/core_idl/distances.idl"
import hpp_stubs.core.distances_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
# #include "hpp/core_idl/paths.idl"
import hpp_stubs.core.paths_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
# #include "hpp/constraints_idl/constraints.idl"
import hpp_stubs.constraints.constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.constraints.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.constraints.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp__POA.constraints_idl")
# #include "hpp/core_idl/_constraints.idl"
import hpp_stubs.core._constraints_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_idl.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_idl.hpp__POA.constraints_idl")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
# #include "hpp/core_idl/steering_methods.idl"
import hpp_stubs.core.steering_methods_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
# #include "hpp/core_idl/path_validations.idl"
import hpp_stubs.core.path_validations_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
# #include "hpp/core_idl/configuration_shooters.idl"
import hpp_stubs.core.configuration_shooters_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
_0_hpp.core_idl.configuration_shooter = omniORB.openModule("hpp_idl.hpp.core_idl.configuration_shooter")
_0_hpp__POA.core_idl.configuration_shooter = omniORB.openModule("hpp_idl.hpp__POA.core_idl.configuration_shooter")
_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.core_idl")

# The end.
