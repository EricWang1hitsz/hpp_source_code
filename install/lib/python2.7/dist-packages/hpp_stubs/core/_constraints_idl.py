# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")
# #include "hpp/constraints_idl/constraints.idl"
import hpp_stubs.constraints.constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.constraints.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.constraints.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp__POA.constraints_idl")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl")


#
# Start of module "hpp.constraints_idl"
#
__name__ = "hpp_idl.hpp.constraints_idl"
_0_hpp.constraints_idl = omniORB.openModule("hpp_idl.hpp.constraints_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_idl.hpp__POA.constraints_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl")


# interface Implicit;
_0_hpp.constraints_idl._d_Implicit = (omniORB.tcInternal.tv_objref, "IDL:hpp/constraints_idl/Implicit:1.0", "Implicit")
omniORB.typeMapping["IDL:hpp/constraints_idl/Implicit:1.0"] = _0_hpp.constraints_idl._d_Implicit

#
# End of module "hpp.constraints_idl"
#
__name__ = "hpp_idl.hpp"


#
# Start of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp.core_idl"
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/_constraints.idl")


# interface Constraint
_0_hpp.core_idl._d_Constraint = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/Constraint:1.0", "Constraint")
omniORB.typeMapping["IDL:hpp/core_idl/Constraint:1.0"] = _0_hpp.core_idl._d_Constraint
_0_hpp.core_idl.Constraint = omniORB.newEmptyClass()
class Constraint :
    _NP_RepositoryId = _0_hpp.core_idl._d_Constraint[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.Constraint = Constraint
_0_hpp.core_idl._tc_Constraint = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_Constraint)
omniORB.registerType(Constraint._NP_RepositoryId, _0_hpp.core_idl._d_Constraint, _0_hpp.core_idl._tc_Constraint)

# Constraint operations and attributes
Constraint._d_apply = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Constraint._d_name = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Constraint._d_str = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Constraint._d_isSatisfied = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Constraint object reference
class _objref_Constraint (CORBA.Object):
    _NP_RepositoryId = Constraint._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def apply(self, *args):
        return _omnipy.invoke(self, "apply", _0_hpp.core_idl.Constraint._d_apply, args)

    def name(self, *args):
        return _omnipy.invoke(self, "name", _0_hpp.core_idl.Constraint._d_name, args)

    def str(self, *args):
        return _omnipy.invoke(self, "str", _0_hpp.core_idl.Constraint._d_str, args)

    def isSatisfied(self, *args):
        return _omnipy.invoke(self, "isSatisfied", _0_hpp.core_idl.Constraint._d_isSatisfied, args)

    __methods__ = ["apply", "name", "str", "isSatisfied"] + CORBA.Object.__methods__

omniORB.registerObjref(Constraint._NP_RepositoryId, _objref_Constraint)
_0_hpp.core_idl._objref_Constraint = _objref_Constraint
del Constraint, _objref_Constraint

# Constraint skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class Constraint (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.core_idl.Constraint._NP_RepositoryId


    _omni_op_d = {"apply": _0_hpp.core_idl.Constraint._d_apply, "name": _0_hpp.core_idl.Constraint._d_name, "str": _0_hpp.core_idl.Constraint._d_str, "isSatisfied": _0_hpp.core_idl.Constraint._d_isSatisfied}

Constraint._omni_skeleton = Constraint
_0_hpp__POA.core_idl.Constraint = Constraint
omniORB.registerSkeleton(Constraint._NP_RepositoryId, Constraint)
del Constraint
__name__ = "hpp_idl.hpp.core_idl"

# interface ConfigProjector
_0_hpp.core_idl._d_ConfigProjector = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/ConfigProjector:1.0", "ConfigProjector")
omniORB.typeMapping["IDL:hpp/core_idl/ConfigProjector:1.0"] = _0_hpp.core_idl._d_ConfigProjector
_0_hpp.core_idl.ConfigProjector = omniORB.newEmptyClass()
class ConfigProjector (_0_hpp.core_idl.Constraint):
    _NP_RepositoryId = _0_hpp.core_idl._d_ConfigProjector[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.ConfigProjector = ConfigProjector
_0_hpp.core_idl._tc_ConfigProjector = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_ConfigProjector)
omniORB.registerType(ConfigProjector._NP_RepositoryId, _0_hpp.core_idl._d_ConfigProjector, _0_hpp.core_idl._tc_ConfigProjector)

# ConfigProjector operations and attributes
ConfigProjector._d_setRightHandSideFromConfig = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
ConfigProjector._d_setRightHandSideOfConstraintFromConfig = ((omniORB.typeMapping["IDL:hpp/constraints_idl/Implicit:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
ConfigProjector._d_setRightHandSide = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
ConfigProjector._d_setRightHandSideOfConstraint = ((omniORB.typeMapping["IDL:hpp/constraints_idl/Implicit:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
ConfigProjector._d_getRightHandSide = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
ConfigProjector._d_setRightHandSideAt = ((omniORB.typeMapping["IDL:hpp/value_type:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
ConfigProjector._d_isConstraintSatisfied = ((omniORB.typeMapping["IDL:hpp/constraints_idl/Implicit:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_boolean), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# ConfigProjector object reference
class _objref_ConfigProjector (_0_hpp.core_idl._objref_Constraint):
    _NP_RepositoryId = ConfigProjector._NP_RepositoryId

    def __init__(self):
        _0_hpp.core_idl._objref_Constraint.__init__(self)

    def setRightHandSideFromConfig(self, *args):
        return _omnipy.invoke(self, "setRightHandSideFromConfig", _0_hpp.core_idl.ConfigProjector._d_setRightHandSideFromConfig, args)

    def setRightHandSideOfConstraintFromConfig(self, *args):
        return _omnipy.invoke(self, "setRightHandSideOfConstraintFromConfig", _0_hpp.core_idl.ConfigProjector._d_setRightHandSideOfConstraintFromConfig, args)

    def setRightHandSide(self, *args):
        return _omnipy.invoke(self, "setRightHandSide", _0_hpp.core_idl.ConfigProjector._d_setRightHandSide, args)

    def setRightHandSideOfConstraint(self, *args):
        return _omnipy.invoke(self, "setRightHandSideOfConstraint", _0_hpp.core_idl.ConfigProjector._d_setRightHandSideOfConstraint, args)

    def getRightHandSide(self, *args):
        return _omnipy.invoke(self, "getRightHandSide", _0_hpp.core_idl.ConfigProjector._d_getRightHandSide, args)

    def setRightHandSideAt(self, *args):
        return _omnipy.invoke(self, "setRightHandSideAt", _0_hpp.core_idl.ConfigProjector._d_setRightHandSideAt, args)

    def isConstraintSatisfied(self, *args):
        return _omnipy.invoke(self, "isConstraintSatisfied", _0_hpp.core_idl.ConfigProjector._d_isConstraintSatisfied, args)

    __methods__ = ["setRightHandSideFromConfig", "setRightHandSideOfConstraintFromConfig", "setRightHandSide", "setRightHandSideOfConstraint", "getRightHandSide", "setRightHandSideAt", "isConstraintSatisfied"] + _0_hpp.core_idl._objref_Constraint.__methods__

omniORB.registerObjref(ConfigProjector._NP_RepositoryId, _objref_ConfigProjector)
_0_hpp.core_idl._objref_ConfigProjector = _objref_ConfigProjector
del ConfigProjector, _objref_ConfigProjector

# ConfigProjector skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class ConfigProjector (_0_hpp__POA.core_idl.Constraint):
    _NP_RepositoryId = _0_hpp.core_idl.ConfigProjector._NP_RepositoryId


    _omni_op_d = {"setRightHandSideFromConfig": _0_hpp.core_idl.ConfigProjector._d_setRightHandSideFromConfig, "setRightHandSideOfConstraintFromConfig": _0_hpp.core_idl.ConfigProjector._d_setRightHandSideOfConstraintFromConfig, "setRightHandSide": _0_hpp.core_idl.ConfigProjector._d_setRightHandSide, "setRightHandSideOfConstraint": _0_hpp.core_idl.ConfigProjector._d_setRightHandSideOfConstraint, "getRightHandSide": _0_hpp.core_idl.ConfigProjector._d_getRightHandSide, "setRightHandSideAt": _0_hpp.core_idl.ConfigProjector._d_setRightHandSideAt, "isConstraintSatisfied": _0_hpp.core_idl.ConfigProjector._d_isConstraintSatisfied}
    _omni_op_d.update(_0_hpp__POA.core_idl.Constraint._omni_op_d)

ConfigProjector._omni_skeleton = ConfigProjector
_0_hpp__POA.core_idl.ConfigProjector = ConfigProjector
omniORB.registerSkeleton(ConfigProjector._NP_RepositoryId, ConfigProjector)
del ConfigProjector
__name__ = "hpp_idl.hpp.core_idl"

# interface ConstraintSet
_0_hpp.core_idl._d_ConstraintSet = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/ConstraintSet:1.0", "ConstraintSet")
omniORB.typeMapping["IDL:hpp/core_idl/ConstraintSet:1.0"] = _0_hpp.core_idl._d_ConstraintSet
_0_hpp.core_idl.ConstraintSet = omniORB.newEmptyClass()
class ConstraintSet (_0_hpp.core_idl.Constraint):
    _NP_RepositoryId = _0_hpp.core_idl._d_ConstraintSet[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.ConstraintSet = ConstraintSet
_0_hpp.core_idl._tc_ConstraintSet = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_ConstraintSet)
omniORB.registerType(ConstraintSet._NP_RepositoryId, _0_hpp.core_idl._d_ConstraintSet, _0_hpp.core_idl._tc_ConstraintSet)

# ConstraintSet operations and attributes
ConstraintSet._d_getConfigProjector = ((), (omniORB.typeMapping["IDL:hpp/core_idl/Constraint:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# ConstraintSet object reference
class _objref_ConstraintSet (_0_hpp.core_idl._objref_Constraint):
    _NP_RepositoryId = ConstraintSet._NP_RepositoryId

    def __init__(self):
        _0_hpp.core_idl._objref_Constraint.__init__(self)

    def getConfigProjector(self, *args):
        return _omnipy.invoke(self, "getConfigProjector", _0_hpp.core_idl.ConstraintSet._d_getConfigProjector, args)

    __methods__ = ["getConfigProjector"] + _0_hpp.core_idl._objref_Constraint.__methods__

omniORB.registerObjref(ConstraintSet._NP_RepositoryId, _objref_ConstraintSet)
_0_hpp.core_idl._objref_ConstraintSet = _objref_ConstraintSet
del ConstraintSet, _objref_ConstraintSet

# ConstraintSet skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class ConstraintSet (_0_hpp__POA.core_idl.Constraint):
    _NP_RepositoryId = _0_hpp.core_idl.ConstraintSet._NP_RepositoryId


    _omni_op_d = {"getConfigProjector": _0_hpp.core_idl.ConstraintSet._d_getConfigProjector}
    _omni_op_d.update(_0_hpp__POA.core_idl.Constraint._omni_op_d)

ConstraintSet._omni_skeleton = ConstraintSet
_0_hpp__POA.core_idl.ConstraintSet = ConstraintSet
omniORB.registerSkeleton(ConstraintSet._NP_RepositoryId, ConstraintSet)
del ConstraintSet
__name__ = "hpp_idl.hpp.core_idl"

#
# End of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.core._constraints_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.constraints_idl", "hpp_idl.hpp.core_idl")

# The end.
