# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/paths.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/paths.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/paths.idl")


#
# Start of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp.core_idl"
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/paths.idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/paths.idl")


# typedef ... size_t
class size_t:
    _NP_RepositoryId = "IDL:hpp/core_idl/size_t:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_hpp.core_idl.size_t = size_t
_0_hpp.core_idl._d_size_t  = omniORB.tcInternal.tv_ulonglong
_0_hpp.core_idl._ad_size_t = (omniORB.tcInternal.tv_alias, size_t._NP_RepositoryId, "size_t", omniORB.tcInternal.tv_ulonglong)
_0_hpp.core_idl._tc_size_t = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._ad_size_t)
omniORB.registerType(size_t._NP_RepositoryId, _0_hpp.core_idl._ad_size_t, _0_hpp.core_idl._tc_size_t)
del size_t

# interface PathVector;
_0_hpp.core_idl._d_PathVector = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/PathVector:1.0", "PathVector")
omniORB.typeMapping["IDL:hpp/core_idl/PathVector:1.0"] = _0_hpp.core_idl._d_PathVector

# interface Path
_0_hpp.core_idl._d_Path = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/Path:1.0", "Path")
omniORB.typeMapping["IDL:hpp/core_idl/Path:1.0"] = _0_hpp.core_idl._d_Path
_0_hpp.core_idl.Path = omniORB.newEmptyClass()
class Path :
    _NP_RepositoryId = _0_hpp.core_idl._d_Path[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.Path = Path
_0_hpp.core_idl._tc_Path = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_Path)
omniORB.registerType(Path._NP_RepositoryId, _0_hpp.core_idl._d_Path, _0_hpp.core_idl._tc_Path)

# Path operations and attributes
Path._d_outputSize = ((), (omniORB.typeMapping["IDL:hpp/size_type:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_outputDerivativeSize = ((), (omniORB.typeMapping["IDL:hpp/size_type:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_length = ((), (omniORB.typeMapping["IDL:hpp/value_type:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_initial = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_end = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_str = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_call = ((omniORB.typeMapping["IDL:hpp/value_type:1.0"], ), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_boolean), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_at = ((omniORB.typeMapping["IDL:hpp/value_type:1.0"], ), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_boolean), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_derivative = ((omniORB.typeMapping["IDL:hpp/value_type:1.0"], omniORB.tcInternal.tv_short), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_extract = ((omniORB.typeMapping["IDL:hpp/value_type:1.0"], omniORB.typeMapping["IDL:hpp/value_type:1.0"]), (omniORB.typeMapping["IDL:hpp/core_idl/Path:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Path._d_asVector = ((), (omniORB.typeMapping["IDL:hpp/core_idl/PathVector:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Path object reference
class _objref_Path (CORBA.Object):
    _NP_RepositoryId = Path._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def outputSize(self, *args):
        return _omnipy.invoke(self, "outputSize", _0_hpp.core_idl.Path._d_outputSize, args)

    def outputDerivativeSize(self, *args):
        return _omnipy.invoke(self, "outputDerivativeSize", _0_hpp.core_idl.Path._d_outputDerivativeSize, args)

    def length(self, *args):
        return _omnipy.invoke(self, "length", _0_hpp.core_idl.Path._d_length, args)

    def initial(self, *args):
        return _omnipy.invoke(self, "initial", _0_hpp.core_idl.Path._d_initial, args)

    def end(self, *args):
        return _omnipy.invoke(self, "end", _0_hpp.core_idl.Path._d_end, args)

    def str(self, *args):
        return _omnipy.invoke(self, "str", _0_hpp.core_idl.Path._d_str, args)

    def call(self, *args):
        return _omnipy.invoke(self, "call", _0_hpp.core_idl.Path._d_call, args)

    def at(self, *args):
        return _omnipy.invoke(self, "at", _0_hpp.core_idl.Path._d_at, args)

    def derivative(self, *args):
        return _omnipy.invoke(self, "derivative", _0_hpp.core_idl.Path._d_derivative, args)

    def extract(self, *args):
        return _omnipy.invoke(self, "extract", _0_hpp.core_idl.Path._d_extract, args)

    def asVector(self, *args):
        return _omnipy.invoke(self, "asVector", _0_hpp.core_idl.Path._d_asVector, args)

    __methods__ = ["outputSize", "outputDerivativeSize", "length", "initial", "end", "str", "call", "at", "derivative", "extract", "asVector"] + CORBA.Object.__methods__

omniORB.registerObjref(Path._NP_RepositoryId, _objref_Path)
_0_hpp.core_idl._objref_Path = _objref_Path
del Path, _objref_Path

# Path skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class Path (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.core_idl.Path._NP_RepositoryId


    _omni_op_d = {"outputSize": _0_hpp.core_idl.Path._d_outputSize, "outputDerivativeSize": _0_hpp.core_idl.Path._d_outputDerivativeSize, "length": _0_hpp.core_idl.Path._d_length, "initial": _0_hpp.core_idl.Path._d_initial, "end": _0_hpp.core_idl.Path._d_end, "str": _0_hpp.core_idl.Path._d_str, "call": _0_hpp.core_idl.Path._d_call, "at": _0_hpp.core_idl.Path._d_at, "derivative": _0_hpp.core_idl.Path._d_derivative, "extract": _0_hpp.core_idl.Path._d_extract, "asVector": _0_hpp.core_idl.Path._d_asVector}

Path._omni_skeleton = Path
_0_hpp__POA.core_idl.Path = Path
omniORB.registerSkeleton(Path._NP_RepositoryId, Path)
del Path
__name__ = "hpp_idl.hpp.core_idl"

# interface PathVector
_0_hpp.core_idl._d_PathVector = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/PathVector:1.0", "PathVector")
omniORB.typeMapping["IDL:hpp/core_idl/PathVector:1.0"] = _0_hpp.core_idl._d_PathVector
_0_hpp.core_idl.PathVector = omniORB.newEmptyClass()
class PathVector (_0_hpp.core_idl.Path):
    _NP_RepositoryId = _0_hpp.core_idl._d_PathVector[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.PathVector = PathVector
_0_hpp.core_idl._tc_PathVector = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_PathVector)
omniORB.registerType(PathVector._NP_RepositoryId, _0_hpp.core_idl._d_PathVector, _0_hpp.core_idl._tc_PathVector)

# PathVector operations and attributes
PathVector._d_numberPaths = ((), (omniORB.typeMapping["IDL:hpp/core_idl/size_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
PathVector._d_pathAtRank = ((omniORB.typeMapping["IDL:hpp/core_idl/size_t:1.0"], ), (omniORB.typeMapping["IDL:hpp/core_idl/Path:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
PathVector._d_appendPath = ((omniORB.typeMapping["IDL:hpp/core_idl/Path:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
PathVector._d_concatenate = ((omniORB.typeMapping["IDL:hpp/core_idl/PathVector:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# PathVector object reference
class _objref_PathVector (_0_hpp.core_idl._objref_Path):
    _NP_RepositoryId = PathVector._NP_RepositoryId

    def __init__(self):
        _0_hpp.core_idl._objref_Path.__init__(self)

    def numberPaths(self, *args):
        return _omnipy.invoke(self, "numberPaths", _0_hpp.core_idl.PathVector._d_numberPaths, args)

    def pathAtRank(self, *args):
        return _omnipy.invoke(self, "pathAtRank", _0_hpp.core_idl.PathVector._d_pathAtRank, args)

    def appendPath(self, *args):
        return _omnipy.invoke(self, "appendPath", _0_hpp.core_idl.PathVector._d_appendPath, args)

    def concatenate(self, *args):
        return _omnipy.invoke(self, "concatenate", _0_hpp.core_idl.PathVector._d_concatenate, args)

    __methods__ = ["numberPaths", "pathAtRank", "appendPath", "concatenate"] + _0_hpp.core_idl._objref_Path.__methods__

omniORB.registerObjref(PathVector._NP_RepositoryId, _objref_PathVector)
_0_hpp.core_idl._objref_PathVector = _objref_PathVector
del PathVector, _objref_PathVector

# PathVector skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class PathVector (_0_hpp__POA.core_idl.Path):
    _NP_RepositoryId = _0_hpp.core_idl.PathVector._NP_RepositoryId


    _omni_op_d = {"numberPaths": _0_hpp.core_idl.PathVector._d_numberPaths, "pathAtRank": _0_hpp.core_idl.PathVector._d_pathAtRank, "appendPath": _0_hpp.core_idl.PathVector._d_appendPath, "concatenate": _0_hpp.core_idl.PathVector._d_concatenate}
    _omni_op_d.update(_0_hpp__POA.core_idl.Path._omni_op_d)

PathVector._omni_skeleton = PathVector
_0_hpp__POA.core_idl.PathVector = PathVector
omniORB.registerSkeleton(PathVector._NP_RepositoryId, PathVector)
del PathVector
__name__ = "hpp_idl.hpp.core_idl"

#
# End of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.core.paths_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.core_idl")

# The end.
