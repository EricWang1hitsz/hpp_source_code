# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/steering_methods.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")
# #include "hpp/core_idl/paths.idl"
import hpp_stubs.core.paths_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
# #include "hpp/constraints_idl/constraints.idl"
import hpp_stubs.constraints.constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.constraints.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.constraints.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp__POA.constraints_idl")
# #include "hpp/core_idl/_constraints.idl"
import hpp_stubs.core._constraints_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_idl.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_idl.hpp__POA.constraints_idl")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/steering_methods.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/steering_methods.idl")


#
# Start of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp.core_idl"
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/steering_methods.idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/core_idl/steering_methods.idl")


# interface SteeringMethod
_0_hpp.core_idl._d_SteeringMethod = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/SteeringMethod:1.0", "SteeringMethod")
omniORB.typeMapping["IDL:hpp/core_idl/SteeringMethod:1.0"] = _0_hpp.core_idl._d_SteeringMethod
_0_hpp.core_idl.SteeringMethod = omniORB.newEmptyClass()
class SteeringMethod :
    _NP_RepositoryId = _0_hpp.core_idl._d_SteeringMethod[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.core_idl.SteeringMethod = SteeringMethod
_0_hpp.core_idl._tc_SteeringMethod = omniORB.tcInternal.createTypeCode(_0_hpp.core_idl._d_SteeringMethod)
omniORB.registerType(SteeringMethod._NP_RepositoryId, _0_hpp.core_idl._d_SteeringMethod, _0_hpp.core_idl._tc_SteeringMethod)

# SteeringMethod operations and attributes
SteeringMethod._d_call = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.typeMapping["IDL:hpp/core_idl/Path:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
SteeringMethod._d_setConstraints = ((omniORB.typeMapping["IDL:hpp/core_idl/ConstraintSet:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
SteeringMethod._d_getConstraints = ((), (omniORB.typeMapping["IDL:hpp/core_idl/Constraint:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# SteeringMethod object reference
class _objref_SteeringMethod (CORBA.Object):
    _NP_RepositoryId = SteeringMethod._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def call(self, *args):
        return _omnipy.invoke(self, "call", _0_hpp.core_idl.SteeringMethod._d_call, args)

    def setConstraints(self, *args):
        return _omnipy.invoke(self, "setConstraints", _0_hpp.core_idl.SteeringMethod._d_setConstraints, args)

    def getConstraints(self, *args):
        return _omnipy.invoke(self, "getConstraints", _0_hpp.core_idl.SteeringMethod._d_getConstraints, args)

    __methods__ = ["call", "setConstraints", "getConstraints"] + CORBA.Object.__methods__

omniORB.registerObjref(SteeringMethod._NP_RepositoryId, _objref_SteeringMethod)
_0_hpp.core_idl._objref_SteeringMethod = _objref_SteeringMethod
del SteeringMethod, _objref_SteeringMethod

# SteeringMethod skeleton
__name__ = "hpp_idl.hpp__POA.core_idl"
class SteeringMethod (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.core_idl.SteeringMethod._NP_RepositoryId


    _omni_op_d = {"call": _0_hpp.core_idl.SteeringMethod._d_call, "setConstraints": _0_hpp.core_idl.SteeringMethod._d_setConstraints, "getConstraints": _0_hpp.core_idl.SteeringMethod._d_getConstraints}

SteeringMethod._omni_skeleton = SteeringMethod
_0_hpp__POA.core_idl.SteeringMethod = SteeringMethod
omniORB.registerSkeleton(SteeringMethod._NP_RepositoryId, SteeringMethod)
del SteeringMethod
__name__ = "hpp_idl.hpp.core_idl"

#
# End of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.core.steering_methods_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.core_idl")

# The end.
