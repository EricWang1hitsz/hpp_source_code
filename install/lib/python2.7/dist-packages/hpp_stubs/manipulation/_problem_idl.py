# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/distances.idl"
import hpp_stubs.core.distances_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/paths.idl"
import hpp_stubs.core.paths_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/constraints_idl/constraints.idl"
import hpp_stubs.constraints.constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.constraints.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.constraints.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp__POA.constraints_idl")
# #include "hpp/core_idl/_constraints.idl"
import hpp_stubs.core._constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.core.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.constraints_idl")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/steering_methods.idl"
import hpp_stubs.core.steering_methods_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/path_validations.idl"
import hpp_stubs.core.path_validations_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/configuration_shooters.idl"
import hpp_stubs.core.configuration_shooters_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
_0_hpp.core_idl.configuration_shooter = omniORB.openModule("hpp_stubs.core.hpp.core_idl.configuration_shooter")
_0_hpp__POA.core_idl.configuration_shooter = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl.configuration_shooter")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")


#
# Start of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp.core_idl"
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")


# interface Problem;
_0_hpp.core_idl._d_Problem = (omniORB.tcInternal.tv_objref, "IDL:hpp/core_idl/Problem:1.0", "Problem")
omniORB.typeMapping["IDL:hpp/core_idl/Problem:1.0"] = _0_hpp.core_idl._d_Problem

#
# End of module "hpp.core_idl"
#
__name__ = "hpp_idl.hpp"


#
# Start of module "hpp.manipulation_idl"
#
__name__ = "hpp_idl.hpp.manipulation_idl"
_0_hpp.manipulation_idl = omniORB.openModule("hpp_idl.hpp.manipulation_idl", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")
_0_hpp__POA.manipulation_idl = omniORB.openModule("hpp_idl.hpp__POA.manipulation_idl", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")


#
# Start of module "hpp.manipulation_idl.graph_idl"
#
__name__ = "hpp_idl.hpp.manipulation_idl.graph_idl"
_0_hpp.manipulation_idl.graph_idl = omniORB.openModule("hpp_idl.hpp.manipulation_idl.graph_idl", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")
_0_hpp__POA.manipulation_idl.graph_idl = omniORB.openModule("hpp_idl.hpp__POA.manipulation_idl.graph_idl", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/manipulation_idl/_problem.idl")


# interface Graph;
_0_hpp.manipulation_idl.graph_idl._d_Graph = (omniORB.tcInternal.tv_objref, "IDL:hpp/manipulation_idl/graph_idl/Graph:1.0", "Graph")
omniORB.typeMapping["IDL:hpp/manipulation_idl/graph_idl/Graph:1.0"] = _0_hpp.manipulation_idl.graph_idl._d_Graph

#
# End of module "hpp.manipulation_idl.graph_idl"
#
__name__ = "hpp_idl.hpp.manipulation_idl"


# interface Problem
_0_hpp.manipulation_idl._d_Problem = (omniORB.tcInternal.tv_objref, "IDL:hpp/manipulation_idl/Problem:1.0", "Problem")
omniORB.typeMapping["IDL:hpp/manipulation_idl/Problem:1.0"] = _0_hpp.manipulation_idl._d_Problem
_0_hpp.manipulation_idl.Problem = omniORB.newEmptyClass()
class Problem (_0_hpp.core_idl.Problem):
    _NP_RepositoryId = _0_hpp.manipulation_idl._d_Problem[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.manipulation_idl.Problem = Problem
_0_hpp.manipulation_idl._tc_Problem = omniORB.tcInternal.createTypeCode(_0_hpp.manipulation_idl._d_Problem)
omniORB.registerType(Problem._NP_RepositoryId, _0_hpp.manipulation_idl._d_Problem, _0_hpp.manipulation_idl._tc_Problem)

# Problem operations and attributes
Problem._d_getConstraintGraph = ((), (omniORB.typeMapping["IDL:hpp/manipulation_idl/graph_idl/Graph:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Problem object reference
class _objref_Problem (_0_hpp.core_idl._objref_Problem):
    _NP_RepositoryId = Problem._NP_RepositoryId

    def __init__(self):
        _0_hpp.core_idl._objref_Problem.__init__(self)

    def getConstraintGraph(self, *args):
        return _omnipy.invoke(self, "getConstraintGraph", _0_hpp.manipulation_idl.Problem._d_getConstraintGraph, args)

    __methods__ = ["getConstraintGraph"] + _0_hpp.core_idl._objref_Problem.__methods__

omniORB.registerObjref(Problem._NP_RepositoryId, _objref_Problem)
_0_hpp.manipulation_idl._objref_Problem = _objref_Problem
del Problem, _objref_Problem

# Problem skeleton
__name__ = "hpp_idl.hpp__POA.manipulation_idl"
class Problem (_0_hpp__POA.core_idl.Problem):
    _NP_RepositoryId = _0_hpp.manipulation_idl.Problem._NP_RepositoryId


    _omni_op_d = {"getConstraintGraph": _0_hpp.manipulation_idl.Problem._d_getConstraintGraph}
    _omni_op_d.update(_0_hpp__POA.core_idl.Problem._omni_op_d)

Problem._omni_skeleton = Problem
_0_hpp__POA.manipulation_idl.Problem = Problem
omniORB.registerSkeleton(Problem._NP_RepositoryId, Problem)
del Problem
__name__ = "hpp_idl.hpp.manipulation_idl"

#
# End of module "hpp.manipulation_idl"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.manipulation._problem_idl"

# #include "hpp/corbaserver/manipulation/gcommon.idl"
import hpp_stubs.corbaserver.manipulation.gcommon_idl
_0_hpp = omniORB.openModule("hpp_stubs.corbaserver.manipulation.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.corbaserver.manipulation.hpp__POA")
# #include "hpp/manipulation_idl/_graph.idl"
import hpp_stubs.manipulation._graph_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_idl.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_idl.hpp__POA.constraints_idl")
_0_hpp.core_idl = omniORB.openModule("hpp_idl.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_idl.hpp__POA.core_idl")
_0_hpp.manipulation_idl = omniORB.openModule("hpp_idl.hpp.manipulation_idl")
_0_hpp__POA.manipulation_idl = omniORB.openModule("hpp_idl.hpp__POA.manipulation_idl")
_0_hpp.manipulation_idl.graph_idl = omniORB.openModule("hpp_idl.hpp.manipulation_idl.graph_idl")
_0_hpp__POA.manipulation_idl.graph_idl = omniORB.openModule("hpp_idl.hpp__POA.manipulation_idl.graph_idl")
_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.core_idl", "hpp_idl.hpp.manipulation_idl", "hpp_idl.hpp.manipulation_idl.graph_idl")

# The end.
