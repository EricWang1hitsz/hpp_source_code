# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/problem.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")
# #include "hpp/constraints_idl/constraints.idl"
import hpp_stubs.constraints.constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.constraints.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.constraints.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.constraints.hpp__POA.constraints_idl")
# #include "hpp/core_idl/distances.idl"
import hpp_stubs.core.distances_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/paths.idl"
import hpp_stubs.core.paths_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/_constraints.idl"
import hpp_stubs.core._constraints_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.constraints_idl = omniORB.openModule("hpp_stubs.core.hpp.constraints_idl")
_0_hpp__POA.constraints_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.constraints_idl")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/steering_methods.idl"
import hpp_stubs.core.steering_methods_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/path_planners.idl"
import hpp_stubs.core.path_planners_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/path_validations.idl"
import hpp_stubs.core.path_validations_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/_problem.idl"
import hpp_stubs.core._problem_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
# #include "hpp/core_idl/configuration_shooters.idl"
import hpp_stubs.core.configuration_shooters_idl
_0_hpp = omniORB.openModule("hpp_stubs.core.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.core.hpp__POA")
_0_hpp.core_idl = omniORB.openModule("hpp_stubs.core.hpp.core_idl")
_0_hpp__POA.core_idl = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl")
_0_hpp.core_idl.configuration_shooter = omniORB.openModule("hpp_stubs.core.hpp.core_idl.configuration_shooter")
_0_hpp__POA.core_idl.configuration_shooter = omniORB.openModule("hpp_stubs.core.hpp__POA.core_idl.configuration_shooter")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/problem.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/problem.idl")


#
# Start of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp.corbaserver"
_0_hpp.corbaserver = omniORB.openModule("hpp_idl.hpp.corbaserver", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/problem.idl")
_0_hpp__POA.corbaserver = omniORB.openModule("hpp_idl.hpp__POA.corbaserver", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/problem.idl")


# interface Problem
_0_hpp.corbaserver._d_Problem = (omniORB.tcInternal.tv_objref, "IDL:hpp/corbaserver/Problem:1.0", "Problem")
omniORB.typeMapping["IDL:hpp/corbaserver/Problem:1.0"] = _0_hpp.corbaserver._d_Problem
_0_hpp.corbaserver.Problem = omniORB.newEmptyClass()
class Problem :
    _NP_RepositoryId = _0_hpp.corbaserver._d_Problem[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.corbaserver.Problem = Problem
_0_hpp.corbaserver._tc_Problem = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver._d_Problem)
omniORB.registerType(Problem._NP_RepositoryId, _0_hpp.corbaserver._d_Problem, _0_hpp.corbaserver._tc_Problem)

# Problem operations and attributes
Problem._d_setRandomSeed = ((omniORB.tcInternal.tv_long, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setMaxNumThreads = ((omniORB.tcInternal.tv_ushort, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getMaxNumThreads = ((), (omniORB.tcInternal.tv_ushort, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getAvailable = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getSelected = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setParameter = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_any), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getParameter = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_any, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getParameterDoc = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectProblem = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetProblem = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_loadPlugin = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_movePathToProblem = ((omniORB.tcInternal.tv_ulong, (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setInitialConfig = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getInitialConfig = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addGoalConfig = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getGoalConfigs = ((), (omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetGoalConfigs = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_applyConstraints = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_double), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_optimize = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_computeValueAndJacobian = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_generateValidConfig = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_double), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createOrientationConstraint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Quaternion_:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createTransformationConstraint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Transform_:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createTransformationSE3Constraint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Transform_:1.0"], omniORB.typeMapping["IDL:hpp/Transform_:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createTransformationConstraint2 = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Transform_:1.0"], omniORB.typeMapping["IDL:hpp/Transform_:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createLockedJoint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createLockedExtraDof = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createManipulability = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createComBeetweenFeet = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createRelativeComConstraint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createConvexShapeContactConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], omniORB.typeMapping["IDL:hpp/intSeqSeq:1.0"], omniORB.typeMapping["IDL:hpp/intSeqSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createStaticStabilityConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createPositionConstraint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/boolSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createConfigurationConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createDistanceBetweenJointConstraint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createDistanceBetweenJointAndObjects = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createIdentityConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetConstraints = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetConstraintMap = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addPassiveDofs = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getConstraintDimensions = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setConstantRightHandSide = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getConstantRightHandSide = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getRightHandSide = ((), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setRightHandSide = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setRightHandSideFromConfig = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setRightHandSideByName = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setRightHandSideFromConfigByName = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addNumericalConstraints = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/intSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setNumericalConstraintsLastPriorityOptional = ((omniORB.tcInternal.tv_boolean, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addLockedJointConstraints = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_displayConstraints = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getErrorThreshold = ((), (omniORB.tcInternal.tv_double, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setErrorThreshold = ((omniORB.tcInternal.tv_double, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setDefaultLineSearchType = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getMaxIterProjection = ((), (omniORB.tcInternal.tv_ulong, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setMaxIterProjection = ((omniORB.tcInternal.tv_ulong, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getMaxIterPathPlanning = ((), (omniORB.tcInternal.tv_ulong, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setMaxIterPathPlanning = ((omniORB.tcInternal.tv_ulong, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_scCreateScalarMultiply = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double, (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getTimeOutPathPlanning = ((), (omniORB.tcInternal.tv_double, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setTimeOutPathPlanning = ((omniORB.tcInternal.tv_double, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_filterCollisionPairs = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectPathPlanner = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectConfigurationShooter = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectDistance = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectSteeringMethod = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addPathOptimizer = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_clearPathOptimizers = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addConfigValidation = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_clearConfigValidations = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectPathValidation = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_selectPathProjector = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_prepareSolveStepByStep = ((), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_executeOneStep = ((), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_finishSolveStepByStep = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_solve = ((), (omniORB.typeMapping["IDL:hpp/intSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_directPath = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong, (omniORB.tcInternal.tv_string,0)), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_reversePath = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addConfigToRoadmap = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addEdgeToRoadmap = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_boolean), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_appendDirectPath = ((omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_boolean), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_concatenatePath = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_extractPath = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_erasePath = ((omniORB.tcInternal.tv_ulong, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_projectPath = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_numberPaths = ((), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_optimizePath = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:hpp/intSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_pathLength = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_double, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_configAtParam = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_derivativeAtParam = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getWaypoints = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_interruptPathPlanning = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_nodes = ((), (omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_numberNodes = ((), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_node = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_connectedComponentOfEdge = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_connectedComponentOfNode = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_numberEdges = ((), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_edge = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_numberConnectedComponents = ((), (omniORB.tcInternal.tv_long, ), None)
Problem._d_nodesConnectedComponent = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getNearestConfig = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_double), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_clearRoadmap = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetRoadmap = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_saveRoadmap = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_readRoadmap = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getDistance = ((), (omniORB.typeMapping["IDL:hpp/core_idl/Distance:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setDistance = ((omniORB.typeMapping["IDL:hpp/core_idl/Distance:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getPath = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:hpp/core_idl/Path:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_addPath = ((omniORB.typeMapping["IDL:hpp/core_idl/PathVector:1.0"], ), (omniORB.tcInternal.tv_ulong, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getSteeringMethod = ((), (omniORB.typeMapping["IDL:hpp/core_idl/SteeringMethod:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getPathValidation = ((), (omniORB.typeMapping["IDL:hpp/core_idl/PathValidation:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getPathPlanner = ((), (omniORB.typeMapping["IDL:hpp/core_idl/PathPlanner:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getProblem = ((), (omniORB.typeMapping["IDL:hpp/core_idl/Problem:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getConstraint = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/constraints_idl/Implicit:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Problem object reference
class _objref_Problem (CORBA.Object):
    _NP_RepositoryId = Problem._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def setRandomSeed(self, *args):
        return _omnipy.invoke(self, "setRandomSeed", _0_hpp.corbaserver.Problem._d_setRandomSeed, args)

    def setMaxNumThreads(self, *args):
        return _omnipy.invoke(self, "setMaxNumThreads", _0_hpp.corbaserver.Problem._d_setMaxNumThreads, args)

    def getMaxNumThreads(self, *args):
        return _omnipy.invoke(self, "getMaxNumThreads", _0_hpp.corbaserver.Problem._d_getMaxNumThreads, args)

    def getAvailable(self, *args):
        return _omnipy.invoke(self, "getAvailable", _0_hpp.corbaserver.Problem._d_getAvailable, args)

    def getSelected(self, *args):
        return _omnipy.invoke(self, "getSelected", _0_hpp.corbaserver.Problem._d_getSelected, args)

    def setParameter(self, *args):
        return _omnipy.invoke(self, "setParameter", _0_hpp.corbaserver.Problem._d_setParameter, args)

    def getParameter(self, *args):
        return _omnipy.invoke(self, "getParameter", _0_hpp.corbaserver.Problem._d_getParameter, args)

    def getParameterDoc(self, *args):
        return _omnipy.invoke(self, "getParameterDoc", _0_hpp.corbaserver.Problem._d_getParameterDoc, args)

    def selectProblem(self, *args):
        return _omnipy.invoke(self, "selectProblem", _0_hpp.corbaserver.Problem._d_selectProblem, args)

    def resetProblem(self, *args):
        return _omnipy.invoke(self, "resetProblem", _0_hpp.corbaserver.Problem._d_resetProblem, args)

    def loadPlugin(self, *args):
        return _omnipy.invoke(self, "loadPlugin", _0_hpp.corbaserver.Problem._d_loadPlugin, args)

    def movePathToProblem(self, *args):
        return _omnipy.invoke(self, "movePathToProblem", _0_hpp.corbaserver.Problem._d_movePathToProblem, args)

    def setInitialConfig(self, *args):
        return _omnipy.invoke(self, "setInitialConfig", _0_hpp.corbaserver.Problem._d_setInitialConfig, args)

    def getInitialConfig(self, *args):
        return _omnipy.invoke(self, "getInitialConfig", _0_hpp.corbaserver.Problem._d_getInitialConfig, args)

    def addGoalConfig(self, *args):
        return _omnipy.invoke(self, "addGoalConfig", _0_hpp.corbaserver.Problem._d_addGoalConfig, args)

    def getGoalConfigs(self, *args):
        return _omnipy.invoke(self, "getGoalConfigs", _0_hpp.corbaserver.Problem._d_getGoalConfigs, args)

    def resetGoalConfigs(self, *args):
        return _omnipy.invoke(self, "resetGoalConfigs", _0_hpp.corbaserver.Problem._d_resetGoalConfigs, args)

    def applyConstraints(self, *args):
        return _omnipy.invoke(self, "applyConstraints", _0_hpp.corbaserver.Problem._d_applyConstraints, args)

    def optimize(self, *args):
        return _omnipy.invoke(self, "optimize", _0_hpp.corbaserver.Problem._d_optimize, args)

    def computeValueAndJacobian(self, *args):
        return _omnipy.invoke(self, "computeValueAndJacobian", _0_hpp.corbaserver.Problem._d_computeValueAndJacobian, args)

    def generateValidConfig(self, *args):
        return _omnipy.invoke(self, "generateValidConfig", _0_hpp.corbaserver.Problem._d_generateValidConfig, args)

    def createOrientationConstraint(self, *args):
        return _omnipy.invoke(self, "createOrientationConstraint", _0_hpp.corbaserver.Problem._d_createOrientationConstraint, args)

    def createTransformationConstraint(self, *args):
        return _omnipy.invoke(self, "createTransformationConstraint", _0_hpp.corbaserver.Problem._d_createTransformationConstraint, args)

    def createTransformationSE3Constraint(self, *args):
        return _omnipy.invoke(self, "createTransformationSE3Constraint", _0_hpp.corbaserver.Problem._d_createTransformationSE3Constraint, args)

    def createTransformationConstraint2(self, *args):
        return _omnipy.invoke(self, "createTransformationConstraint2", _0_hpp.corbaserver.Problem._d_createTransformationConstraint2, args)

    def createLockedJoint(self, *args):
        return _omnipy.invoke(self, "createLockedJoint", _0_hpp.corbaserver.Problem._d_createLockedJoint, args)

    def createLockedExtraDof(self, *args):
        return _omnipy.invoke(self, "createLockedExtraDof", _0_hpp.corbaserver.Problem._d_createLockedExtraDof, args)

    def createManipulability(self, *args):
        return _omnipy.invoke(self, "createManipulability", _0_hpp.corbaserver.Problem._d_createManipulability, args)

    def createComBeetweenFeet(self, *args):
        return _omnipy.invoke(self, "createComBeetweenFeet", _0_hpp.corbaserver.Problem._d_createComBeetweenFeet, args)

    def createRelativeComConstraint(self, *args):
        return _omnipy.invoke(self, "createRelativeComConstraint", _0_hpp.corbaserver.Problem._d_createRelativeComConstraint, args)

    def createConvexShapeContactConstraint(self, *args):
        return _omnipy.invoke(self, "createConvexShapeContactConstraint", _0_hpp.corbaserver.Problem._d_createConvexShapeContactConstraint, args)

    def createStaticStabilityConstraint(self, *args):
        return _omnipy.invoke(self, "createStaticStabilityConstraint", _0_hpp.corbaserver.Problem._d_createStaticStabilityConstraint, args)

    def createPositionConstraint(self, *args):
        return _omnipy.invoke(self, "createPositionConstraint", _0_hpp.corbaserver.Problem._d_createPositionConstraint, args)

    def createConfigurationConstraint(self, *args):
        return _omnipy.invoke(self, "createConfigurationConstraint", _0_hpp.corbaserver.Problem._d_createConfigurationConstraint, args)

    def createDistanceBetweenJointConstraint(self, *args):
        return _omnipy.invoke(self, "createDistanceBetweenJointConstraint", _0_hpp.corbaserver.Problem._d_createDistanceBetweenJointConstraint, args)

    def createDistanceBetweenJointAndObjects(self, *args):
        return _omnipy.invoke(self, "createDistanceBetweenJointAndObjects", _0_hpp.corbaserver.Problem._d_createDistanceBetweenJointAndObjects, args)

    def createIdentityConstraint(self, *args):
        return _omnipy.invoke(self, "createIdentityConstraint", _0_hpp.corbaserver.Problem._d_createIdentityConstraint, args)

    def resetConstraints(self, *args):
        return _omnipy.invoke(self, "resetConstraints", _0_hpp.corbaserver.Problem._d_resetConstraints, args)

    def resetConstraintMap(self, *args):
        return _omnipy.invoke(self, "resetConstraintMap", _0_hpp.corbaserver.Problem._d_resetConstraintMap, args)

    def addPassiveDofs(self, *args):
        return _omnipy.invoke(self, "addPassiveDofs", _0_hpp.corbaserver.Problem._d_addPassiveDofs, args)

    def getConstraintDimensions(self, *args):
        return _omnipy.invoke(self, "getConstraintDimensions", _0_hpp.corbaserver.Problem._d_getConstraintDimensions, args)

    def setConstantRightHandSide(self, *args):
        return _omnipy.invoke(self, "setConstantRightHandSide", _0_hpp.corbaserver.Problem._d_setConstantRightHandSide, args)

    def getConstantRightHandSide(self, *args):
        return _omnipy.invoke(self, "getConstantRightHandSide", _0_hpp.corbaserver.Problem._d_getConstantRightHandSide, args)

    def getRightHandSide(self, *args):
        return _omnipy.invoke(self, "getRightHandSide", _0_hpp.corbaserver.Problem._d_getRightHandSide, args)

    def setRightHandSide(self, *args):
        return _omnipy.invoke(self, "setRightHandSide", _0_hpp.corbaserver.Problem._d_setRightHandSide, args)

    def setRightHandSideFromConfig(self, *args):
        return _omnipy.invoke(self, "setRightHandSideFromConfig", _0_hpp.corbaserver.Problem._d_setRightHandSideFromConfig, args)

    def setRightHandSideByName(self, *args):
        return _omnipy.invoke(self, "setRightHandSideByName", _0_hpp.corbaserver.Problem._d_setRightHandSideByName, args)

    def setRightHandSideFromConfigByName(self, *args):
        return _omnipy.invoke(self, "setRightHandSideFromConfigByName", _0_hpp.corbaserver.Problem._d_setRightHandSideFromConfigByName, args)

    def addNumericalConstraints(self, *args):
        return _omnipy.invoke(self, "addNumericalConstraints", _0_hpp.corbaserver.Problem._d_addNumericalConstraints, args)

    def setNumericalConstraintsLastPriorityOptional(self, *args):
        return _omnipy.invoke(self, "setNumericalConstraintsLastPriorityOptional", _0_hpp.corbaserver.Problem._d_setNumericalConstraintsLastPriorityOptional, args)

    def addLockedJointConstraints(self, *args):
        return _omnipy.invoke(self, "addLockedJointConstraints", _0_hpp.corbaserver.Problem._d_addLockedJointConstraints, args)

    def displayConstraints(self, *args):
        return _omnipy.invoke(self, "displayConstraints", _0_hpp.corbaserver.Problem._d_displayConstraints, args)

    def getErrorThreshold(self, *args):
        return _omnipy.invoke(self, "getErrorThreshold", _0_hpp.corbaserver.Problem._d_getErrorThreshold, args)

    def setErrorThreshold(self, *args):
        return _omnipy.invoke(self, "setErrorThreshold", _0_hpp.corbaserver.Problem._d_setErrorThreshold, args)

    def setDefaultLineSearchType(self, *args):
        return _omnipy.invoke(self, "setDefaultLineSearchType", _0_hpp.corbaserver.Problem._d_setDefaultLineSearchType, args)

    def getMaxIterProjection(self, *args):
        return _omnipy.invoke(self, "getMaxIterProjection", _0_hpp.corbaserver.Problem._d_getMaxIterProjection, args)

    def setMaxIterProjection(self, *args):
        return _omnipy.invoke(self, "setMaxIterProjection", _0_hpp.corbaserver.Problem._d_setMaxIterProjection, args)

    def getMaxIterPathPlanning(self, *args):
        return _omnipy.invoke(self, "getMaxIterPathPlanning", _0_hpp.corbaserver.Problem._d_getMaxIterPathPlanning, args)

    def setMaxIterPathPlanning(self, *args):
        return _omnipy.invoke(self, "setMaxIterPathPlanning", _0_hpp.corbaserver.Problem._d_setMaxIterPathPlanning, args)

    def scCreateScalarMultiply(self, *args):
        return _omnipy.invoke(self, "scCreateScalarMultiply", _0_hpp.corbaserver.Problem._d_scCreateScalarMultiply, args)

    def getTimeOutPathPlanning(self, *args):
        return _omnipy.invoke(self, "getTimeOutPathPlanning", _0_hpp.corbaserver.Problem._d_getTimeOutPathPlanning, args)

    def setTimeOutPathPlanning(self, *args):
        return _omnipy.invoke(self, "setTimeOutPathPlanning", _0_hpp.corbaserver.Problem._d_setTimeOutPathPlanning, args)

    def filterCollisionPairs(self, *args):
        return _omnipy.invoke(self, "filterCollisionPairs", _0_hpp.corbaserver.Problem._d_filterCollisionPairs, args)

    def selectPathPlanner(self, *args):
        return _omnipy.invoke(self, "selectPathPlanner", _0_hpp.corbaserver.Problem._d_selectPathPlanner, args)

    def selectConfigurationShooter(self, *args):
        return _omnipy.invoke(self, "selectConfigurationShooter", _0_hpp.corbaserver.Problem._d_selectConfigurationShooter, args)

    def selectDistance(self, *args):
        return _omnipy.invoke(self, "selectDistance", _0_hpp.corbaserver.Problem._d_selectDistance, args)

    def selectSteeringMethod(self, *args):
        return _omnipy.invoke(self, "selectSteeringMethod", _0_hpp.corbaserver.Problem._d_selectSteeringMethod, args)

    def addPathOptimizer(self, *args):
        return _omnipy.invoke(self, "addPathOptimizer", _0_hpp.corbaserver.Problem._d_addPathOptimizer, args)

    def clearPathOptimizers(self, *args):
        return _omnipy.invoke(self, "clearPathOptimizers", _0_hpp.corbaserver.Problem._d_clearPathOptimizers, args)

    def addConfigValidation(self, *args):
        return _omnipy.invoke(self, "addConfigValidation", _0_hpp.corbaserver.Problem._d_addConfigValidation, args)

    def clearConfigValidations(self, *args):
        return _omnipy.invoke(self, "clearConfigValidations", _0_hpp.corbaserver.Problem._d_clearConfigValidations, args)

    def selectPathValidation(self, *args):
        return _omnipy.invoke(self, "selectPathValidation", _0_hpp.corbaserver.Problem._d_selectPathValidation, args)

    def selectPathProjector(self, *args):
        return _omnipy.invoke(self, "selectPathProjector", _0_hpp.corbaserver.Problem._d_selectPathProjector, args)

    def prepareSolveStepByStep(self, *args):
        return _omnipy.invoke(self, "prepareSolveStepByStep", _0_hpp.corbaserver.Problem._d_prepareSolveStepByStep, args)

    def executeOneStep(self, *args):
        return _omnipy.invoke(self, "executeOneStep", _0_hpp.corbaserver.Problem._d_executeOneStep, args)

    def finishSolveStepByStep(self, *args):
        return _omnipy.invoke(self, "finishSolveStepByStep", _0_hpp.corbaserver.Problem._d_finishSolveStepByStep, args)

    def solve(self, *args):
        return _omnipy.invoke(self, "solve", _0_hpp.corbaserver.Problem._d_solve, args)

    def directPath(self, *args):
        return _omnipy.invoke(self, "directPath", _0_hpp.corbaserver.Problem._d_directPath, args)

    def reversePath(self, *args):
        return _omnipy.invoke(self, "reversePath", _0_hpp.corbaserver.Problem._d_reversePath, args)

    def addConfigToRoadmap(self, *args):
        return _omnipy.invoke(self, "addConfigToRoadmap", _0_hpp.corbaserver.Problem._d_addConfigToRoadmap, args)

    def addEdgeToRoadmap(self, *args):
        return _omnipy.invoke(self, "addEdgeToRoadmap", _0_hpp.corbaserver.Problem._d_addEdgeToRoadmap, args)

    def appendDirectPath(self, *args):
        return _omnipy.invoke(self, "appendDirectPath", _0_hpp.corbaserver.Problem._d_appendDirectPath, args)

    def concatenatePath(self, *args):
        return _omnipy.invoke(self, "concatenatePath", _0_hpp.corbaserver.Problem._d_concatenatePath, args)

    def extractPath(self, *args):
        return _omnipy.invoke(self, "extractPath", _0_hpp.corbaserver.Problem._d_extractPath, args)

    def erasePath(self, *args):
        return _omnipy.invoke(self, "erasePath", _0_hpp.corbaserver.Problem._d_erasePath, args)

    def projectPath(self, *args):
        return _omnipy.invoke(self, "projectPath", _0_hpp.corbaserver.Problem._d_projectPath, args)

    def numberPaths(self, *args):
        return _omnipy.invoke(self, "numberPaths", _0_hpp.corbaserver.Problem._d_numberPaths, args)

    def optimizePath(self, *args):
        return _omnipy.invoke(self, "optimizePath", _0_hpp.corbaserver.Problem._d_optimizePath, args)

    def pathLength(self, *args):
        return _omnipy.invoke(self, "pathLength", _0_hpp.corbaserver.Problem._d_pathLength, args)

    def configAtParam(self, *args):
        return _omnipy.invoke(self, "configAtParam", _0_hpp.corbaserver.Problem._d_configAtParam, args)

    def derivativeAtParam(self, *args):
        return _omnipy.invoke(self, "derivativeAtParam", _0_hpp.corbaserver.Problem._d_derivativeAtParam, args)

    def getWaypoints(self, *args):
        return _omnipy.invoke(self, "getWaypoints", _0_hpp.corbaserver.Problem._d_getWaypoints, args)

    def interruptPathPlanning(self, *args):
        return _omnipy.invoke(self, "interruptPathPlanning", _0_hpp.corbaserver.Problem._d_interruptPathPlanning, args)

    def nodes(self, *args):
        return _omnipy.invoke(self, "nodes", _0_hpp.corbaserver.Problem._d_nodes, args)

    def numberNodes(self, *args):
        return _omnipy.invoke(self, "numberNodes", _0_hpp.corbaserver.Problem._d_numberNodes, args)

    def node(self, *args):
        return _omnipy.invoke(self, "node", _0_hpp.corbaserver.Problem._d_node, args)

    def connectedComponentOfEdge(self, *args):
        return _omnipy.invoke(self, "connectedComponentOfEdge", _0_hpp.corbaserver.Problem._d_connectedComponentOfEdge, args)

    def connectedComponentOfNode(self, *args):
        return _omnipy.invoke(self, "connectedComponentOfNode", _0_hpp.corbaserver.Problem._d_connectedComponentOfNode, args)

    def numberEdges(self, *args):
        return _omnipy.invoke(self, "numberEdges", _0_hpp.corbaserver.Problem._d_numberEdges, args)

    def edge(self, *args):
        return _omnipy.invoke(self, "edge", _0_hpp.corbaserver.Problem._d_edge, args)

    def numberConnectedComponents(self, *args):
        return _omnipy.invoke(self, "numberConnectedComponents", _0_hpp.corbaserver.Problem._d_numberConnectedComponents, args)

    def nodesConnectedComponent(self, *args):
        return _omnipy.invoke(self, "nodesConnectedComponent", _0_hpp.corbaserver.Problem._d_nodesConnectedComponent, args)

    def getNearestConfig(self, *args):
        return _omnipy.invoke(self, "getNearestConfig", _0_hpp.corbaserver.Problem._d_getNearestConfig, args)

    def clearRoadmap(self, *args):
        return _omnipy.invoke(self, "clearRoadmap", _0_hpp.corbaserver.Problem._d_clearRoadmap, args)

    def resetRoadmap(self, *args):
        return _omnipy.invoke(self, "resetRoadmap", _0_hpp.corbaserver.Problem._d_resetRoadmap, args)

    def saveRoadmap(self, *args):
        return _omnipy.invoke(self, "saveRoadmap", _0_hpp.corbaserver.Problem._d_saveRoadmap, args)

    def readRoadmap(self, *args):
        return _omnipy.invoke(self, "readRoadmap", _0_hpp.corbaserver.Problem._d_readRoadmap, args)

    def getDistance(self, *args):
        return _omnipy.invoke(self, "getDistance", _0_hpp.corbaserver.Problem._d_getDistance, args)

    def setDistance(self, *args):
        return _omnipy.invoke(self, "setDistance", _0_hpp.corbaserver.Problem._d_setDistance, args)

    def getPath(self, *args):
        return _omnipy.invoke(self, "getPath", _0_hpp.corbaserver.Problem._d_getPath, args)

    def addPath(self, *args):
        return _omnipy.invoke(self, "addPath", _0_hpp.corbaserver.Problem._d_addPath, args)

    def getSteeringMethod(self, *args):
        return _omnipy.invoke(self, "getSteeringMethod", _0_hpp.corbaserver.Problem._d_getSteeringMethod, args)

    def getPathValidation(self, *args):
        return _omnipy.invoke(self, "getPathValidation", _0_hpp.corbaserver.Problem._d_getPathValidation, args)

    def getPathPlanner(self, *args):
        return _omnipy.invoke(self, "getPathPlanner", _0_hpp.corbaserver.Problem._d_getPathPlanner, args)

    def getProblem(self, *args):
        return _omnipy.invoke(self, "getProblem", _0_hpp.corbaserver.Problem._d_getProblem, args)

    def getConstraint(self, *args):
        return _omnipy.invoke(self, "getConstraint", _0_hpp.corbaserver.Problem._d_getConstraint, args)

    __methods__ = ["setRandomSeed", "setMaxNumThreads", "getMaxNumThreads", "getAvailable", "getSelected", "setParameter", "getParameter", "getParameterDoc", "selectProblem", "resetProblem", "loadPlugin", "movePathToProblem", "setInitialConfig", "getInitialConfig", "addGoalConfig", "getGoalConfigs", "resetGoalConfigs", "applyConstraints", "optimize", "computeValueAndJacobian", "generateValidConfig", "createOrientationConstraint", "createTransformationConstraint", "createTransformationSE3Constraint", "createTransformationConstraint2", "createLockedJoint", "createLockedExtraDof", "createManipulability", "createComBeetweenFeet", "createRelativeComConstraint", "createConvexShapeContactConstraint", "createStaticStabilityConstraint", "createPositionConstraint", "createConfigurationConstraint", "createDistanceBetweenJointConstraint", "createDistanceBetweenJointAndObjects", "createIdentityConstraint", "resetConstraints", "resetConstraintMap", "addPassiveDofs", "getConstraintDimensions", "setConstantRightHandSide", "getConstantRightHandSide", "getRightHandSide", "setRightHandSide", "setRightHandSideFromConfig", "setRightHandSideByName", "setRightHandSideFromConfigByName", "addNumericalConstraints", "setNumericalConstraintsLastPriorityOptional", "addLockedJointConstraints", "displayConstraints", "getErrorThreshold", "setErrorThreshold", "setDefaultLineSearchType", "getMaxIterProjection", "setMaxIterProjection", "getMaxIterPathPlanning", "setMaxIterPathPlanning", "scCreateScalarMultiply", "getTimeOutPathPlanning", "setTimeOutPathPlanning", "filterCollisionPairs", "selectPathPlanner", "selectConfigurationShooter", "selectDistance", "selectSteeringMethod", "addPathOptimizer", "clearPathOptimizers", "addConfigValidation", "clearConfigValidations", "selectPathValidation", "selectPathProjector", "prepareSolveStepByStep", "executeOneStep", "finishSolveStepByStep", "solve", "directPath", "reversePath", "addConfigToRoadmap", "addEdgeToRoadmap", "appendDirectPath", "concatenatePath", "extractPath", "erasePath", "projectPath", "numberPaths", "optimizePath", "pathLength", "configAtParam", "derivativeAtParam", "getWaypoints", "interruptPathPlanning", "nodes", "numberNodes", "node", "connectedComponentOfEdge", "connectedComponentOfNode", "numberEdges", "edge", "numberConnectedComponents", "nodesConnectedComponent", "getNearestConfig", "clearRoadmap", "resetRoadmap", "saveRoadmap", "readRoadmap", "getDistance", "setDistance", "getPath", "addPath", "getSteeringMethod", "getPathValidation", "getPathPlanner", "getProblem", "getConstraint"] + CORBA.Object.__methods__

omniORB.registerObjref(Problem._NP_RepositoryId, _objref_Problem)
_0_hpp.corbaserver._objref_Problem = _objref_Problem
del Problem, _objref_Problem

# Problem skeleton
__name__ = "hpp_idl.hpp__POA.corbaserver"
class Problem (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.corbaserver.Problem._NP_RepositoryId


    _omni_op_d = {"setRandomSeed": _0_hpp.corbaserver.Problem._d_setRandomSeed, "setMaxNumThreads": _0_hpp.corbaserver.Problem._d_setMaxNumThreads, "getMaxNumThreads": _0_hpp.corbaserver.Problem._d_getMaxNumThreads, "getAvailable": _0_hpp.corbaserver.Problem._d_getAvailable, "getSelected": _0_hpp.corbaserver.Problem._d_getSelected, "setParameter": _0_hpp.corbaserver.Problem._d_setParameter, "getParameter": _0_hpp.corbaserver.Problem._d_getParameter, "getParameterDoc": _0_hpp.corbaserver.Problem._d_getParameterDoc, "selectProblem": _0_hpp.corbaserver.Problem._d_selectProblem, "resetProblem": _0_hpp.corbaserver.Problem._d_resetProblem, "loadPlugin": _0_hpp.corbaserver.Problem._d_loadPlugin, "movePathToProblem": _0_hpp.corbaserver.Problem._d_movePathToProblem, "setInitialConfig": _0_hpp.corbaserver.Problem._d_setInitialConfig, "getInitialConfig": _0_hpp.corbaserver.Problem._d_getInitialConfig, "addGoalConfig": _0_hpp.corbaserver.Problem._d_addGoalConfig, "getGoalConfigs": _0_hpp.corbaserver.Problem._d_getGoalConfigs, "resetGoalConfigs": _0_hpp.corbaserver.Problem._d_resetGoalConfigs, "applyConstraints": _0_hpp.corbaserver.Problem._d_applyConstraints, "optimize": _0_hpp.corbaserver.Problem._d_optimize, "computeValueAndJacobian": _0_hpp.corbaserver.Problem._d_computeValueAndJacobian, "generateValidConfig": _0_hpp.corbaserver.Problem._d_generateValidConfig, "createOrientationConstraint": _0_hpp.corbaserver.Problem._d_createOrientationConstraint, "createTransformationConstraint": _0_hpp.corbaserver.Problem._d_createTransformationConstraint, "createTransformationSE3Constraint": _0_hpp.corbaserver.Problem._d_createTransformationSE3Constraint, "createTransformationConstraint2": _0_hpp.corbaserver.Problem._d_createTransformationConstraint2, "createLockedJoint": _0_hpp.corbaserver.Problem._d_createLockedJoint, "createLockedExtraDof": _0_hpp.corbaserver.Problem._d_createLockedExtraDof, "createManipulability": _0_hpp.corbaserver.Problem._d_createManipulability, "createComBeetweenFeet": _0_hpp.corbaserver.Problem._d_createComBeetweenFeet, "createRelativeComConstraint": _0_hpp.corbaserver.Problem._d_createRelativeComConstraint, "createConvexShapeContactConstraint": _0_hpp.corbaserver.Problem._d_createConvexShapeContactConstraint, "createStaticStabilityConstraint": _0_hpp.corbaserver.Problem._d_createStaticStabilityConstraint, "createPositionConstraint": _0_hpp.corbaserver.Problem._d_createPositionConstraint, "createConfigurationConstraint": _0_hpp.corbaserver.Problem._d_createConfigurationConstraint, "createDistanceBetweenJointConstraint": _0_hpp.corbaserver.Problem._d_createDistanceBetweenJointConstraint, "createDistanceBetweenJointAndObjects": _0_hpp.corbaserver.Problem._d_createDistanceBetweenJointAndObjects, "createIdentityConstraint": _0_hpp.corbaserver.Problem._d_createIdentityConstraint, "resetConstraints": _0_hpp.corbaserver.Problem._d_resetConstraints, "resetConstraintMap": _0_hpp.corbaserver.Problem._d_resetConstraintMap, "addPassiveDofs": _0_hpp.corbaserver.Problem._d_addPassiveDofs, "getConstraintDimensions": _0_hpp.corbaserver.Problem._d_getConstraintDimensions, "setConstantRightHandSide": _0_hpp.corbaserver.Problem._d_setConstantRightHandSide, "getConstantRightHandSide": _0_hpp.corbaserver.Problem._d_getConstantRightHandSide, "getRightHandSide": _0_hpp.corbaserver.Problem._d_getRightHandSide, "setRightHandSide": _0_hpp.corbaserver.Problem._d_setRightHandSide, "setRightHandSideFromConfig": _0_hpp.corbaserver.Problem._d_setRightHandSideFromConfig, "setRightHandSideByName": _0_hpp.corbaserver.Problem._d_setRightHandSideByName, "setRightHandSideFromConfigByName": _0_hpp.corbaserver.Problem._d_setRightHandSideFromConfigByName, "addNumericalConstraints": _0_hpp.corbaserver.Problem._d_addNumericalConstraints, "setNumericalConstraintsLastPriorityOptional": _0_hpp.corbaserver.Problem._d_setNumericalConstraintsLastPriorityOptional, "addLockedJointConstraints": _0_hpp.corbaserver.Problem._d_addLockedJointConstraints, "displayConstraints": _0_hpp.corbaserver.Problem._d_displayConstraints, "getErrorThreshold": _0_hpp.corbaserver.Problem._d_getErrorThreshold, "setErrorThreshold": _0_hpp.corbaserver.Problem._d_setErrorThreshold, "setDefaultLineSearchType": _0_hpp.corbaserver.Problem._d_setDefaultLineSearchType, "getMaxIterProjection": _0_hpp.corbaserver.Problem._d_getMaxIterProjection, "setMaxIterProjection": _0_hpp.corbaserver.Problem._d_setMaxIterProjection, "getMaxIterPathPlanning": _0_hpp.corbaserver.Problem._d_getMaxIterPathPlanning, "setMaxIterPathPlanning": _0_hpp.corbaserver.Problem._d_setMaxIterPathPlanning, "scCreateScalarMultiply": _0_hpp.corbaserver.Problem._d_scCreateScalarMultiply, "getTimeOutPathPlanning": _0_hpp.corbaserver.Problem._d_getTimeOutPathPlanning, "setTimeOutPathPlanning": _0_hpp.corbaserver.Problem._d_setTimeOutPathPlanning, "filterCollisionPairs": _0_hpp.corbaserver.Problem._d_filterCollisionPairs, "selectPathPlanner": _0_hpp.corbaserver.Problem._d_selectPathPlanner, "selectConfigurationShooter": _0_hpp.corbaserver.Problem._d_selectConfigurationShooter, "selectDistance": _0_hpp.corbaserver.Problem._d_selectDistance, "selectSteeringMethod": _0_hpp.corbaserver.Problem._d_selectSteeringMethod, "addPathOptimizer": _0_hpp.corbaserver.Problem._d_addPathOptimizer, "clearPathOptimizers": _0_hpp.corbaserver.Problem._d_clearPathOptimizers, "addConfigValidation": _0_hpp.corbaserver.Problem._d_addConfigValidation, "clearConfigValidations": _0_hpp.corbaserver.Problem._d_clearConfigValidations, "selectPathValidation": _0_hpp.corbaserver.Problem._d_selectPathValidation, "selectPathProjector": _0_hpp.corbaserver.Problem._d_selectPathProjector, "prepareSolveStepByStep": _0_hpp.corbaserver.Problem._d_prepareSolveStepByStep, "executeOneStep": _0_hpp.corbaserver.Problem._d_executeOneStep, "finishSolveStepByStep": _0_hpp.corbaserver.Problem._d_finishSolveStepByStep, "solve": _0_hpp.corbaserver.Problem._d_solve, "directPath": _0_hpp.corbaserver.Problem._d_directPath, "reversePath": _0_hpp.corbaserver.Problem._d_reversePath, "addConfigToRoadmap": _0_hpp.corbaserver.Problem._d_addConfigToRoadmap, "addEdgeToRoadmap": _0_hpp.corbaserver.Problem._d_addEdgeToRoadmap, "appendDirectPath": _0_hpp.corbaserver.Problem._d_appendDirectPath, "concatenatePath": _0_hpp.corbaserver.Problem._d_concatenatePath, "extractPath": _0_hpp.corbaserver.Problem._d_extractPath, "erasePath": _0_hpp.corbaserver.Problem._d_erasePath, "projectPath": _0_hpp.corbaserver.Problem._d_projectPath, "numberPaths": _0_hpp.corbaserver.Problem._d_numberPaths, "optimizePath": _0_hpp.corbaserver.Problem._d_optimizePath, "pathLength": _0_hpp.corbaserver.Problem._d_pathLength, "configAtParam": _0_hpp.corbaserver.Problem._d_configAtParam, "derivativeAtParam": _0_hpp.corbaserver.Problem._d_derivativeAtParam, "getWaypoints": _0_hpp.corbaserver.Problem._d_getWaypoints, "interruptPathPlanning": _0_hpp.corbaserver.Problem._d_interruptPathPlanning, "nodes": _0_hpp.corbaserver.Problem._d_nodes, "numberNodes": _0_hpp.corbaserver.Problem._d_numberNodes, "node": _0_hpp.corbaserver.Problem._d_node, "connectedComponentOfEdge": _0_hpp.corbaserver.Problem._d_connectedComponentOfEdge, "connectedComponentOfNode": _0_hpp.corbaserver.Problem._d_connectedComponentOfNode, "numberEdges": _0_hpp.corbaserver.Problem._d_numberEdges, "edge": _0_hpp.corbaserver.Problem._d_edge, "numberConnectedComponents": _0_hpp.corbaserver.Problem._d_numberConnectedComponents, "nodesConnectedComponent": _0_hpp.corbaserver.Problem._d_nodesConnectedComponent, "getNearestConfig": _0_hpp.corbaserver.Problem._d_getNearestConfig, "clearRoadmap": _0_hpp.corbaserver.Problem._d_clearRoadmap, "resetRoadmap": _0_hpp.corbaserver.Problem._d_resetRoadmap, "saveRoadmap": _0_hpp.corbaserver.Problem._d_saveRoadmap, "readRoadmap": _0_hpp.corbaserver.Problem._d_readRoadmap, "getDistance": _0_hpp.corbaserver.Problem._d_getDistance, "setDistance": _0_hpp.corbaserver.Problem._d_setDistance, "getPath": _0_hpp.corbaserver.Problem._d_getPath, "addPath": _0_hpp.corbaserver.Problem._d_addPath, "getSteeringMethod": _0_hpp.corbaserver.Problem._d_getSteeringMethod, "getPathValidation": _0_hpp.corbaserver.Problem._d_getPathValidation, "getPathPlanner": _0_hpp.corbaserver.Problem._d_getPathPlanner, "getProblem": _0_hpp.corbaserver.Problem._d_getProblem, "getConstraint": _0_hpp.corbaserver.Problem._d_getConstraint}

Problem._omni_skeleton = Problem
_0_hpp__POA.corbaserver.Problem = Problem
omniORB.registerSkeleton(Problem._NP_RepositoryId, Problem)
del Problem
__name__ = "hpp_idl.hpp.corbaserver"

#
# End of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.corbaserver.problem_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.corbaserver")

# The end.
