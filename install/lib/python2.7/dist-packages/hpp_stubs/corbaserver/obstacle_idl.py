# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/obstacle.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/obstacle.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/obstacle.idl")


#
# Start of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp.corbaserver"
_0_hpp.corbaserver = omniORB.openModule("hpp_idl.hpp.corbaserver", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/obstacle.idl")
_0_hpp__POA.corbaserver = omniORB.openModule("hpp_idl.hpp__POA.corbaserver", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/obstacle.idl")


# interface Obstacle
_0_hpp.corbaserver._d_Obstacle = (omniORB.tcInternal.tv_objref, "IDL:hpp/corbaserver/Obstacle:1.0", "Obstacle")
omniORB.typeMapping["IDL:hpp/corbaserver/Obstacle:1.0"] = _0_hpp.corbaserver._d_Obstacle
_0_hpp.corbaserver.Obstacle = omniORB.newEmptyClass()
class Obstacle :
    _NP_RepositoryId = _0_hpp.corbaserver._d_Obstacle[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.corbaserver.Obstacle = Obstacle
_0_hpp.corbaserver._tc_Obstacle = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver._d_Obstacle)
omniORB.registerType(Obstacle._NP_RepositoryId, _0_hpp.corbaserver._d_Obstacle, _0_hpp.corbaserver._tc_Obstacle)

# Obstacle operations and attributes
Obstacle._d_loadObstacleModel = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_removeObstacleFromJoint = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_cutObstacle = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_addObstacle = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_moveObstacle = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Transform_:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_getObstaclePosition = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Transform_:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_getObstacleNames = ((omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_createPolyhedron = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_createBox = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_createSphere = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_createCylinder = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_addPoint = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_ulong, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Obstacle._d_addTriangle = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong), (omniORB.tcInternal.tv_ulong, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Obstacle object reference
class _objref_Obstacle (CORBA.Object):
    _NP_RepositoryId = Obstacle._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def loadObstacleModel(self, *args):
        return _omnipy.invoke(self, "loadObstacleModel", _0_hpp.corbaserver.Obstacle._d_loadObstacleModel, args)

    def removeObstacleFromJoint(self, *args):
        return _omnipy.invoke(self, "removeObstacleFromJoint", _0_hpp.corbaserver.Obstacle._d_removeObstacleFromJoint, args)

    def cutObstacle(self, *args):
        return _omnipy.invoke(self, "cutObstacle", _0_hpp.corbaserver.Obstacle._d_cutObstacle, args)

    def addObstacle(self, *args):
        return _omnipy.invoke(self, "addObstacle", _0_hpp.corbaserver.Obstacle._d_addObstacle, args)

    def moveObstacle(self, *args):
        return _omnipy.invoke(self, "moveObstacle", _0_hpp.corbaserver.Obstacle._d_moveObstacle, args)

    def getObstaclePosition(self, *args):
        return _omnipy.invoke(self, "getObstaclePosition", _0_hpp.corbaserver.Obstacle._d_getObstaclePosition, args)

    def getObstacleNames(self, *args):
        return _omnipy.invoke(self, "getObstacleNames", _0_hpp.corbaserver.Obstacle._d_getObstacleNames, args)

    def createPolyhedron(self, *args):
        return _omnipy.invoke(self, "createPolyhedron", _0_hpp.corbaserver.Obstacle._d_createPolyhedron, args)

    def createBox(self, *args):
        return _omnipy.invoke(self, "createBox", _0_hpp.corbaserver.Obstacle._d_createBox, args)

    def createSphere(self, *args):
        return _omnipy.invoke(self, "createSphere", _0_hpp.corbaserver.Obstacle._d_createSphere, args)

    def createCylinder(self, *args):
        return _omnipy.invoke(self, "createCylinder", _0_hpp.corbaserver.Obstacle._d_createCylinder, args)

    def addPoint(self, *args):
        return _omnipy.invoke(self, "addPoint", _0_hpp.corbaserver.Obstacle._d_addPoint, args)

    def addTriangle(self, *args):
        return _omnipy.invoke(self, "addTriangle", _0_hpp.corbaserver.Obstacle._d_addTriangle, args)

    __methods__ = ["loadObstacleModel", "removeObstacleFromJoint", "cutObstacle", "addObstacle", "moveObstacle", "getObstaclePosition", "getObstacleNames", "createPolyhedron", "createBox", "createSphere", "createCylinder", "addPoint", "addTriangle"] + CORBA.Object.__methods__

omniORB.registerObjref(Obstacle._NP_RepositoryId, _objref_Obstacle)
_0_hpp.corbaserver._objref_Obstacle = _objref_Obstacle
del Obstacle, _objref_Obstacle

# Obstacle skeleton
__name__ = "hpp_idl.hpp__POA.corbaserver"
class Obstacle (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.corbaserver.Obstacle._NP_RepositoryId


    _omni_op_d = {"loadObstacleModel": _0_hpp.corbaserver.Obstacle._d_loadObstacleModel, "removeObstacleFromJoint": _0_hpp.corbaserver.Obstacle._d_removeObstacleFromJoint, "cutObstacle": _0_hpp.corbaserver.Obstacle._d_cutObstacle, "addObstacle": _0_hpp.corbaserver.Obstacle._d_addObstacle, "moveObstacle": _0_hpp.corbaserver.Obstacle._d_moveObstacle, "getObstaclePosition": _0_hpp.corbaserver.Obstacle._d_getObstaclePosition, "getObstacleNames": _0_hpp.corbaserver.Obstacle._d_getObstacleNames, "createPolyhedron": _0_hpp.corbaserver.Obstacle._d_createPolyhedron, "createBox": _0_hpp.corbaserver.Obstacle._d_createBox, "createSphere": _0_hpp.corbaserver.Obstacle._d_createSphere, "createCylinder": _0_hpp.corbaserver.Obstacle._d_createCylinder, "addPoint": _0_hpp.corbaserver.Obstacle._d_addPoint, "addTriangle": _0_hpp.corbaserver.Obstacle._d_addTriangle}

Obstacle._omni_skeleton = Obstacle
_0_hpp__POA.corbaserver.Obstacle = Obstacle
omniORB.registerSkeleton(Obstacle._NP_RepositoryId, Obstacle)
del Obstacle
__name__ = "hpp_idl.hpp.corbaserver"

#
# End of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.corbaserver.obstacle_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.corbaserver")

# The end.
