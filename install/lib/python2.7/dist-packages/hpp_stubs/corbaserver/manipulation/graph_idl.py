# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/corbaserver/manipulation/gcommon.idl"
import hpp_stubs.corbaserver.manipulation.gcommon_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl")


#
# Start of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp.corbaserver"
_0_hpp.corbaserver = omniORB.openModule("hpp_idl.hpp.corbaserver", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl")
_0_hpp__POA.corbaserver = omniORB.openModule("hpp_idl.hpp__POA.corbaserver", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl")


#
# Start of module "hpp.corbaserver.manipulation"
#
__name__ = "hpp_idl.hpp.corbaserver.manipulation"
_0_hpp.corbaserver.manipulation = omniORB.openModule("hpp_idl.hpp.corbaserver.manipulation", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl")
_0_hpp__POA.corbaserver.manipulation = omniORB.openModule("hpp_idl.hpp__POA.corbaserver.manipulation", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/graph.idl")


# typedef ... Namess_t
class Namess_t:
    _NP_RepositoryId = "IDL:hpp/corbaserver/manipulation/Namess_t:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_hpp.corbaserver.manipulation.Namess_t = Namess_t
_0_hpp.corbaserver.manipulation._d_Namess_t  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], 0)
_0_hpp.corbaserver.manipulation._ad_Namess_t = (omniORB.tcInternal.tv_alias, Namess_t._NP_RepositoryId, "Namess_t", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], 0))
_0_hpp.corbaserver.manipulation._tc_Namess_t = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver.manipulation._ad_Namess_t)
omniORB.registerType(Namess_t._NP_RepositoryId, _0_hpp.corbaserver.manipulation._ad_Namess_t, _0_hpp.corbaserver.manipulation._tc_Namess_t)
del Namess_t

# struct Rule
_0_hpp.corbaserver.manipulation.Rule = omniORB.newEmptyClass()
class Rule (omniORB.StructBase):
    _NP_RepositoryId = "IDL:hpp/corbaserver/manipulation/Rule:1.0"

    def __init__(self, grippers, handles, link):
        self.grippers = grippers
        self.handles = handles
        self.link = link

_0_hpp.corbaserver.manipulation.Rule = Rule
_0_hpp.corbaserver.manipulation._d_Rule  = (omniORB.tcInternal.tv_struct, Rule, Rule._NP_RepositoryId, "Rule", "grippers", omniORB.typeMapping["IDL:hpp/Names_t:1.0"], "handles", omniORB.typeMapping["IDL:hpp/Names_t:1.0"], "link", omniORB.tcInternal.tv_boolean)
_0_hpp.corbaserver.manipulation._tc_Rule = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver.manipulation._d_Rule)
omniORB.registerType(Rule._NP_RepositoryId, _0_hpp.corbaserver.manipulation._d_Rule, _0_hpp.corbaserver.manipulation._tc_Rule)
del Rule

# typedef ... Rules
class Rules:
    _NP_RepositoryId = "IDL:hpp/corbaserver/manipulation/Rules:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_hpp.corbaserver.manipulation.Rules = Rules
_0_hpp.corbaserver.manipulation._d_Rules  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Rule:1.0"], 0)
_0_hpp.corbaserver.manipulation._ad_Rules = (omniORB.tcInternal.tv_alias, Rules._NP_RepositoryId, "Rules", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Rule:1.0"], 0))
_0_hpp.corbaserver.manipulation._tc_Rules = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver.manipulation._ad_Rules)
omniORB.registerType(Rules._NP_RepositoryId, _0_hpp.corbaserver.manipulation._ad_Rules, _0_hpp.corbaserver.manipulation._tc_Rules)
del Rules

# interface Graph
_0_hpp.corbaserver.manipulation._d_Graph = (omniORB.tcInternal.tv_objref, "IDL:hpp/corbaserver/manipulation/Graph:1.0", "Graph")
omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Graph:1.0"] = _0_hpp.corbaserver.manipulation._d_Graph
_0_hpp.corbaserver.manipulation.Graph = omniORB.newEmptyClass()
class Graph :
    _NP_RepositoryId = _0_hpp.corbaserver.manipulation._d_Graph[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.corbaserver.manipulation.Graph = Graph
_0_hpp.corbaserver.manipulation._tc_Graph = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver.manipulation._d_Graph)
omniORB.registerType(Graph._NP_RepositoryId, _0_hpp.corbaserver.manipulation._d_Graph, _0_hpp.corbaserver.manipulation._tc_Graph)

# Graph operations and attributes
Graph._d_createGraph = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_deleteGraph = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_selectGraph = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_createSubGraph = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setTargetNodeList = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/IDseq:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_createNode = ((omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_createEdge = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setContainingNode = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/ID:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getContainingNode = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_createWaypointEdge = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getWaypoint = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/ID:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setWaypoint = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/ID:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getGraph = ((), (omniORB.typeMapping["IDL:hpp/GraphComp:1.0"], omniORB.typeMapping["IDL:hpp/GraphElements:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getEdgeStat = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/intSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getFrequencyOfNodeInRoadmap = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/intSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getConfigProjectorStats = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/ConfigProjStat:1.0"], omniORB.typeMapping["IDL:hpp/ConfigProjStat:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_createLevelSetEdge = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/ID:1.0"]), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setLevelSetFoliation = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_addLevelSetFoliation = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_resetConstraints = ((omniORB.tcInternal.tv_long, ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setNumericalConstraints = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_addNumericalConstraints = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getNumericalConstraints = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getLockedJoints = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setNumericalConstraintsForPath = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_addNumericalConstraintsForPath = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setLockedDofConstraints = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_addLockedDofConstraints = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_removeCollisionPairFromEdge = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getNode = ((omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], ), (omniORB.typeMapping["IDL:hpp/ID:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getConfigErrorForNode = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getConfigErrorForEdge = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getConfigErrorForEdgeLeaf = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getConfigErrorForEdgeTarget = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_displayNodeConstraints = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_displayEdgeTargetConstraints = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_displayEdgeConstraints = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getNodesConnectedByEdge = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), ((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_display = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getHistogramValue = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setShort = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.tcInternal.tv_boolean), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_isShort = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_autoBuild = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Namess_t:1.0"], omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Namess_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Rules:1.0"]), (omniORB.typeMapping["IDL:hpp/intSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_setWeight = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.tcInternal.tv_long), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getWeight = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.tcInternal.tv_long, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getName = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_initialize = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Graph._d_getRelativeMotionMatrix = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (omniORB.typeMapping["IDL:hpp/intSeqSeq:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Graph object reference
class _objref_Graph (CORBA.Object):
    _NP_RepositoryId = Graph._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def createGraph(self, *args):
        return _omnipy.invoke(self, "createGraph", _0_hpp.corbaserver.manipulation.Graph._d_createGraph, args)

    def deleteGraph(self, *args):
        return _omnipy.invoke(self, "deleteGraph", _0_hpp.corbaserver.manipulation.Graph._d_deleteGraph, args)

    def selectGraph(self, *args):
        return _omnipy.invoke(self, "selectGraph", _0_hpp.corbaserver.manipulation.Graph._d_selectGraph, args)

    def createSubGraph(self, *args):
        return _omnipy.invoke(self, "createSubGraph", _0_hpp.corbaserver.manipulation.Graph._d_createSubGraph, args)

    def setTargetNodeList(self, *args):
        return _omnipy.invoke(self, "setTargetNodeList", _0_hpp.corbaserver.manipulation.Graph._d_setTargetNodeList, args)

    def createNode(self, *args):
        return _omnipy.invoke(self, "createNode", _0_hpp.corbaserver.manipulation.Graph._d_createNode, args)

    def createEdge(self, *args):
        return _omnipy.invoke(self, "createEdge", _0_hpp.corbaserver.manipulation.Graph._d_createEdge, args)

    def setContainingNode(self, *args):
        return _omnipy.invoke(self, "setContainingNode", _0_hpp.corbaserver.manipulation.Graph._d_setContainingNode, args)

    def getContainingNode(self, *args):
        return _omnipy.invoke(self, "getContainingNode", _0_hpp.corbaserver.manipulation.Graph._d_getContainingNode, args)

    def createWaypointEdge(self, *args):
        return _omnipy.invoke(self, "createWaypointEdge", _0_hpp.corbaserver.manipulation.Graph._d_createWaypointEdge, args)

    def getWaypoint(self, *args):
        return _omnipy.invoke(self, "getWaypoint", _0_hpp.corbaserver.manipulation.Graph._d_getWaypoint, args)

    def setWaypoint(self, *args):
        return _omnipy.invoke(self, "setWaypoint", _0_hpp.corbaserver.manipulation.Graph._d_setWaypoint, args)

    def getGraph(self, *args):
        return _omnipy.invoke(self, "getGraph", _0_hpp.corbaserver.manipulation.Graph._d_getGraph, args)

    def getEdgeStat(self, *args):
        return _omnipy.invoke(self, "getEdgeStat", _0_hpp.corbaserver.manipulation.Graph._d_getEdgeStat, args)

    def getFrequencyOfNodeInRoadmap(self, *args):
        return _omnipy.invoke(self, "getFrequencyOfNodeInRoadmap", _0_hpp.corbaserver.manipulation.Graph._d_getFrequencyOfNodeInRoadmap, args)

    def getConfigProjectorStats(self, *args):
        return _omnipy.invoke(self, "getConfigProjectorStats", _0_hpp.corbaserver.manipulation.Graph._d_getConfigProjectorStats, args)

    def createLevelSetEdge(self, *args):
        return _omnipy.invoke(self, "createLevelSetEdge", _0_hpp.corbaserver.manipulation.Graph._d_createLevelSetEdge, args)

    def setLevelSetFoliation(self, *args):
        return _omnipy.invoke(self, "setLevelSetFoliation", _0_hpp.corbaserver.manipulation.Graph._d_setLevelSetFoliation, args)

    def addLevelSetFoliation(self, *args):
        return _omnipy.invoke(self, "addLevelSetFoliation", _0_hpp.corbaserver.manipulation.Graph._d_addLevelSetFoliation, args)

    def resetConstraints(self, *args):
        return _omnipy.invoke(self, "resetConstraints", _0_hpp.corbaserver.manipulation.Graph._d_resetConstraints, args)

    def setNumericalConstraints(self, *args):
        return _omnipy.invoke(self, "setNumericalConstraints", _0_hpp.corbaserver.manipulation.Graph._d_setNumericalConstraints, args)

    def addNumericalConstraints(self, *args):
        return _omnipy.invoke(self, "addNumericalConstraints", _0_hpp.corbaserver.manipulation.Graph._d_addNumericalConstraints, args)

    def getNumericalConstraints(self, *args):
        return _omnipy.invoke(self, "getNumericalConstraints", _0_hpp.corbaserver.manipulation.Graph._d_getNumericalConstraints, args)

    def getLockedJoints(self, *args):
        return _omnipy.invoke(self, "getLockedJoints", _0_hpp.corbaserver.manipulation.Graph._d_getLockedJoints, args)

    def setNumericalConstraintsForPath(self, *args):
        return _omnipy.invoke(self, "setNumericalConstraintsForPath", _0_hpp.corbaserver.manipulation.Graph._d_setNumericalConstraintsForPath, args)

    def addNumericalConstraintsForPath(self, *args):
        return _omnipy.invoke(self, "addNumericalConstraintsForPath", _0_hpp.corbaserver.manipulation.Graph._d_addNumericalConstraintsForPath, args)

    def setLockedDofConstraints(self, *args):
        return _omnipy.invoke(self, "setLockedDofConstraints", _0_hpp.corbaserver.manipulation.Graph._d_setLockedDofConstraints, args)

    def addLockedDofConstraints(self, *args):
        return _omnipy.invoke(self, "addLockedDofConstraints", _0_hpp.corbaserver.manipulation.Graph._d_addLockedDofConstraints, args)

    def removeCollisionPairFromEdge(self, *args):
        return _omnipy.invoke(self, "removeCollisionPairFromEdge", _0_hpp.corbaserver.manipulation.Graph._d_removeCollisionPairFromEdge, args)

    def getNode(self, *args):
        return _omnipy.invoke(self, "getNode", _0_hpp.corbaserver.manipulation.Graph._d_getNode, args)

    def getConfigErrorForNode(self, *args):
        return _omnipy.invoke(self, "getConfigErrorForNode", _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForNode, args)

    def getConfigErrorForEdge(self, *args):
        return _omnipy.invoke(self, "getConfigErrorForEdge", _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForEdge, args)

    def getConfigErrorForEdgeLeaf(self, *args):
        return _omnipy.invoke(self, "getConfigErrorForEdgeLeaf", _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForEdgeLeaf, args)

    def getConfigErrorForEdgeTarget(self, *args):
        return _omnipy.invoke(self, "getConfigErrorForEdgeTarget", _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForEdgeTarget, args)

    def displayNodeConstraints(self, *args):
        return _omnipy.invoke(self, "displayNodeConstraints", _0_hpp.corbaserver.manipulation.Graph._d_displayNodeConstraints, args)

    def displayEdgeTargetConstraints(self, *args):
        return _omnipy.invoke(self, "displayEdgeTargetConstraints", _0_hpp.corbaserver.manipulation.Graph._d_displayEdgeTargetConstraints, args)

    def displayEdgeConstraints(self, *args):
        return _omnipy.invoke(self, "displayEdgeConstraints", _0_hpp.corbaserver.manipulation.Graph._d_displayEdgeConstraints, args)

    def getNodesConnectedByEdge(self, *args):
        return _omnipy.invoke(self, "getNodesConnectedByEdge", _0_hpp.corbaserver.manipulation.Graph._d_getNodesConnectedByEdge, args)

    def display(self, *args):
        return _omnipy.invoke(self, "display", _0_hpp.corbaserver.manipulation.Graph._d_display, args)

    def getHistogramValue(self, *args):
        return _omnipy.invoke(self, "getHistogramValue", _0_hpp.corbaserver.manipulation.Graph._d_getHistogramValue, args)

    def setShort(self, *args):
        return _omnipy.invoke(self, "setShort", _0_hpp.corbaserver.manipulation.Graph._d_setShort, args)

    def isShort(self, *args):
        return _omnipy.invoke(self, "isShort", _0_hpp.corbaserver.manipulation.Graph._d_isShort, args)

    def autoBuild(self, *args):
        return _omnipy.invoke(self, "autoBuild", _0_hpp.corbaserver.manipulation.Graph._d_autoBuild, args)

    def setWeight(self, *args):
        return _omnipy.invoke(self, "setWeight", _0_hpp.corbaserver.manipulation.Graph._d_setWeight, args)

    def getWeight(self, *args):
        return _omnipy.invoke(self, "getWeight", _0_hpp.corbaserver.manipulation.Graph._d_getWeight, args)

    def getName(self, *args):
        return _omnipy.invoke(self, "getName", _0_hpp.corbaserver.manipulation.Graph._d_getName, args)

    def initialize(self, *args):
        return _omnipy.invoke(self, "initialize", _0_hpp.corbaserver.manipulation.Graph._d_initialize, args)

    def getRelativeMotionMatrix(self, *args):
        return _omnipy.invoke(self, "getRelativeMotionMatrix", _0_hpp.corbaserver.manipulation.Graph._d_getRelativeMotionMatrix, args)

    __methods__ = ["createGraph", "deleteGraph", "selectGraph", "createSubGraph", "setTargetNodeList", "createNode", "createEdge", "setContainingNode", "getContainingNode", "createWaypointEdge", "getWaypoint", "setWaypoint", "getGraph", "getEdgeStat", "getFrequencyOfNodeInRoadmap", "getConfigProjectorStats", "createLevelSetEdge", "setLevelSetFoliation", "addLevelSetFoliation", "resetConstraints", "setNumericalConstraints", "addNumericalConstraints", "getNumericalConstraints", "getLockedJoints", "setNumericalConstraintsForPath", "addNumericalConstraintsForPath", "setLockedDofConstraints", "addLockedDofConstraints", "removeCollisionPairFromEdge", "getNode", "getConfigErrorForNode", "getConfigErrorForEdge", "getConfigErrorForEdgeLeaf", "getConfigErrorForEdgeTarget", "displayNodeConstraints", "displayEdgeTargetConstraints", "displayEdgeConstraints", "getNodesConnectedByEdge", "display", "getHistogramValue", "setShort", "isShort", "autoBuild", "setWeight", "getWeight", "getName", "initialize", "getRelativeMotionMatrix"] + CORBA.Object.__methods__

omniORB.registerObjref(Graph._NP_RepositoryId, _objref_Graph)
_0_hpp.corbaserver.manipulation._objref_Graph = _objref_Graph
del Graph, _objref_Graph

# Graph skeleton
__name__ = "hpp_idl.hpp__POA.corbaserver.manipulation"
class Graph (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.corbaserver.manipulation.Graph._NP_RepositoryId


    _omni_op_d = {"createGraph": _0_hpp.corbaserver.manipulation.Graph._d_createGraph, "deleteGraph": _0_hpp.corbaserver.manipulation.Graph._d_deleteGraph, "selectGraph": _0_hpp.corbaserver.manipulation.Graph._d_selectGraph, "createSubGraph": _0_hpp.corbaserver.manipulation.Graph._d_createSubGraph, "setTargetNodeList": _0_hpp.corbaserver.manipulation.Graph._d_setTargetNodeList, "createNode": _0_hpp.corbaserver.manipulation.Graph._d_createNode, "createEdge": _0_hpp.corbaserver.manipulation.Graph._d_createEdge, "setContainingNode": _0_hpp.corbaserver.manipulation.Graph._d_setContainingNode, "getContainingNode": _0_hpp.corbaserver.manipulation.Graph._d_getContainingNode, "createWaypointEdge": _0_hpp.corbaserver.manipulation.Graph._d_createWaypointEdge, "getWaypoint": _0_hpp.corbaserver.manipulation.Graph._d_getWaypoint, "setWaypoint": _0_hpp.corbaserver.manipulation.Graph._d_setWaypoint, "getGraph": _0_hpp.corbaserver.manipulation.Graph._d_getGraph, "getEdgeStat": _0_hpp.corbaserver.manipulation.Graph._d_getEdgeStat, "getFrequencyOfNodeInRoadmap": _0_hpp.corbaserver.manipulation.Graph._d_getFrequencyOfNodeInRoadmap, "getConfigProjectorStats": _0_hpp.corbaserver.manipulation.Graph._d_getConfigProjectorStats, "createLevelSetEdge": _0_hpp.corbaserver.manipulation.Graph._d_createLevelSetEdge, "setLevelSetFoliation": _0_hpp.corbaserver.manipulation.Graph._d_setLevelSetFoliation, "addLevelSetFoliation": _0_hpp.corbaserver.manipulation.Graph._d_addLevelSetFoliation, "resetConstraints": _0_hpp.corbaserver.manipulation.Graph._d_resetConstraints, "setNumericalConstraints": _0_hpp.corbaserver.manipulation.Graph._d_setNumericalConstraints, "addNumericalConstraints": _0_hpp.corbaserver.manipulation.Graph._d_addNumericalConstraints, "getNumericalConstraints": _0_hpp.corbaserver.manipulation.Graph._d_getNumericalConstraints, "getLockedJoints": _0_hpp.corbaserver.manipulation.Graph._d_getLockedJoints, "setNumericalConstraintsForPath": _0_hpp.corbaserver.manipulation.Graph._d_setNumericalConstraintsForPath, "addNumericalConstraintsForPath": _0_hpp.corbaserver.manipulation.Graph._d_addNumericalConstraintsForPath, "setLockedDofConstraints": _0_hpp.corbaserver.manipulation.Graph._d_setLockedDofConstraints, "addLockedDofConstraints": _0_hpp.corbaserver.manipulation.Graph._d_addLockedDofConstraints, "removeCollisionPairFromEdge": _0_hpp.corbaserver.manipulation.Graph._d_removeCollisionPairFromEdge, "getNode": _0_hpp.corbaserver.manipulation.Graph._d_getNode, "getConfigErrorForNode": _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForNode, "getConfigErrorForEdge": _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForEdge, "getConfigErrorForEdgeLeaf": _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForEdgeLeaf, "getConfigErrorForEdgeTarget": _0_hpp.corbaserver.manipulation.Graph._d_getConfigErrorForEdgeTarget, "displayNodeConstraints": _0_hpp.corbaserver.manipulation.Graph._d_displayNodeConstraints, "displayEdgeTargetConstraints": _0_hpp.corbaserver.manipulation.Graph._d_displayEdgeTargetConstraints, "displayEdgeConstraints": _0_hpp.corbaserver.manipulation.Graph._d_displayEdgeConstraints, "getNodesConnectedByEdge": _0_hpp.corbaserver.manipulation.Graph._d_getNodesConnectedByEdge, "display": _0_hpp.corbaserver.manipulation.Graph._d_display, "getHistogramValue": _0_hpp.corbaserver.manipulation.Graph._d_getHistogramValue, "setShort": _0_hpp.corbaserver.manipulation.Graph._d_setShort, "isShort": _0_hpp.corbaserver.manipulation.Graph._d_isShort, "autoBuild": _0_hpp.corbaserver.manipulation.Graph._d_autoBuild, "setWeight": _0_hpp.corbaserver.manipulation.Graph._d_setWeight, "getWeight": _0_hpp.corbaserver.manipulation.Graph._d_getWeight, "getName": _0_hpp.corbaserver.manipulation.Graph._d_getName, "initialize": _0_hpp.corbaserver.manipulation.Graph._d_initialize, "getRelativeMotionMatrix": _0_hpp.corbaserver.manipulation.Graph._d_getRelativeMotionMatrix}

Graph._omni_skeleton = Graph
_0_hpp__POA.corbaserver.manipulation.Graph = Graph
omniORB.registerSkeleton(Graph._NP_RepositoryId, Graph)
del Graph
__name__ = "hpp_idl.hpp.corbaserver.manipulation"

#
# End of module "hpp.corbaserver.manipulation"
#
__name__ = "hpp_idl.hpp.corbaserver"


#
# End of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.corbaserver.manipulation.graph_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.corbaserver", "hpp_idl.hpp.corbaserver.manipulation")

# The end.
