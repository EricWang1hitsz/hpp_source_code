# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/corbaserver/manipulation/gcommon.idl"
import hpp_stubs.corbaserver.manipulation.gcommon_idl
_0_hpp = omniORB.openModule("hpp_idl.hpp")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA")
# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl")


#
# Start of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp.corbaserver"
_0_hpp.corbaserver = omniORB.openModule("hpp_idl.hpp.corbaserver", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl")
_0_hpp__POA.corbaserver = omniORB.openModule("hpp_idl.hpp__POA.corbaserver", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl")


#
# Start of module "hpp.corbaserver.manipulation"
#
__name__ = "hpp_idl.hpp.corbaserver.manipulation"
_0_hpp.corbaserver.manipulation = omniORB.openModule("hpp_idl.hpp.corbaserver.manipulation", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl")
_0_hpp__POA.corbaserver.manipulation = omniORB.openModule("hpp_idl.hpp__POA.corbaserver.manipulation", r"/local/devel/hpp/src/hpp-manipulation-corba/idl/hpp/corbaserver/manipulation/problem.idl")


# interface Problem
_0_hpp.corbaserver.manipulation._d_Problem = (omniORB.tcInternal.tv_objref, "IDL:hpp/corbaserver/manipulation/Problem:1.0", "Problem")
omniORB.typeMapping["IDL:hpp/corbaserver/manipulation/Problem:1.0"] = _0_hpp.corbaserver.manipulation._d_Problem
_0_hpp.corbaserver.manipulation.Problem = omniORB.newEmptyClass()
class Problem :
    _NP_RepositoryId = _0_hpp.corbaserver.manipulation._d_Problem[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.corbaserver.manipulation.Problem = Problem
_0_hpp.corbaserver.manipulation._tc_Problem = omniORB.tcInternal.createTypeCode(_0_hpp.corbaserver.manipulation._d_Problem)
omniORB.registerType(Problem._NP_RepositoryId, _0_hpp.corbaserver.manipulation._d_Problem, _0_hpp.corbaserver.manipulation._tc_Problem)

# Problem operations and attributes
Problem._d_selectProblem = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_resetProblem = ((), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getAvailable = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getSelected = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createGrasp = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createPreGrasp = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getEnvironmentContactNames = ((), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getRobotContactNames = ((), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getEnvironmentContact = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/intSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_getRobotContact = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/intSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeqSeq:1.0"]), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createPlacementConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createPrePlacementConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.typeMapping["IDL:hpp/Names_t:1.0"], omniORB.tcInternal.tv_double), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_createQPStabilityConstraint = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:hpp/Names_t:1.0"]), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setConstraints = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_applyConstraints = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_double), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_applyConstraintsWithOffset = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.tcInternal.tv_double), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_buildAndProjectPath = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"], omniORB.typeMapping["IDL:hpp/floatSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_setTargetState = ((omniORB.typeMapping["IDL:hpp/ID:1.0"], ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Problem._d_edgeAtParam = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_double), (omniORB.typeMapping["IDL:hpp/ID:1.0"], (omniORB.tcInternal.tv_string,0)), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})

# Problem object reference
class _objref_Problem (CORBA.Object):
    _NP_RepositoryId = Problem._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def selectProblem(self, *args):
        return _omnipy.invoke(self, "selectProblem", _0_hpp.corbaserver.manipulation.Problem._d_selectProblem, args)

    def resetProblem(self, *args):
        return _omnipy.invoke(self, "resetProblem", _0_hpp.corbaserver.manipulation.Problem._d_resetProblem, args)

    def getAvailable(self, *args):
        return _omnipy.invoke(self, "getAvailable", _0_hpp.corbaserver.manipulation.Problem._d_getAvailable, args)

    def getSelected(self, *args):
        return _omnipy.invoke(self, "getSelected", _0_hpp.corbaserver.manipulation.Problem._d_getSelected, args)

    def createGrasp(self, *args):
        return _omnipy.invoke(self, "createGrasp", _0_hpp.corbaserver.manipulation.Problem._d_createGrasp, args)

    def createPreGrasp(self, *args):
        return _omnipy.invoke(self, "createPreGrasp", _0_hpp.corbaserver.manipulation.Problem._d_createPreGrasp, args)

    def getEnvironmentContactNames(self, *args):
        return _omnipy.invoke(self, "getEnvironmentContactNames", _0_hpp.corbaserver.manipulation.Problem._d_getEnvironmentContactNames, args)

    def getRobotContactNames(self, *args):
        return _omnipy.invoke(self, "getRobotContactNames", _0_hpp.corbaserver.manipulation.Problem._d_getRobotContactNames, args)

    def getEnvironmentContact(self, *args):
        return _omnipy.invoke(self, "getEnvironmentContact", _0_hpp.corbaserver.manipulation.Problem._d_getEnvironmentContact, args)

    def getRobotContact(self, *args):
        return _omnipy.invoke(self, "getRobotContact", _0_hpp.corbaserver.manipulation.Problem._d_getRobotContact, args)

    def createPlacementConstraint(self, *args):
        return _omnipy.invoke(self, "createPlacementConstraint", _0_hpp.corbaserver.manipulation.Problem._d_createPlacementConstraint, args)

    def createPrePlacementConstraint(self, *args):
        return _omnipy.invoke(self, "createPrePlacementConstraint", _0_hpp.corbaserver.manipulation.Problem._d_createPrePlacementConstraint, args)

    def createQPStabilityConstraint(self, *args):
        return _omnipy.invoke(self, "createQPStabilityConstraint", _0_hpp.corbaserver.manipulation.Problem._d_createQPStabilityConstraint, args)

    def setConstraints(self, *args):
        return _omnipy.invoke(self, "setConstraints", _0_hpp.corbaserver.manipulation.Problem._d_setConstraints, args)

    def applyConstraints(self, *args):
        return _omnipy.invoke(self, "applyConstraints", _0_hpp.corbaserver.manipulation.Problem._d_applyConstraints, args)

    def applyConstraintsWithOffset(self, *args):
        return _omnipy.invoke(self, "applyConstraintsWithOffset", _0_hpp.corbaserver.manipulation.Problem._d_applyConstraintsWithOffset, args)

    def buildAndProjectPath(self, *args):
        return _omnipy.invoke(self, "buildAndProjectPath", _0_hpp.corbaserver.manipulation.Problem._d_buildAndProjectPath, args)

    def setTargetState(self, *args):
        return _omnipy.invoke(self, "setTargetState", _0_hpp.corbaserver.manipulation.Problem._d_setTargetState, args)

    def edgeAtParam(self, *args):
        return _omnipy.invoke(self, "edgeAtParam", _0_hpp.corbaserver.manipulation.Problem._d_edgeAtParam, args)

    __methods__ = ["selectProblem", "resetProblem", "getAvailable", "getSelected", "createGrasp", "createPreGrasp", "getEnvironmentContactNames", "getRobotContactNames", "getEnvironmentContact", "getRobotContact", "createPlacementConstraint", "createPrePlacementConstraint", "createQPStabilityConstraint", "setConstraints", "applyConstraints", "applyConstraintsWithOffset", "buildAndProjectPath", "setTargetState", "edgeAtParam"] + CORBA.Object.__methods__

omniORB.registerObjref(Problem._NP_RepositoryId, _objref_Problem)
_0_hpp.corbaserver.manipulation._objref_Problem = _objref_Problem
del Problem, _objref_Problem

# Problem skeleton
__name__ = "hpp_idl.hpp__POA.corbaserver.manipulation"
class Problem (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.corbaserver.manipulation.Problem._NP_RepositoryId


    _omni_op_d = {"selectProblem": _0_hpp.corbaserver.manipulation.Problem._d_selectProblem, "resetProblem": _0_hpp.corbaserver.manipulation.Problem._d_resetProblem, "getAvailable": _0_hpp.corbaserver.manipulation.Problem._d_getAvailable, "getSelected": _0_hpp.corbaserver.manipulation.Problem._d_getSelected, "createGrasp": _0_hpp.corbaserver.manipulation.Problem._d_createGrasp, "createPreGrasp": _0_hpp.corbaserver.manipulation.Problem._d_createPreGrasp, "getEnvironmentContactNames": _0_hpp.corbaserver.manipulation.Problem._d_getEnvironmentContactNames, "getRobotContactNames": _0_hpp.corbaserver.manipulation.Problem._d_getRobotContactNames, "getEnvironmentContact": _0_hpp.corbaserver.manipulation.Problem._d_getEnvironmentContact, "getRobotContact": _0_hpp.corbaserver.manipulation.Problem._d_getRobotContact, "createPlacementConstraint": _0_hpp.corbaserver.manipulation.Problem._d_createPlacementConstraint, "createPrePlacementConstraint": _0_hpp.corbaserver.manipulation.Problem._d_createPrePlacementConstraint, "createQPStabilityConstraint": _0_hpp.corbaserver.manipulation.Problem._d_createQPStabilityConstraint, "setConstraints": _0_hpp.corbaserver.manipulation.Problem._d_setConstraints, "applyConstraints": _0_hpp.corbaserver.manipulation.Problem._d_applyConstraints, "applyConstraintsWithOffset": _0_hpp.corbaserver.manipulation.Problem._d_applyConstraintsWithOffset, "buildAndProjectPath": _0_hpp.corbaserver.manipulation.Problem._d_buildAndProjectPath, "setTargetState": _0_hpp.corbaserver.manipulation.Problem._d_setTargetState, "edgeAtParam": _0_hpp.corbaserver.manipulation.Problem._d_edgeAtParam}

Problem._omni_skeleton = Problem
_0_hpp__POA.corbaserver.manipulation.Problem = Problem
omniORB.registerSkeleton(Problem._NP_RepositoryId, Problem)
del Problem
__name__ = "hpp_idl.hpp.corbaserver.manipulation"

#
# End of module "hpp.corbaserver.manipulation"
#
__name__ = "hpp_idl.hpp.corbaserver"


#
# End of module "hpp.corbaserver"
#
__name__ = "hpp_idl.hpp"


#
# End of module "hpp"
#
__name__ = "hpp_stubs.corbaserver.manipulation.problem_idl"

_exported_modules = ( "hpp_idl.hpp", "hpp_idl.hpp.corbaserver", "hpp_idl.hpp.corbaserver.manipulation")

# The end.
