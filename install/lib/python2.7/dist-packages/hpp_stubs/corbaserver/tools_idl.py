# Python stubs generated by omniidl from /local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/tools.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "hpp/common.idl"
import hpp_stubs.common_idl
_0_hpp = omniORB.openModule("hpp_stubs.hpp")
_0_hpp__POA = omniORB.openModule("hpp_stubs.hpp__POA")

#
# Start of module "hpp"
#
__name__ = "hpp_idl.hpp"
_0_hpp = omniORB.openModule("hpp_idl.hpp", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/tools.idl")
_0_hpp__POA = omniORB.openModule("hpp_idl.hpp__POA", r"/local/devel/hpp/src/hpp-corbaserver/idl/hpp/corbaserver/tools.idl")


# interface Tools
_0_hpp._d_Tools = (omniORB.tcInternal.tv_objref, "IDL:hpp/Tools:1.0", "Tools")
omniORB.typeMapping["IDL:hpp/Tools:1.0"] = _0_hpp._d_Tools
_0_hpp.Tools = omniORB.newEmptyClass()
class Tools :
    _NP_RepositoryId = _0_hpp._d_Tools[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_hpp.Tools = Tools
_0_hpp._tc_Tools = omniORB.tcInternal.createTypeCode(_0_hpp._d_Tools)
omniORB.registerType(Tools._NP_RepositoryId, _0_hpp._d_Tools, _0_hpp._tc_Tools)

# Tools operations and attributes
Tools._d_loadServerPlugin = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Tools._d_createContext = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Tools._d_deleteServant = (((omniORB.tcInternal.tv_string,0), ), (), {_0_hpp.Error._NP_RepositoryId: _0_hpp._d_Error})
Tools._d_shutdown = ((), (), None)

# Tools object reference
class _objref_Tools (CORBA.Object):
    _NP_RepositoryId = Tools._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def loadServerPlugin(self, *args):
        return _omnipy.invoke(self, "loadServerPlugin", _0_hpp.Tools._d_loadServerPlugin, args)

    def createContext(self, *args):
        return _omnipy.invoke(self, "createContext", _0_hpp.Tools._d_createContext, args)

    def deleteServant(self, *args):
        return _omnipy.invoke(self, "deleteServant", _0_hpp.Tools._d_deleteServant, args)

    def shutdown(self, *args):
        return _omnipy.invoke(self, "shutdown", _0_hpp.Tools._d_shutdown, args)

    __methods__ = ["loadServerPlugin", "createContext", "deleteServant", "shutdown"] + CORBA.Object.__methods__

omniORB.registerObjref(Tools._NP_RepositoryId, _objref_Tools)
_0_hpp._objref_Tools = _objref_Tools
del Tools, _objref_Tools

# Tools skeleton
__name__ = "hpp_idl.hpp__POA"
class Tools (PortableServer.Servant):
    _NP_RepositoryId = _0_hpp.Tools._NP_RepositoryId


    _omni_op_d = {"loadServerPlugin": _0_hpp.Tools._d_loadServerPlugin, "createContext": _0_hpp.Tools._d_createContext, "deleteServant": _0_hpp.Tools._d_deleteServant, "shutdown": _0_hpp.Tools._d_shutdown}

Tools._omni_skeleton = Tools
_0_hpp__POA.Tools = Tools
omniORB.registerSkeleton(Tools._NP_RepositoryId, Tools)
del Tools
__name__ = "hpp_idl.hpp"

#
# End of module "hpp"
#
__name__ = "hpp_stubs.corbaserver.tools_idl"

_exported_modules = ( "hpp_idl.hpp", )

# The end.
