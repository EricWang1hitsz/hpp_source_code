<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>basic-configuration-shooter.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00109</filename>
    <includes id="a00209" name="uniform.hh" local="no" imported="no">hpp/core/configuration-shooter/uniform.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="typedef">
      <type>configurationShooter::Uniform</type>
      <name>BasicConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga1bb8ebc0355ebdd8e05eacb5973e904b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>configurationShooter::UniformPtr_t</type>
      <name>BasicConfigurationShooterPtr_t</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga30d41482c8e1399b305e10ed88f52191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bi-rrt-planner.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00110</filename>
    <includes id="a00168" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::BiRRTPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>body-pair-collision.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/continuous-validation/</path>
    <filename>a00111</filename>
    <includes id="a00114" name="collision-validation-report.hh" local="no" imported="no">hpp/core/collision-validation-report.hh</includes>
    <includes id="a00153" name="interval-validation.hh" local="no" imported="no">hpp/core/continuous-validation/interval-validation.hh</includes>
    <class kind="class">hpp::core::continuousValidation::BodyPairCollision</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac5a5bd94ed5746ebaacb9f26fedbd165</anchor>
      <arglist>(std::ostream &amp;os, const BodyPairCollision &amp;pair)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>car-like.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00112</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <class kind="class">hpp::core::steeringMethod::CarLike</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>collision-path-validation-report.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00113</filename>
    <includes id="a00170" name="path-validation-report.hh" local="no" imported="no">hpp/core/path-validation-report.hh</includes>
    <includes id="a00114" name="collision-validation-report.hh" local="no" imported="no">hpp/core/collision-validation-report.hh</includes>
    <class kind="struct">hpp::core::CollisionPathValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>collision-validation-report.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00114</filename>
    <includes id="a00210" name="validation-report.hh" local="no" imported="no">hpp/core/validation-report.hh</includes>
    <class kind="struct">hpp::core::CollisionValidationReport</class>
    <class kind="struct">hpp::core::AllCollisionsValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>collision-validation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00115</filename>
    <includes id="a00114" name="collision-validation-report.hh" local="no" imported="no">hpp/core/collision-validation-report.hh</includes>
    <includes id="a00118" name="config-validation.hh" local="no" imported="no">hpp/core/config-validation.hh</includes>
    <class kind="class">hpp::core::CollisionValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>config-optimization.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00116</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <includes id="a00173" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimizationTraits</class>
    <class kind="class">hpp::core::pathOptimization::ConfigOptimization</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Parameters</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Optimizer</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>config-projector.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00117</filename>
    <includes id="a00124" name="constraint.hh" local="no" imported="no">hpp/core/constraint.hh</includes>
    <class kind="class">hpp::core::ConfigProjector</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="typedef">
      <type>constraints::solver::BySubstitution</type>
      <name>BySubstitution</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab8c3c1605cff3cd20c6ceb9d5e1927bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>config-validation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00118</filename>
    <includes id="a00210" name="validation-report.hh" local="no" imported="no">hpp/core/validation-report.hh</includes>
    <includes id="a00191" name="relative-motion.hh" local="no" imported="no">hpp/core/relative-motion.hh</includes>
    <class kind="class">hpp::core::ConfigValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>config-validations.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00119</filename>
    <includes id="a00118" name="config-validation.hh" local="no" imported="no">hpp/core/config-validation.hh</includes>
    <class kind="class">hpp::core::ConfigValidations</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>configuration-shooter.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00120</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ConfigurationShooter</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>connected-component.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00121</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00162" name="node.hh" local="no" imported="no">hpp/core/node.hh</includes>
    <class kind="class">hpp::core::ConnectedComponent</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>constant-curvature.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00122</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <class kind="class">hpp::core::steeringMethod::ConstantCurvature</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>constraint-set.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00123</filename>
    <includes id="a00124" name="constraint.hh" local="no" imported="no">hpp/core/constraint.hh</includes>
    <class kind="class">hpp::core::ConstraintSet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>constraint.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00124</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Constraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac19b1e5c7ce1ad90ee52aa3491bd2e9f</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;constraint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>container.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00125</filename>
    <class kind="struct">hpp::core::Container</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>continuous-validation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00126</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00171" name="path-validation.hh" local="no" imported="no">hpp/core/path-validation.hh</includes>
    <includes id="a00170" name="path-validation-report.hh" local="no" imported="no">hpp/core/path-validation-report.hh</includes>
    <includes id="a00153" name="interval-validation.hh" local="no" imported="no">hpp/core/continuous-validation/interval-validation.hh</includes>
    <class kind="class">hpp::core::ContinuousValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>cost.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00127</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::pathOptimization::Cost</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>continuous-validation/dichotomy.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/continuous-validation/</path>
    <filename>a00128</filename>
    <includes id="a00126" name="continuous-validation.hh" local="no" imported="no">hpp/core/continuous-validation.hh</includes>
    <class kind="class">hpp::core::continuousValidation::Dichotomy</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
  </compound>
  <compound kind="file">
    <name>path-projector/dichotomy.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00129</filename>
    <includes id="a00169" name="path-projector.hh" local="no" imported="no">hpp/core/path-projector.hh</includes>
    <includes id="a00181" name="problem.hh" local="yes" imported="no">hpp/core/problem.hh</includes>
    <class kind="class">hpp::core::pathProjector::Dichotomy</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>diffusing-planner.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00130</filename>
    <includes id="a00168" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::DiffusingPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>discretized-collision-checking.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-validation/</path>
    <filename>a00131</filename>
    <includes id="a00133" name="discretized.hh" local="no" imported="no">hpp/core/path-validation/discretized.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathValidation</namespace>
    <member kind="function">
      <type>DiscretizedPtr_t</type>
      <name>createDiscretizedCollisionChecking</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga2fcabfd40f8c7b422c1247223bdb9490</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>discretized-joint-bound.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-validation/</path>
    <filename>a00132</filename>
    <includes id="a00133" name="discretized.hh" local="no" imported="no">hpp/core/path-validation/discretized.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathValidation</namespace>
    <member kind="function">
      <type>DiscretizedPtr_t</type>
      <name>createDiscretizedJointBound</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga94717ccf260a93ce48dd4affe06189df</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>discretized.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-validation/</path>
    <filename>a00133</filename>
    <includes id="a00171" name="path-validation.hh" local="no" imported="no">hpp/core/path-validation.hh</includes>
    <class kind="class">hpp::core::pathValidation::Discretized</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathValidation</namespace>
  </compound>
  <compound kind="file">
    <name>distance-between-objects.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00134</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::DistanceBetweenObjects</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>distance.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00135</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00162" name="node.hh" local="no" imported="no">hpp/core/node.hh</includes>
    <class kind="class">hpp::core::Distance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>dubins-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00136</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00173" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <class kind="class">hpp::core::DubinsPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>dubins.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00137</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <includes id="a00112" name="car-like.hh" local="no" imported="no">hpp/core/steering-method/car-like.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Dubins</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>edge.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00138</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Edge</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>equation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00139</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>explicit-numerical-constraint.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00140</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>explicit-relative-transformation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00141</filename>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00001</filename>
    <class kind="class">hpp::core::path::Spline</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::path</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
    <namespace>hpp::core::distance</namespace>
    <namespace>hpp::core::nearestNeighbor</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <namespace>hpp::core::pathPlanner</namespace>
    <namespace>hpp::core::pathValidation</namespace>
    <namespace>hpp::core::pathProjector</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
    <namespace>hpp::core::problemTarget</namespace>
    <namespace>hpp::core::configurationShooter</namespace>
    <member kind="typedef">
      <type>constraints::ComparisonTypes_t</type>
      <name>ComparisonTypes_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adc26e9a32a78c8ea5fab45d1dee9ab8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::ComparisonType</type>
      <name>ComparisonType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aad41baac696d2ce24eafd507917644e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BiRRTPlanner &gt;</type>
      <name>BiRRTPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af90c8cbdbb7aeee9d505f1c0c3e13b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::pinocchio::Body</type>
      <name>Body</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a622f6f5092687d1db478f64b1b8f9d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::pinocchio::BodyPtr_t</type>
      <name>BodyPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9778aade55828df4cb2db8aac7f768d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidation &gt;</type>
      <name>CollisionValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ba952d2597ae21f5cd6f8d9d28e1c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidationReport &gt;</type>
      <name>CollisionValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9c7932fefd2d84bac3e94fa0ed7f1154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; AllCollisionsValidationReport &gt;</type>
      <name>AllCollisionsValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0c85430b8a0a9891cf819664f601cf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a30e9981a40f9582642bb1c56f3224a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectConstPtr_t</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afe5b9b66b0cce3c6682f474fdb5de8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::FclCollisionObject</type>
      <name>FclCollisionObject</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a99d6dcf79968726dadce3124e7b72616</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclCollisionObject *</type>
      <name>FclCollisionObjectPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a505c544b8a108a7145b2239d5ba98bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const FclCollisionObject *</type>
      <name>FclConstCollisionObjectPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ca867ec40bd782f256fc3873c8b25d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FclCollisionObject &gt;</type>
      <name>FclCollisionObjectSharePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1c1d37343f1c638f13c9e3e10909926e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad766fef1c422ba6da91ab22223562d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a97d6dc1a72985ba3ba34ed5fd5afdf4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8ba16943042291b4784bbadd22a3a537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationPtr_t</type>
      <name>ConfigurationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acae0f8d3424537613fc2a04f86cf4cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ConfigurationPtr_t &gt;</type>
      <name>Configurations_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a555df35840ca80af0778fa3589522419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::iterator</type>
      <name>ConfigIterator_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a76d9d091e942b1f40871a71420e99094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::const_iterator</type>
      <name>ConfigConstIterator_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f6b83824859081b28bae9342ed0b3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationShooter &gt;</type>
      <name>ConfigurationShooterPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac2f4ac8058ccd404c47481f65cbfc5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigProjector &gt;</type>
      <name>ConfigProjectorPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a87a37d1e50af286182f596142bd92b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidation &gt;</type>
      <name>ConfigValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a030f93d853343d7f5a4b661450080e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidations &gt;</type>
      <name>ConfigValidationsPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa53b4b5b3da1f2df3002677b8e09ef42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConnectedComponent &gt;</type>
      <name>ConnectedComponentPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a87c561eb5d2515b1565dcd2af9f4fa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; ConnectedComponentPtr_t &gt;</type>
      <name>ConnectedComponents_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a0f76f318c278589f3e0864028da2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Constraint &gt;</type>
      <name>ConstraintPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aae51393dbe50864be441251296aa1aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa0c7dcd4ad373beb17324b76f4aebbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ConstraintSet &gt;</type>
      <name>ConstraintSetConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa8956276a26006f945ec6e51a9bcd34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; ConstraintPtr_t &gt;</type>
      <name>Constraints_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adb2ff8cfb4463f5dea2f9fcf3ba019b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Device</type>
      <name>Device_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a380042779011e940fe0710c251fccee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aed486a2c66d49302847a965e01894aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DeviceWkPtr_t</type>
      <name>DeviceWkPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0fb60f58be7c478c2aba017791971a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a99786db2e6d9370a864a8101065ed498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; DevicePtr_t &gt;</type>
      <name>Devices_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aacc07c1f8902ecc52457eaa7dea4917b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunction</type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac2e7f3781b4fe72388e13d49651e677f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunctionPtr_t</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acadaa17624fe50d234d025e370d2079d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiffusingPlanner &gt;</type>
      <name>DiffusingPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a45f0c26b60d1cdb9d2ad70fc02bf5bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Distance &gt;</type>
      <name>DistancePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a86df25709d657aa5607817e510a95434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenObjects &gt;</type>
      <name>DistanceBetweenObjectsPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0de76904f27310b270370cdabd0359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DistanceResults_t</type>
      <name>DistanceResults_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afd2676bc909f7becf3e112549313fa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Edge *</type>
      <name>EdgePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ba26e20e074d0ce7db359cf5788ec86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Edge * &gt;</type>
      <name>Edges_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6b045aa2ba41d2f8119c931479abd276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExtractedPath &gt;</type>
      <name>ExtractedPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a03775a562555949e27a8558513c1d55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SubchainPath &gt;</type>
      <name>SubchainPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aefb9e419c183985ca2a30103b18aa56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9a0f1544df7653f343ca6e07a024846e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Joint</type>
      <name>Joint</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae01e37dbbe9726e3ee8b94388ed30e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointConstPtr_t</type>
      <name>JointConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6697b2c805f16e3560cc80c517eb6167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8eda82f394e6061cb7611351f7e659de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidation &gt;</type>
      <name>JointBoundValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac84e30c13037c7becde45492054e20c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidationReport &gt;</type>
      <name>JointBoundValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef1173e2689796b1fd597ee426ef75e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::HalfJointJacobian_t</type>
      <name>HalfJointJacobian_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a35ec1a911eabee3aab236f2d64f06f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointVector_t</type>
      <name>JointVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3479461675a9f55af2ea278dd29fab03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8b4e1106dc1ea73492a8b34dd3dd1480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJoint</type>
      <name>LockedJoint</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53ea5221cd5833977fd77123b9fd97fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJointPtr_t</type>
      <name>LockedJointPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac96fecfeb66e1b55f986976da16822c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJointConstPtr_t</type>
      <name>LockedJointConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2dd5cd700b0256597e868baf82282fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJoints_t</type>
      <name>LockedJoints_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a243a25ae29386c945c0b2f394a3421d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aff0aaa06e7e53dbf2677d0e7ab7142bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix3_t</type>
      <name>matrix3_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeede579dec1d435e37c7d54de8dbfe4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrix6_t</type>
      <name>matrix6_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af30547d7a7c63ca088e02821e32dc91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a29d33e6decf8f586160db1b1653eb5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixIn_t</type>
      <name>matrixIn_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af55f0f0f180b108c82a9059780206ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixOut_t</type>
      <name>matrixOut_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae599e865ecccaaaea7128e34451ee4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupElement</type>
      <name>LiegroupElement</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab15d1e3ce101ada378a74683e9ca9736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupElementRef</type>
      <name>LiegroupElementRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a26ed2f744cb236c69c7c76d659b745fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupSpace</type>
      <name>LiegroupSpace</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af0b27f3b503b37ed454b78957fc1f959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupSpacePtr_t</type>
      <name>LiegroupSpacePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f6ffc44398fb47349e6ddffa3b9d133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::size_type</type>
      <name>size_type</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa88f47f586bda126ce2ade3b76d4452c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::value_type</type>
      <name>value_type</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a190eee99ae2e156bf6d702bc1c8efabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; value_type, value_type &gt;</type>
      <name>interval_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa1eaaf92fb6075a80b6429631fe3e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::BlockIndex</type>
      <name>BlockIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a810c87decfb8df38f9668bdc2707f62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::segment_t</type>
      <name>segment_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8e6cdd6d4d78aed624b2b6a519669400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::segments_t</type>
      <name>segments_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5c7752f5c47f43d794d05507c09d2a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node *</type>
      <name>NodePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaa1154a22c5a3cc1cbce0ab6cef46568</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; NodePtr_t &gt;</type>
      <name>Nodes_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac612183d50fd36786841219d1c05799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NodePtr_t &gt;</type>
      <name>NodeVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a36540bea2751b959b990f9ce06d1e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a875478d7600a8a860de7f478255d5749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionObjectPtr_t &gt;</type>
      <name>ObjectStdVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23e2ff2e34cc1bd62f8d98e2a09f64a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionObjectConstPtr_t &gt;</type>
      <name>ConstObjectStdVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77ec6716ab4123b5848fcc57172e3def</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Path &gt;</type>
      <name>PathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace7cc447422da6b26fae4c31940dd444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Path &gt;</type>
      <name>PathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac63e80a2b059ec831d1329b9fe4bf598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TimeParameterization &gt;</type>
      <name>TimeParameterizationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d384e6aa8db1b9de0c3e5a66f7470c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathOptimizer &gt;</type>
      <name>PathOptimizerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7be517aaea26ea8502a0f0e4bc4ac5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathPlanner &gt;</type>
      <name>PathPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad40ce0ab724662ec472bf78c1c0a73c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ProblemTarget &gt;</type>
      <name>ProblemTargetPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaca4fba95373d73fc144050fe022b88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathVector &gt;</type>
      <name>PathVectorPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4e193a9670d76e2574324171f9dbc44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const PathVector &gt;</type>
      <name>PathVectorConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a917a99f5f7102616bb84db210cfb3c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PlanAndOptimize &gt;</type>
      <name>PlanAndOptimizePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7351f2b8dd868b1bf97078f25bfce4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Problem &gt;</type>
      <name>ProblemPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af8bd8861fece84e0862fdca0ec25e188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProblemSolver *</type>
      <name>ProblemSolverPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1946314f3983277f4c5284308d18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Roadmap &gt;</type>
      <name>RoadmapPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a490aff87ba3b21101dfbef637372c5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StraightPath &gt;</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5518a19fa67c1517314d81ab0186f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const StraightPath &gt;</type>
      <name>StraightPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afd6446c211bb8a5c2ca41242e8535d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8fd704f02ef4a28f5ae91b5da4282e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a70a7bd2f114a3aa792d7839c19992e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DubinsPath &gt;</type>
      <name>DubinsPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c0d433618e11adbd6eab82d4b42733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const DubinsPath &gt;</type>
      <name>DubinsPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a071e1d138173792d6e0945e1d25289e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; KinodynamicPath &gt;</type>
      <name>KinodynamicPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5bb21410ac371dac7495d6a8fc43fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const KinodynamicPath &gt;</type>
      <name>KinodynamicPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3720bf9cb33302c8ca49c5947c69f6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; KinodynamicOrientedPath &gt;</type>
      <name>KinodynamicOrientedPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a90dae171cec6600883a290b7e172c12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const KinodynamicOrientedPath &gt;</type>
      <name>KinodynamicOrientedPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a57d84dc979aaa2fa12e1548bb45a53fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InterpolatedPath &gt;</type>
      <name>InterpolatedPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace5a5ad364c598f93238668fb2d4c388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const InterpolatedPath &gt;</type>
      <name>InterpolatedPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2ba9dc5971823acbb5c7751376722f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SteeringMethod &gt;</type>
      <name>SteeringMethodPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0053bc3437cb01218dd6dc00e8c1d9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathPtr_t &gt;</type>
      <name>Paths_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad336ad2a888d48e7731b62861a3ff486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathVectorPtr_t &gt;</type>
      <name>PathVectors_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2a525d697c13a5222f0346c4495a3f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac3f63ebece1ff250900fd5c06f6a880f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 2, 1 &gt;</type>
      <name>vector2_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aab9337f20c1674f75c893a99e170ec41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8de0e39cd82cae4ccbb7c155754821c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a65182c83de2824232c09621c0a016f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7e5f504b04604948602d1df2a408f6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic &gt;</type>
      <name>rowvector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53851c7c70479f33f371f1737f5b9f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; VisibilityPrmPlanner &gt;</type>
      <name>VisibilityPrmPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1ba74fc93c8c706fe3e5f841edce4c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ValidationReport &gt;</type>
      <name>ValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0705cba97a4d1ae359ae407f76283685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; WeighedDistance &gt;</type>
      <name>WeighedDistancePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a08e2e9036e1ce01111ee4e01c25a1591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; KinodynamicDistance &gt;</type>
      <name>KinodynamicDistancePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaeec2862d3be89df51d1d13a3124d732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, constraints::ImplicitPtr_t &gt;</type>
      <name>NumericalConstraintMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9730fc23249b995db61f731884c1524f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ComparisonTypes_t &gt;</type>
      <name>ComparisonTypeMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a89d7796599a311cad19d60139211720e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, segments_t &gt;</type>
      <name>segmentsMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a25e64e007ece685c1cbdaf55bbebeb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::NumericalConstraints_t</type>
      <name>NumericalConstraints_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a107ddd3632b932bdd72ab1f9681f1775</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CenterOfMassComputationPtr_t &gt;</type>
      <name>CenterOfMassComputationMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acaf9af2b82f866d54b12e46942f0433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CollisionObjectConstPtr_t, CollisionObjectConstPtr_t &gt;</type>
      <name>CollisionPair_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9ce30595c92c6b4a0132f2464a54ba96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPair_t &gt;</type>
      <name>CollisionPairs_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0b6340628265c283e99a37a1c3118ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Hermite &gt;</type>
      <name>HermitePtr_t</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a1465749a78a76c5d84ad75bc4039e89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Hermite &gt;</type>
      <name>HermiteConstPtr_t</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a49b833070d72a55abcf4bb9f63e22776</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ContinuousValidation &gt;</type>
      <name>ContinuousValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a418a499ce2b9677b8db801ef9be5c75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aa4a911e8e82d50969e922a45301d75f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aa8b78c4343b0cbe828f642b65d478f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a75c2a067020a7bf3c114ac6c9f5adf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac910a71e1e30d46d087029f4c49ee18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SolidSolidCollision &gt;</type>
      <name>SolidSolidCollisionPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a7492ba01a678f4ceaaaca539103fc946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Initializer &gt;</type>
      <name>InitializerPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a124e406ca3bf1dd33f314c43d25dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsShepp &gt;</type>
      <name>ReedsSheppPtr_t</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aa819a4766c9c24002e7dfd2a43d28710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NearestNeighbor *</type>
      <name>NearestNeighborPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a645c9ed99cb8fb5c02113ba42811c18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad7bb0151c114887548e601d1ed626cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basic *</type>
      <name>BasicPtr_t</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a199a21933e46d2032dfc4fa227005d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RandomShortcut &gt;</type>
      <name>RandomShortcutPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>abebe808b0236a0746df981b62053da9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SimpleShortcut &gt;</type>
      <name>SimpleShortcutPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a38aa29a11c7bdfaf55250b4cbb770bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cost &gt;</type>
      <name>CostPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a1961dfc4ae6e548f711040c98c235193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GradientBased &gt;</type>
      <name>GradientBasedPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a8ad66c731b9ab5ccebb460697280b672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathLength &gt;</type>
      <name>PathLengthPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ae74e4b9a49bb45f7f2316d5343252ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PartialShortcut &gt;</type>
      <name>PartialShortcutPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>abb8daefc2c1a8cd02da36f78d5eaeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SimpleTimeParameterization &gt;</type>
      <name>SimpleTimeParameterizationPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ada76a8948742877c6da40401579b685c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigOptimization &gt;</type>
      <name>ConfigOptimizationPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a52c52eb468b4bae87aec69b6c4b8fc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; kPrmStar &gt;</type>
      <name>kPrmStarPtr_t</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad273d262a9fb917f046372dd25da9812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidation &gt;</type>
      <name>PathValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac29e6238dd3231986f3f3e8d323bc003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidations &gt;</type>
      <name>PathValidationsPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a210dbbe8bce02899745bbd1b25cb280f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Discretized &gt;</type>
      <name>DiscretizedPtr_t</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>aa5db11ab040deb58489ac29bbbf80d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidationReport &gt;</type>
      <name>PathValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a51bcf6b3e015b1054da572494e904f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ade0108edfd5efe11699a893ac2cdfec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReports_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28f6ce0bbe980544c5e7efc63ce9038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathProjector &gt;</type>
      <name>PathProjectorPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acd16e05d1b627514c689e55d35ee5dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Global &gt;</type>
      <name>GlobalPtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a46ec3eb85b8743ea4c8d456dc9bfcaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a8e49bd7ae5008b130b160cd7d81fbdfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a0db46ea53ddfbc8d643b454ecdf42aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RecursiveHermite &gt;</type>
      <name>RecursiveHermitePtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a80d52ae1e901e0c51bc9db53d9cbb6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a28fd447b06fd457e3e2507aedfeecdf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsShepp &gt;</type>
      <name>ReedsSheppPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>adad48913eb05b8094d86fee32a0d6d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Kinodynamic &gt;</type>
      <name>KinodynamicPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a90a6d122f99010463d2bc066f5fb6e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GoalConfigurations &gt;</type>
      <name>GoalConfigurationsPtr_t</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a5b199c94158433428667eb1e970247d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TaskTarget &gt;</type>
      <name>TaskTargetPtr_t</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a08b6f9043e55d79e3302d3600f73c67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Uniform &gt;</type>
      <name>UniformPtr_t</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a954fbc8eace2201addf10234e2de9b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Gaussian &gt;</type>
      <name>GaussianPtr_t</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a6d16b0d9a00b0c7fd6eb7ca6ab1036d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; core::vector3_t &gt;</type>
      <name>Shape_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad210a2c82c0dd3f523ae6512e6ad2023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; JointPtr_t, Shape_t &gt;</type>
      <name>JointAndShape_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab28374e1724179b31636c60e63cb3174</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; JointAndShape_t &gt;</type>
      <name>JointAndShapes_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7b12378c56f0137bd6665890c7ab062e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::Implicit NumericalConstraint</type>
      <name>HPP_CORE_DEPRECATED</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a44e5bf9d0da6c1f9de26efd34d99ba40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acb414703aac918925839d49b3948e465</anchor>
      <arglist>(BiRRTPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2167169fa8af2cc00a4f5f463b788d23</anchor>
      <arglist>(CollisionValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad3ec7349de8f0dc7504724da5124cc46</anchor>
      <arglist>(CollisionValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f17347362db08cf19f05e5294fd64ad</anchor>
      <arglist>(AllCollisionsValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac94e7acd08f63ddfa2133416ded9dafb</anchor>
      <arglist>(ConfigurationShooter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8311bd5400d203db7df24ea03b59426d</anchor>
      <arglist>(ConfigProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>add02c514415417ab4b8b914e5f741190</anchor>
      <arglist>(ConfigValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a11bacdeb089c9a66c430707980a66ff3</anchor>
      <arglist>(ConfigValidations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afa5e13487da5f25b8466ba5104fec736</anchor>
      <arglist>(ConnectedComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4a974fea2650924cb1999dca9f5040bd</anchor>
      <arglist>(Constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab5de251f2f1bfa367068fc26b6ad440a</anchor>
      <arglist>(ConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a965629a64a025c2e6e6f240da05b75f7</anchor>
      <arglist>(DiffusingPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a33f177097b9d908822ab15a2ff674fb8</anchor>
      <arglist>(Distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa9e7cca73a7b0eaf230d062bbd289e5b</anchor>
      <arglist>(DistanceBetweenObjects)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a73d2ab29a49cc705e6a1f06fc0a81ae9</anchor>
      <arglist>(ExtractedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21f60f2dc52aa2b56735d697ab02522</anchor>
      <arglist>(SubchainPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6ac5fb1471e1932896ed5c78f4628ffb</anchor>
      <arglist>(JointBoundValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa728f221db12a1afb747eb9f33677391</anchor>
      <arglist>(Path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad361599a99c5560b92ef592e8956d306</anchor>
      <arglist>(TimeParameterization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a653ee049387accb711897f44393ed90b</anchor>
      <arglist>(PathOptimizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9790ac608c0a25cf4aa7acae38adfd36</anchor>
      <arglist>(PathPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa99755b02258dbf65860185ccc20f98f</anchor>
      <arglist>(ProblemTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a560f6a29ed5a9ad39099c57fcbe0dc2a</anchor>
      <arglist>(PathVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab1ad444bdb7808d69b718b60e2e71989</anchor>
      <arglist>(PlanAndOptimize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a97710024ca6869f82ca48292d0182a41</anchor>
      <arglist>(Problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa204dbe6835f9640d2988a30f90ed1d5</anchor>
      <arglist>(Roadmap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a14ab4ed2bea455402224921945e1a87e</anchor>
      <arglist>(SteeringMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aae8a0c6463f41c3c13fe7bfb776f1c97</anchor>
      <arglist>(StraightPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4336b71884424eb417d2b61cc7e8ae77</anchor>
      <arglist>(InterpolatedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac90b4786125803dc8ab96d867540822e</anchor>
      <arglist>(DubinsPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adc6485953e44f5876e42cf17594b4e18</anchor>
      <arglist>(ReedsSheppPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a39c0ccf03c500a1e772da726311bebb4</anchor>
      <arglist>(KinodynamicPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a64ed39b9e61b6626249b21bb55aa8c12</anchor>
      <arglist>(KinodynamicOrientedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a60622ae657703c813320688b0c48df40</anchor>
      <arglist>(ValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a988fec29c02856c309455f39c67e9120</anchor>
      <arglist>(VisibilityPrmPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac1a0115a014bff841665ca660302c401</anchor>
      <arglist>(WeighedDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad38d74bfdecd02a4a022087f5264d2ca</anchor>
      <arglist>(KinodynamicDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a176c5548590a9582a6acec4f584ca6bf</anchor>
      <arglist>(Hermite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef2e5a1160d45977e47716a5163284ae</anchor>
      <arglist>(ContinuousValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a5c1fb75e89d30cab0a78df20cce9658c</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a67e18eb9671a7157692958a4af6c07a8</anchor>
      <arglist>(Progressive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>afbac7d3cbd1e80d7f46f10c671ce2027</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ab1c6f0cdbfc25f34b4e566e3592e4887</anchor>
      <arglist>(SolidSolidCollision)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a4956a89e37a4a1553d0733bb17e030b6</anchor>
      <arglist>(Initializer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a8af73a5f7181c54b9930e490ad975279</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a3aff81be25b6380476682ddf6dd0411c</anchor>
      <arglist>(RandomShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a8514bb104fcb58753c2c67b114316dee</anchor>
      <arglist>(SimpleShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ae1ba543a90f5ca6ea36cfb8137c30e8a</anchor>
      <arglist>(Cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a9eba7cc09d8f17930205c119db2af35f</anchor>
      <arglist>(GradientBased)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a68d3425720b126c08f04dce21022ad1d</anchor>
      <arglist>(PathLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a7ca6a13378a55ecd651a8100efb0469e</anchor>
      <arglist>(PartialShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ab407232e5e936832102da8596b18402c</anchor>
      <arglist>(SimpleTimeParameterization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a152fb63bebb1a1d38de541d5515b519b</anchor>
      <arglist>(ConfigOptimization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a19fe9565cd97dcc770293f56893be057</anchor>
      <arglist>(kPrmStar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4c24e90ecfb3673badadc0c1d17384df</anchor>
      <arglist>(PathValidations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aca6b632cecd7c718d70c221776970e12</anchor>
      <arglist>(PathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ad264ba9ab61b88d2b9a7e8dd97c9ec4a</anchor>
      <arglist>(Discretized)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac200530dfd3f4bf573f0ec5aa4ff7959</anchor>
      <arglist>(PathProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac49d62d9c9f730b9a30049d0f84a6b59</anchor>
      <arglist>(Global)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a6bdc47dcf6ef337fcc5a746318af82bf</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a294ce2fadb99b3eab085eea2b8aece1c</anchor>
      <arglist>(Progressive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a058d705cc8ac83216093d033ac386370</anchor>
      <arglist>(RecursiveHermite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af4072cd5a7aaefdd07ea766d786b678a</anchor>
      <arglist>(Interpolated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a8211ae4089cdc6043bbadfbfff797d22</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad2466e9e551707e2a21029224ea69e9f</anchor>
      <arglist>(Kinodynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac3948e11644a9eac9cc22011a5ef588d</anchor>
      <arglist>(GoalConfigurations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ad7d34b357f6c12e02f4dc5d992c58985</anchor>
      <arglist>(TaskTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ad46ecf9b5b11d06ee6223903ccb8a512</anchor>
      <arglist>(Uniform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a03290b6e09a77a3c56a3d07b9243530d</anchor>
      <arglist>(Gaussian)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>steering-method/fwd.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00142</filename>
    <class kind="class">hpp::core::steeringMethod::Spline</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Straight &gt;</type>
      <name>StraightPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a8c21b499462268d5f86d4c1236702a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CarLike &gt;</type>
      <name>CarLikePtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a9e5e636878a078b58a630603155274a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstantCurvature &gt;</type>
      <name>ConstantCurvaturePtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aed0ff2b8e0829404089c25ac69540e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dubins &gt;</type>
      <name>DubinsPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a141060540d133bdc8e166951f41ac082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Snibud &gt;</type>
      <name>SnibudPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a08035abe804c2a6ba625ac26291ef152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Hermite &gt;</type>
      <name>HermitePtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7e3ad20e33fadd6e20a000f8fed4cd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>steeringMethod::Straight</type>
      <name>SteeringMethodStraight</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1bbd88fc6593982689784184894cd541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>steeringMethod::StraightPtr_t</type>
      <name>SteeringMethodStraightPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a684f9a8a85bbaad06c8229cba58376f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>abd8ee730c6eec2a352b45d171107b2ba</anchor>
      <arglist>(Straight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af4072cd5a7aaefdd07ea766d786b678a</anchor>
      <arglist>(Interpolated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a266c2e1534869077bf698d55f13c7317</anchor>
      <arglist>(CarLike)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4fb1ce0b39b1f0b087422bf40709f308</anchor>
      <arglist>(ConstantCurvature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac2e4b00252653b58088019b3eba368b1</anchor>
      <arglist>(Dubins)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a8211ae4089cdc6043bbadfbfff797d22</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af6efa9108ba052712a74b11d47e516f6</anchor>
      <arglist>(Snibud)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a42ad6ae26e3c97f7e71a3396915ea67e</anchor>
      <arglist>(Hermite)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gaussian.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/configuration-shooter/</path>
    <filename>a00144</filename>
    <includes id="a00120" name="configuration-shooter.hh" local="no" imported="no">hpp/core/configuration-shooter.hh</includes>
    <class kind="class">hpp::core::configurationShooter::Gaussian</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::configurationShooter</namespace>
  </compound>
  <compound kind="file">
    <name>global.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00145</filename>
    <includes id="a00169" name="path-projector.hh" local="no" imported="no">hpp/core/path-projector.hh</includes>
    <includes id="a00117" name="config-projector.hh" local="no" imported="no">hpp/core/config-projector.hh</includes>
    <class kind="class">hpp::core::pathProjector::Global</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>goal-configurations.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/problem-target/</path>
    <filename>a00146</filename>
    <includes id="a00180" name="problem-target.hh" local="no" imported="no">hpp/core/problem-target.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::problemTarget::GoalConfigurations</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::problemTarget</namespace>
  </compound>
  <compound kind="file">
    <name>gradient-based.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00147</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <includes id="a00173" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <includes id="a00205" name="straight.hh" local="no" imported="no">hpp/core/steering-method/straight.hh</includes>
    <class kind="class">hpp::core::pathOptimization::GradientBased</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <member kind="typedef">
      <type>std::vector&lt; CollisionConstraintsResult &gt;</type>
      <name>CollisionConstraintsResults_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8ec3de1032309ec7c79adf9edfc48c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path/hermite.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path/</path>
    <filename>a00148</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00200" name="path/spline.hh" local="no" imported="no">hpp/core/path/spline.hh</includes>
    <class kind="class">hpp::core::path::Hermite</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::path</namespace>
  </compound>
  <compound kind="file">
    <name>steering-method/hermite.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00149</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00181" name="problem.hh" local="no" imported="no">hpp/core/problem.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00148" name="path/hermite.hh" local="no" imported="no">hpp/core/path/hermite.hh</includes>
    <includes id="a00212" name="weighed-distance.hh" local="no" imported="no">hpp/core/weighed-distance.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Hermite</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>initializer.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/continuous-validation/</path>
    <filename>a00150</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00126" name="continuous-validation.hh" local="no" imported="no">hpp/core/continuous-validation.hh</includes>
    <class kind="class">hpp::core::continuousValidation::Initializer</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
  </compound>
  <compound kind="file">
    <name>interpolated-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00151</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::InterpolatedPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>interpolated-steering-method.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00152</filename>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <includes id="a00151" name="interpolated-path.hh" local="no" imported="no">hpp/core/interpolated-path.hh</includes>
    <includes id="a00212" name="weighed-distance.hh" local="no" imported="no">hpp/core/weighed-distance.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Interpolated</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>interval-validation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/continuous-validation/</path>
    <filename>a00153</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::continuousValidation::IntervalValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a1303978c96f50ff48c4904883a389b9a</anchor>
      <arglist>(std::ostream &amp;os, const IntervalValidation&lt; ValidationReportTypePtr_t &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>joint-bound-validation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00154</filename>
    <includes id="a00118" name="config-validation.hh" local="no" imported="no">hpp/core/config-validation.hh</includes>
    <class kind="class">hpp::core::JointBoundValidationReport</class>
    <class kind="class">hpp::core::JointBoundValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>k-prm-star.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-planner/</path>
    <filename>a00155</filename>
    <includes id="a00168" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::pathPlanner::kPrmStar</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathPlanner</namespace>
  </compound>
  <compound kind="file">
    <name>kinodynamic-distance.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00156</filename>
    <includes id="a00135" name="distance.hh" local="no" imported="no">hpp/core/distance.hh</includes>
    <class kind="class">hpp::core::KinodynamicDistance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>kinodynamic-oriented-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00157</filename>
    <includes id="a00158" name="kinodynamic-path.hh" local="no" imported="no">hpp/core/kinodynamic-path.hh</includes>
    <class kind="class">hpp::core::KinodynamicOrientedPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>kinodynamic-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00158</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00204" name="straight-path.hh" local="no" imported="no">hpp/core/straight-path.hh</includes>
    <class kind="class">hpp::core::KinodynamicPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>linear-constraint.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00159</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="struct">hpp::core::pathOptimization::LinearConstraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>nearest-neighbor.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00160</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::NearestNeighbor</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>news.hh</name>
    <path>/local/devel/hpp/src/hpp-core/doc/main-page/</path>
    <filename>a00161</filename>
  </compound>
  <compound kind="file">
    <name>node.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00162</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Node</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ga1947b6d9b37f1a315e596b194adc6159</anchor>
      <arglist>(std::ostream &amp;os, const Node &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numerical-constraint.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00163</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>package.hh</name>
    <path>/local/devel/hpp/src/hpp-core/doc/main-page/</path>
    <filename>a00164</filename>
  </compound>
  <compound kind="file">
    <name>parameter.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00165</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Parameter</class>
    <class kind="class">hpp::core::ParameterDescription</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>partial-shortcut.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00166</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcutTraits</class>
    <class kind="class">hpp::core::pathOptimization::PartialShortcut</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcut::Parameters</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <member kind="typedef">
      <type>std::vector&lt; JointConstPtr_t &gt;</type>
      <name>JointStdVector_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a63304c9f128b9e89ddaf0af5af189896</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path-optimizer.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00167</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::PathOptimizer</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-planner.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00168</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::PathPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-projector.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00169</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::PathProjector</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-validation-report.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00170</filename>
    <includes id="a00210" name="validation-report.hh" local="no" imported="no">hpp/core/validation-report.hh</includes>
    <class kind="struct">hpp::core::PathValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-validation.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00171</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00191" name="relative-motion.hh" local="no" imported="no">hpp/core/relative-motion.hh</includes>
    <class kind="class">hpp::core::PathValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-validations.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00172</filename>
    <includes id="a00171" name="path-validation.hh" local="no" imported="no">hpp/core/path-validation.hh</includes>
    <class kind="class">hpp::core::PathValidations</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-vector.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00173</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::PathVector</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00174</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00123" name="constraint-set.hh" local="no" imported="no">hpp/core/constraint-set.hh</includes>
    <includes id="a00184" name="projection-error.hh" local="no" imported="no">hpp/core/projection-error.hh</includes>
    <includes id="a00208" name="time-parameterization.hh" local="no" imported="no">hpp/core/time-parameterization.hh</includes>
    <class kind="class">hpp::core::Path</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gac90e244c2dcfbdf7f95f0b59d825ac51</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plan-and-optimize.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00175</filename>
    <includes id="a00168" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::PlanAndOptimize</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>plugin.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00176</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ProblemSolverPlugin</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::plugin</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CORE_DEFINE_PLUGIN</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>gab3cdfd76b4852eb48df559321c9ab2cf</anchor>
      <arglist>(PluginClassName)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>findPluginLibrary</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a7711647922b72d413a033f28f05a97e0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPlugin</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a2d8ac542501d81f04a7fb87ff5ee7813</anchor>
      <arglist>(const std::string &amp;lib, ProblemSolver *ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polynomial.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/time-parameterization/</path>
    <filename>a00177</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00208" name="time-parameterization.hh" local="no" imported="no">hpp/core/time-parameterization.hh</includes>
    <class kind="class">hpp::core::timeParameterization::Polynomial</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::timeParameterization</namespace>
  </compound>
  <compound kind="file">
    <name>porting-notes.hh</name>
    <path>/local/devel/hpp/src/hpp-core/doc/main-page/</path>
    <filename>a00178</filename>
  </compound>
  <compound kind="file">
    <name>problem-solver.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00179</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00125" name="container.hh" local="no" imported="no">hpp/core/container.hh</includes>
    <class kind="class">hpp::core::ProblemSolver</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="typedef">
      <type>boost::function&lt; DevicePtr_t(const std::string &amp;) &gt;</type>
      <name>RobotBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7696595c8216e9371e1cd04285923da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathOptimizerPtr_t(const Problem &amp;) &gt;</type>
      <name>PathOptimizerBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8cef489d46a492887079fb69c1cc0101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathPlannerPtr_t(const Problem &amp;, const RoadmapPtr_t &amp;) &gt;</type>
      <name>PathPlannerBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3fbb1d69deb998d881f44a8f3cc31574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathValidationPtr_t(const DevicePtr_t &amp;, const value_type &amp;) &gt;</type>
      <name>PathValidationBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1b466240de9d55c35eb729f17e87ab81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ConfigValidationPtr_t(const DevicePtr_t &amp;) &gt;</type>
      <name>ConfigValidationBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a03230e43581b9666d0fbb0a94a964d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathProjectorPtr_t(const Problem &amp;, const value_type &amp;) &gt;</type>
      <name>PathProjectorBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac0bac79279c0dbd23fc47531d289389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ConfigurationShooterPtr_t(const Problem &amp;) &gt;</type>
      <name>ConfigurationShooterBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7dc5cc5cf0d4564de753e93f9b340237</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; DistancePtr_t(const Problem &amp;) &gt;</type>
      <name>DistanceBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aff0d2e4125a869a18d35b3025afde772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; SteeringMethodPtr_t(const Problem &amp;) &gt;</type>
      <name>SteeringMethodBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abdee5d810fc0996220902666aed2dd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; std::string, CollisionObjectPtr_t &gt; &gt;</type>
      <name>AffordanceObjects_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2e22265c4c41287448c31cf973862ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector3_t</type>
      <name>AffordanceConfig_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a129b020c203488b6de59d4c8eb01d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>problem-target.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00180</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ProblemTarget</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>problem.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00181</filename>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00125" name="container.hh" local="no" imported="no">hpp/core/container.hh</includes>
    <includes id="a00165" name="parameter.hh" local="no" imported="no">hpp/core/parameter.hh</includes>
    <class kind="class">hpp::core::Problem</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HPP_START_PARAMETER_DECLARATION</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ac4f4fe6f02b4c39c5fa4bd53561f5e21</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_END_PARAMETER_DECLARATION</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aa46ee9b859c3ea49ea5a7f53cbead43d</anchor>
      <arglist>(name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>continuous-validation/progressive.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/continuous-validation/</path>
    <filename>a00182</filename>
    <includes id="a00126" name="continuous-validation.hh" local="no" imported="no">hpp/core/continuous-validation.hh</includes>
    <class kind="class">hpp::core::continuousValidation::Progressive</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
  </compound>
  <compound kind="file">
    <name>path-projector/progressive.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00183</filename>
    <includes id="a00169" name="path-projector.hh" local="no" imported="no">hpp/core/path-projector.hh</includes>
    <class kind="class">hpp::core::pathProjector::Progressive</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>projection-error.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00184</filename>
    <class kind="struct">hpp::core::projection_error</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>quadratic-program.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00185</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00159" name="linear-constraint.hh" local="no" imported="no">hpp/core/path-optimization/linear-constraint.hh</includes>
    <class kind="struct">hpp::core::pathOptimization::QuadraticProgram</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>random-shortcut.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00186</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <class kind="class">hpp::core::pathOptimization::RandomShortcut</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>recursive-hermite.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00187</filename>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00169" name="path-projector.hh" local="yes" imported="no">hpp/core/path-projector.hh</includes>
    <class kind="class">hpp::core::pathProjector::RecursiveHermite</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>reeds-shepp-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00188</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00173" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <class kind="class">hpp::core::ReedsSheppPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>distance/reeds-shepp.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/distance/</path>
    <filename>a00189</filename>
    <includes id="a00135" name="distance.hh" local="no" imported="no">hpp/core/distance.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <class kind="class">hpp::core::distance::ReedsShepp</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::distance</namespace>
  </compound>
  <compound kind="file">
    <name>steering-method/reeds-shepp.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00190</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00112" name="car-like.hh" local="no" imported="no">hpp/core/steering-method/car-like.hh</includes>
    <class kind="class">hpp::core::steeringMethod::ReedsShepp</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>relative-motion.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00191</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="struct">hpp::core::RelativeMotion</class>
    <class kind="struct">Eigen::NumTraits&lt; hpp::core::RelativeMotion::RelativeMotionType &gt;</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>Eigen</namespace>
  </compound>
  <compound kind="file">
    <name>roadmap-factory.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/parser/</path>
    <filename>a00192</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::parser::RoadmapFactory</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::parser</namespace>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; std::string &gt;</type>
      <name>StringSequence</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga6a93d581ac8f3ae38e05cedf2d8e3bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; double &gt;</type>
      <name>ConfigurationFactory</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>gaddac3c470d5ddef6a2dbbdd69ee46327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; unsigned int &gt;</type>
      <name>IdSequence</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga3dabee6e928569a6a1c3e77f84c0314b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga50b557a4d968611b4cb9370a9762c6f2</anchor>
      <arglist>(std::ostream &amp;o, const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga8db26505fc7081063e9e5b00cd7498d1</anchor>
      <arglist>(const std::string &amp;filename, const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga16f89457b51f1dffce2a7c77e1bae958</anchor>
      <arglist>(const std::string &amp;filename, const RoadmapPtr_t &amp;roadmap, const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>roadmap.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00193</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00121" name="connected-component.hh" local="no" imported="no">hpp/core/connected-component.hh</includes>
    <class kind="class">hpp::core::Roadmap</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ga8ae1800d63fa0035ab3281311e873193</anchor>
      <arglist>(std::ostream &amp;os, const Roadmap &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simple-shortcut.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00194</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <class kind="class">hpp::core::pathOptimization::SimpleShortcut</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>simple-time-parameterization.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00195</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <class kind="class">hpp::core::pathOptimization::SimpleTimeParameterization</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>snibud.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00196</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00112" name="car-like.hh" local="no" imported="no">hpp/core/steering-method/car-like.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Snibud</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>solid-solid-collision.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/continuous-validation/</path>
    <filename>a00197</filename>
    <includes id="a00111" name="body-pair-collision.hh" local="no" imported="no">hpp/core/continuous-validation/body-pair-collision.hh</includes>
    <class kind="struct">hpp::core::continuousValidation::CoefficientVelocity</class>
    <class kind="class">hpp::core::continuousValidation::SolidSolidCollision</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
    <member kind="typedef">
      <type>std::vector&lt; CoefficientVelocity &gt;</type>
      <name>CoefficientVelocities_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a3d199ff454ffcc0ffea6750ce737ee65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline-gradient-based-abstract.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00198</filename>
    <includes id="a00167" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <includes id="a00173" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <includes id="a00200" name="path/spline.hh" local="no" imported="no">hpp/core/path/spline.hh</includes>
    <includes id="a00201" name="steering-method/spline.hh" local="no" imported="no">hpp/core/steering-method/spline.hh</includes>
    <includes id="a00159" name="linear-constraint.hh" local="no" imported="no">hpp/core/path-optimization/linear-constraint.hh</includes>
    <class kind="class">hpp::core::pathOptimization::SplineGradientBasedAbstract</class>
    <class kind="struct">hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>spline-gradient-based.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00199</filename>
    <includes id="a00198" name="spline-gradient-based-abstract.hh" local="no" imported="no">hpp/core/path-optimization/spline-gradient-based-abstract.hh</includes>
    <includes id="a00173" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <includes id="a00200" name="path/spline.hh" local="no" imported="no">hpp/core/path/spline.hh</includes>
    <includes id="a00201" name="steering-method/spline.hh" local="no" imported="no">hpp/core/steering-method/spline.hh</includes>
    <class kind="class">hpp::core::pathOptimization::SplineGradientBased</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>path/spline.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/path/</path>
    <filename>a00200</filename>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <class kind="class">hpp::core::path::Spline</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::path</namespace>
    <member kind="enumeration">
      <type></type>
      <name>PolynomeBasisType</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga18289218cbc246c9fb909ab171496799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CanonicalPolynomeBasis</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gga18289218cbc246c9fb909ab171496799a937ab195a8b21e3bdbcec4e8a09bf7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BernsteinBasis</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gga18289218cbc246c9fb909ab171496799a0c8ba89811b44840450fdc1df6210fe5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>steering-method/spline.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00201</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Spline</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>steering-kinodynamic.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00202</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Kinodynamic</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a1c058c3ad817364b1f76cce6a0ac3429</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>steering-method.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00203</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <includes id="a00184" name="projection-error.hh" local="no" imported="no">hpp/core/projection-error.hh</includes>
    <class kind="class">hpp::core::SteeringMethod</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>straight-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00204</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::StraightPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>straight.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00205</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00181" name="problem.hh" local="no" imported="no">hpp/core/problem.hh</includes>
    <includes id="a00142" name="steering-method/fwd.hh" local="no" imported="no">hpp/core/steering-method/fwd.hh</includes>
    <includes id="a00203" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00204" name="straight-path.hh" local="no" imported="no">hpp/core/straight-path.hh</includes>
    <includes id="a00135" name="distance.hh" local="no" imported="no">hpp/core/distance.hh</includes>
    <includes id="a00117" name="config-projector.hh" local="no" imported="no">hpp/core/config-projector.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Straight</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>subchain-path.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00206</filename>
    <includes id="a00174" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::SubchainPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>task-target.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/problem-target/</path>
    <filename>a00207</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00180" name="problem-target.hh" local="no" imported="no">hpp/core/problem-target.hh</includes>
    <class kind="class">hpp::core::problemTarget::TaskTarget</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::problemTarget</namespace>
  </compound>
  <compound kind="file">
    <name>time-parameterization.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00208</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::TimeParameterization</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>uniform.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/configuration-shooter/</path>
    <filename>a00209</filename>
    <includes id="a00120" name="configuration-shooter.hh" local="no" imported="no">hpp/core/configuration-shooter.hh</includes>
    <class kind="class">hpp::core::configurationShooter::Uniform</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::configurationShooter</namespace>
  </compound>
  <compound kind="file">
    <name>validation-report.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00210</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga656195c66d722769e89c7a8af48181a2</anchor>
      <arglist>(std::ostream &amp;os, const ValidationReport &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>visibility-prm-planner.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00211</filename>
    <includes id="a00168" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::VisibilityPrmPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>weighed-distance.hh</name>
    <path>/local/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00212</filename>
    <includes id="a00135" name="distance.hh" local="no" imported="no">hpp/core/distance.hh</includes>
    <class kind="class">hpp::core::WeighedDistance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="struct">
    <name>hpp::core::AllCollisionsValidationReport</name>
    <filename>a00006.html</filename>
    <base>hpp::core::CollisionValidationReport</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ac0667636b5a14a528b0ea6d34dfcdfe4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; CollisionValidationReportPtr_t &gt;</type>
      <name>collisionReports</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a81f51430bb048156bcdaed99d18075c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::BiRRTPlanner</name>
    <filename>a00007.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSolve</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad8f6f487a612951fdb6b195c9986c66a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad1f711c473ff5e3265ea212362692458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BiRRTPlannerPtr_t</type>
      <name>createWithRoadmap</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a60758eb1e7c442b057fbcd3276c228ea</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BiRRTPlannerPtr_t</type>
      <name>create</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a7dd50a001ff520bc9d9e09b73b0eb3eb</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BiRRTPlanner</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac55063ff81ede9bf4bd578cbfc77fef7</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BiRRTPlanner</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a6f21e0a1503a01e57f93334074dcb93c</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>abc8b4005df92726fa0a66464235483f1</anchor>
      <arglist>(const BiRRTPlannerWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>extendInternal</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab8c8255fb1aeed25cbdeae2fce9b7b76</anchor>
      <arglist>(const SteeringMethodPtr_t &amp;sm, Configuration_t &amp;qProj_, const NodePtr_t &amp;near, const Configuration_t &amp;target, bool reverse=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConfigurationShooterPtr_t</type>
      <name>configurationShooter_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad2a0e7091d5b17596694d79b5f3da220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectedComponentPtr_t</type>
      <name>startComponent_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac0014cb52847fbea5da36edea6e0472d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ConnectedComponentPtr_t &gt;</type>
      <name>endComponents_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a9ef5f01f0cdf4325f7604aa346543da1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousValidation::BodyPairCollision</name>
    <filename>a00008.html</filename>
    <base>IntervalValidation&lt; CollisionValidationReportPtr_t &gt;</base>
    <member kind="typedef">
      <type>std::pair&lt; CollisionObjectConstPtr_t, CollisionObjectConstPtr_t &gt;</type>
      <name>CollisionPair_t</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a830341e1598bfc2ee78db53f9197273b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPair_t &gt;</type>
      <name>CollisionPairs_t</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9a9f987595ac3376a1de1cdd6999e7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateConfiguration</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af7d036c6f80431b3b6f16ca1188bc2b1</anchor>
      <arglist>(const value_type &amp;t, interval_t &amp;interval, CollisionValidationReportPtr_t &amp;report, pinocchio::DeviceData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>const CollisionPairs_t &amp;</type>
      <name>pairs</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adb3f0564ed63e5b1b731c3e4cfe2f8e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CollisionPairs_t &amp;</type>
      <name>pairs</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5854255283e3de20b4ad551f19631ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>maximalVelocity</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab17ef843b3cf51b21e245068b04d9121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>indexJointA</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab94f0c10e4864a9a6d317525974379f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>indexJointB</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5a3f24e39b0fde9dc49c7d3fb2afc7cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeObjectTo_b</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a3f388056c21153c42e6e02a2c34fde5b</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCollisionPair</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a322947b1b42b05b8b428be49b9c93b1c</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;, const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6380ce441113efbeca0f095a394453bb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>adf89d7dcaf028f887362705fcd348f74</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyPairCollisionPtr_t</type>
      <name>copy</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aa53301ebf7df977e19f161fdc97855aa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BodyPairCollision</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6c63354de229b9d6bae43187ef2bb4ec</anchor>
      <arglist>(value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BodyPairCollision</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8fe4324ba179bd408e4b1b9c272354e0</anchor>
      <arglist>(const BodyPairCollision &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReport</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab9691f9329d910fc719c7569e4ef1297</anchor>
      <arglist>(CollisionValidationReportPtr_t &amp;report, fcl::CollisionResult result, CollisionPair_t _pair) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::CarLike</name>
    <filename>a00009.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CarLike</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>aaf331668e74f4acc73ed536e3bcac4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWheelJoints</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a7c151bd8bb594f0ce5559755f6142dae</anchor>
      <arglist>(const std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRadius</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>af6f21d6cf1f8b1614aa935d9c52511aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CarLike</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a9c978ecad2341d866258991f34193400</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CarLike</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a85a3a4c31219f10773757190bc4ccff9</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CarLike</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>abf5d72fa62931ff1cf8edd83a139e391</anchor>
      <arglist>(const CarLike &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a099ca2dc5e45d7d2235235bb7a43e39d</anchor>
      <arglist>(CarLikeWkPtr_t weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeviceWkPtr_t</type>
      <name>device_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a92060c388740391f48c0f931299bc740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>rho_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ad65c24531c5fd208d159d9908b031b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>xy_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ab684ba6515427681df9ecb648bc01444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>rz_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a8f09d67078fd369fec993d8c9dcb50f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>xyId_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a3c9de0781eb802947c4d045d4d6df78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>rzId_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a2b1e9bc93ab10a9957f7ec343935ff4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; JointPtr_t &gt;</type>
      <name>wheels_</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a650bf54c7d9ed91fdfcd186139e5f6d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::continuousValidation::CoefficientVelocity</name>
    <filename>a00010.html</filename>
    <member kind="function">
      <type></type>
      <name>CoefficientVelocity</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adb0604b18329ab7b599faeec95d100d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a301dff75b65309f8caaf5b20c56d0fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af5dd1640ea14d07e80ae1b7c4248331f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::CollisionPathValidationReport</name>
    <filename>a00011.html</filename>
    <base>hpp::core::PathValidationReport</base>
    <member kind="function">
      <type></type>
      <name>CollisionPathValidationReport</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a94fc0c2db0c943cf37d1c568682b67f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionPathValidationReport</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3bb4d034301cd2cd48631d73554c9430</anchor>
      <arglist>(const value_type &amp;param, const ValidationReportPtr_t &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::CollisionValidation</name>
    <filename>a00012.html</filename>
    <base>hpp::core::ConfigValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a58d156f9e6bdb13aa91e6e6eb7de2b4e</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a9467ced9ad0e6c93337e9d854486afc9</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacleToJoint</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad29cf0ee8cedae473c1c210e58f81183</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;object, const JointPtr_t &amp;joint, const bool includeChildren)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7cfb8c2968dbfb45785ea62cf92649ec</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a43e5ea22885467df61884838abe4ded4</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkParameterized</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ab94240545d357d90e068f04edb3666cd</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAllContacts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a6452176e6cdbfd0d8d70e6e65731adae</anchor>
      <arglist>(bool computeAllContacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterized</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a9a291da017d6cb6429da6ff11145622e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionValidationPtr_t</type>
      <name>create</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a43cb5fba4e6c46de2d0e5577b4a14781</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="variable">
      <type>fcl::CollisionRequest</type>
      <name>collisionRequest_</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a5dc347e95ac68bfa72c6fa7ba6c4810f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionValidation</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae401e96e3cd9d40a366aec64fe848a8b</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a93649ab8602e905fba4c93767188d807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CollisionPairs_t</type>
      <name>collisionPairs_</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8bbf1150922c0095bf9eb24635f4dbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CollisionPairs_t</type>
      <name>parameterizedPairs_</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a41266093aa6507c46ad6d37191c953b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CollisionPairs_t</type>
      <name>disabledPairs_</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4fee12883a2fd2d4ccb78a9e639904d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::CollisionValidationReport</name>
    <filename>a00013.html</filename>
    <base>hpp::core::ValidationReport</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae5e23a28f1f14f1541d016ccda945725</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>CollisionObjectConstPtr_t</type>
      <name>object1</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a193dc2641123f839ec74228a80fad30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>objectName1</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8fa8c3938024a7cc1db055747a44b49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionObjectConstPtr_t</type>
      <name>object2</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>abd798eaff0aa484b430ff96f41496da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>objectName2</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a0f81fefb48e36c6ee6fec2ec1ae2a593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fcl::CollisionResult</type>
      <name>result</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>af96e84ce5122ca10cf6cd5ef982cab48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::ConfigOptimization</name>
    <filename>a00014.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Optimizer</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Parameters</class>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a2c5eafbf648acbc6c425e07a47b17f9b</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigOptimizationPtr_t</type>
      <name>createWithTraits</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a599c8ac279d7a269f83dcef2dbbc27f6</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigOptimizationPtr_t</type>
      <name>create</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a33f165b7d1b9a7859cc3cbe20c8f2287</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="variable">
      <type>struct hpp::core::pathOptimization::ConfigOptimization::Parameters</type>
      <name>parameters</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>af75bf6b8e6ad7ae136d1c64a6addd07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Optimizer &gt;</type>
      <name>Optimizers_t</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a3844cac6fdcd6e8b8e2561ba68d0681c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigOptimization</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a1d34f6f3918d63d41078ad10b181fcaa</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual constraints::ImplicitPtr_t</type>
      <name>createNumConstraint</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a107e95d45820f215595efab1264f069b</anchor>
      <arglist>(const PathVector &amp;path) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>buildOptimizers</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a4ac6e03f6a218a94d9b266b4b3b11baa</anchor>
      <arglist>(const PathVector &amp;pv, Optimizers_t &amp;projectors)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::ConfigOptimizationTraits</name>
    <filename>a00015.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addConfigConstraintToPath</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab347cebf6703cf8072b18d5e784a22d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfPass</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef72f093470c755b817eb394a4e6df85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfIterations</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa56997a31615ab1ce4f4e7098fce248a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>alphaInit</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5fd7f0975d6964c3982cae6e2a760c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration_t</type>
      <name>getGoal</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a00562680f9490cd658011ca6737fce55</anchor>
      <arglist>(const PathVector &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigProjectorPtr_t</type>
      <name>getConfigProjector</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a245459d93409ac7cf14573bef2d80bfa</anchor>
      <arglist>(const PathPtr_t &amp;before, const PathPtr_t &amp;after, bool &amp;isReverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>shouldFilter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae4c0bd471cf1ef86cae4f94b645c0617</anchor>
      <arglist>(JointConstPtr_t joint, const size_type iDof)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigProjector</name>
    <filename>a00016.html</filename>
    <base>hpp::core::Constraint</base>
    <member kind="enumeration">
      <type></type>
      <name>LineSearchType</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Backtracking</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5faf784cc0385be1395a4fbe48cd381d00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ErrorNormBased</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5fa3dc768a9554a0fc96a8815b494059db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FixedSequence</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5fa99cc38874102610e204f1a4d36e070b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5faf46052e16fd2de89ced03564e6215a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Backtracking</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5faf784cc0385be1395a4fbe48cd381d00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ErrorNormBased</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5fa3dc768a9554a0fc96a8815b494059db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FixedSequence</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5fa99cc38874102610e204f1a4d36e070b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23db61ab9e0d033c696734acfbdced5faf46052e16fd2de89ced03564e6215a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintPtr_t</type>
      <name>copy</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af7a1ffd4f8fa2aff752103626088af6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigProjector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a909b195bb46a8e4696ba4d0006b80273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a08e84397d4657cc42b05657f680f8b4b</anchor>
      <arglist>(const constraints::ImplicitPtr_t &amp;numericalConstraint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac33edf93240f67b838020d3abf00a6a3</anchor>
      <arglist>(const constraints::ImplicitPtr_t &amp;numericalConstraint, const segments_t &amp;passiveDofs=segments_t(0), const std::size_t priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastIsOptional</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1c7ccf6cc897b0d194a19dafb7933a99</anchor>
      <arglist>(bool optional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lastIsOptional</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a442674d17ac86b2624a9a863135f8278</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>afc016eb0c4ac08ceec024e41f6df0853</anchor>
      <arglist>(ConfigurationOut_t config, std::size_t maxIter=0)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a95670e3606c5db863a3e62b550b44e3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectVectorOnKernel</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad6ef24ca8fbfe54ebdedc5771a76edc2</anchor>
      <arglist>(ConfigurationIn_t from, vectorIn_t velocity, vectorOut_t result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>projectOnKernel</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7a2b5537787ded46a1a0702054d69560</anchor>
      <arglist>(ConfigurationIn_t from, ConfigurationIn_t to, ConfigurationOut_t result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValueAndJacobian</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab430985dea08e3eb9d0048c8f2c993f8</anchor>
      <arglist>(ConfigurationIn_t configuration, vectorOut_t value, matrixOut_t reducedJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>oneStep</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acaddceff68db87cfd89a1ba339bed7c8</anchor>
      <arglist>(ConfigurationOut_t config, vectorOut_t dq, const value_type &amp;alpha) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af023831e0150fa7482609907f243ede9</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterations</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad7891b75a61f922e61e608b895536b27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a190d1bc25303204eb02a4323e4f6e3e7</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1d689b339bd4312c7861fbdce2d1c4ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>residualError</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af5fee5da111f2994356af659d4a33998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>sigma</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7c8c31150caa8d4f07d4598acc2f80fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac8d82e2d8f8436172555b7277e061f26</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7ee48db6cb9ad86b2042515f59ea8657</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>::hpp::statistics::SuccessStatistics &amp;</type>
      <name>statistics</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9809159f18f944ee71a3d5256e0d4cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NumericalConstraints_t &amp;</type>
      <name>numericalConstraints</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a98456e586593981d78f6600fe0619760</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BySubstitution &amp;</type>
      <name>solver</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a31de2ef4b565bffa6b3ba13202552dd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberFreeVariables</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad5ee382f4c295d8f8d9b877f3641327f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adf8b064fefea56989df6977ef16457af</anchor>
      <arglist>() const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dimension</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abb9580c20cb085354e2f1d298c912de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a37c81f972f468b5cded419ebf7051f54</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aee3c925da7c0b8b29fb1f3e7a818dad7</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7a9c1e82c13a2497cb3ff37e5187a82d</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2df0d4f2e7784483a3843038bdac1bc1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7a415907d15cd08bac66437db9472f13</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af6fbd7d71a3ab203e5a5bc7a58aa7b34</anchor>
      <arglist>(const constraints::ImplicitPtr_t &amp;nm, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6e756716583b3c0846bfb73df4d5a290</anchor>
      <arglist>(const vector_t &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abc66f89290a1a9ad81540e344a23c25b</anchor>
      <arglist>(const constraints::ImplicitPtr_t &amp;nm, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a192cf17a2d797fce006688c801b0a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideAt</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a559c1754d89afb827c595028de3deb75</anchor>
      <arglist>(const value_type &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigProjectorPtr_t</type>
      <name>create</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1c3585a35f3047b59d7d00bd0d3dc50b</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name, value_type errorThreshold, size_type maxIterations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigProjectorPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a95022384eede6dd1a5e857fa72b46d36</anchor>
      <arglist>(const ConfigProjectorPtr_t cp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultLineSearch</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a763802c892b701b3a1925ce83843aab5</anchor>
      <arglist>(LineSearchType ls)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigProjector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abf5079013a7d78fa48cea1cab07dba26</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name, value_type errorThreshold, size_type maxIterations)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigProjector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a59c90dde55cfdcb7a8a5c9951b1005d7</anchor>
      <arglist>(const ConfigProjector &amp;cp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a11a1c94133cbab0b7bf64e388098b910</anchor>
      <arglist>(const ConfigProjectorPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a543afdfee795aeca0c8ded9cd04687f5</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberFreeVariables</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad5ee382f4c295d8f8d9b877f3641327f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adf8b064fefea56989df6977ef16457af</anchor>
      <arglist>() const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dimension</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abb9580c20cb085354e2f1d298c912de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a37c81f972f468b5cded419ebf7051f54</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aee3c925da7c0b8b29fb1f3e7a818dad7</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7a9c1e82c13a2497cb3ff37e5187a82d</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2df0d4f2e7784483a3843038bdac1bc1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7a415907d15cd08bac66437db9472f13</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af6fbd7d71a3ab203e5a5bc7a58aa7b34</anchor>
      <arglist>(const constraints::ImplicitPtr_t &amp;nm, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6e756716583b3c0846bfb73df4d5a290</anchor>
      <arglist>(const vector_t &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>abc66f89290a1a9ad81540e344a23c25b</anchor>
      <arglist>(const constraints::ImplicitPtr_t &amp;nm, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a192cf17a2d797fce006688c801b0a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideAt</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a559c1754d89afb827c595028de3deb75</anchor>
      <arglist>(const value_type &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigurationShooter</name>
    <filename>a00017.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual ConfigurationPtr_t</type>
      <name>shoot</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>gae2b19921d4a0384ff48bad1e88b2ef77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shoot</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga0f78af14dfa23638a442e619423182e9</anchor>
      <arglist>(Configuration_t &amp;q) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga86b5b11fccd07ccbe0fe68479d8d1d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga6d4743d6735b50ad4868d58222be365a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>gad7e9a66c680fd8ba7395fe5b048da84a</anchor>
      <arglist>(const ConfigurationShooterWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigValidation</name>
    <filename>a00018.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7c3355070428a489615c440068e554d7</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0b3bb0d3da04d23c0b124d66472da3ef</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a338c76ab89f3850bdebb4f307b8a1d3d</anchor>
      <arglist>(const JointPtr_t &amp;, const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab71b76ef98fab3ae47331afe5eeb039c</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigValidation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a85a3afb5cbdd2a52dfe9ead6c6f3c8dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigValidation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a4920e4e75fd8b8c0ff1b2c730d5c9cfd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigValidations</name>
    <filename>a00019.html</filename>
    <base>hpp::core::ConfigValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abe52a8efe25366032d7c31ee9bc7125d</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>addba678cc219f82887eae54034f82b02</anchor>
      <arglist>(const ConfigValidationPtr_t &amp;configValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a601f1609b493940f094f1095ce00f1c5</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a8d6811c83d9ce07e6c0a24b4b736b88e</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a11965ec06cb946cda6d133d681ad70f5</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberConfigValidations</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a547e87235f510d98463fd2ed2f8e85a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ab3bfa393f4678dfaa03ca68462fd41c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigValidationsPtr_t</type>
      <name>create</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4900bba9445c1fab1c956b27eaaa7a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigValidations</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad2f00329ea3ec8b309f0ebd4f1f9e596</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConnectedComponent</name>
    <filename>a00020.html</filename>
    <member kind="typedef">
      <type>ConnectedComponent *</type>
      <name>RawPtr_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa8e1ef94d3397e8f9e5c0484fb357066</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; RawPtr_t &gt;</type>
      <name>RawPtrs_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae61092b7c79a641b012002842b9f791d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac978bb39c1fab28f9dbd143cbdeee10f</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectedComponent</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a578732266f807b44abd0eb9a6b42836a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addNode</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7cf53886e3dfa77fe7a1a0603d629c7f</anchor>
      <arglist>(const NodePtr_t &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>const NodeVector_t &amp;</type>
      <name>nodes</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad5add1e8ce0112b0605a333a1c31c3ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConnectedComponentPtr_t</type>
      <name>self</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a71331f999ccf3f1d137cf4dfac49095b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a086158983a4f4d69c1ac141d54898d27</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af6e306d1dd95346b481fe29eea89c6d5</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc, RawPtrs_t &amp;cc2Tocc1)</arglist>
    </member>
    <member kind="function">
      <type>const RawPtrs_t &amp;</type>
      <name>reachableTo</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ab583b84bab105ce782ebb9923ca82d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RawPtrs_t &amp;</type>
      <name>reachableFrom</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1147a1a16c049d31d87892de8e886fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConnectedComponentPtr_t</type>
      <name>create</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abcd0cffc447b9e1339d9d76dc93d4486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>globalFinishTime_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7908e6528af3ad8782d72f2bf16ad8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConnectedComponent</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a74fff8400e3d2d475019ad1963746a0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a29da047510ffa425d553bba0131f8e13</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;shPtr)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Roadmap</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a07fbd00a87b2baaf8091241bdc6ef7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a086158983a4f4d69c1ac141d54898d27</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af6e306d1dd95346b481fe29eea89c6d5</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc, RawPtrs_t &amp;cc2Tocc1)</arglist>
    </member>
    <member kind="function">
      <type>const RawPtrs_t &amp;</type>
      <name>reachableTo</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ab583b84bab105ce782ebb9923ca82d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RawPtrs_t &amp;</type>
      <name>reachableFrom</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1147a1a16c049d31d87892de8e886fb7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::ConstantCurvature</name>
    <filename>a00021.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af16832682f3ee98fcda9e381a84245eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstantCurvature</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ad952b7331d64f354a09261cc3bc37b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a418cd420f706948ca0bb377d690b6192</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa8587f8596197670f41fe6c7e4144f58</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5476ab6aefb5f3975c35f99787c74259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a22379906053c20d0433aed99f77af603</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstantCurvaturePtr_t</type>
      <name>create</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a3957bd461b9116f8f0958ccfd01fc980</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type curveLength, value_type pathLength, value_type curvature, size_type xyId, size_type rzId, const JointPtr_t rz, const std::vector&lt; JointPtr_t &gt; wheels, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstantCurvaturePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa3d37dd435b245817fdabcd7379c5a50</anchor>
      <arglist>(const ConstantCurvaturePtr_t &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstantCurvaturePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a62b406e5a4b4a3db64d6752f78df5827</anchor>
      <arglist>(const ConstantCurvaturePtr_t &amp;other, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>afd839e1b105605bd5a3479e25f9d5c97</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstantCurvature</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab1d41b4c544941aacf61c26d43d16963</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type curveLength, value_type pathLength, value_type curvature, size_type xyId, size_type rzId, const JointPtr_t rz, const std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstantCurvature</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5b65564372ffc12cd80cbed22b945411</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type curveLength, value_type pathLength, value_type curvature, size_type xyId, size_type rzId, const JointPtr_t rz, const std::vector&lt; JointPtr_t &gt; wheels, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstantCurvature</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a20231fc29962c28928646a53fa5e54db</anchor>
      <arglist>(const ConstantCurvature &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstantCurvature</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aeba87b265c6f66316d55bd6febf8d65f</anchor>
      <arglist>(const ConstantCurvature &amp;other, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a91583d4c33f879471f65af5afd1d3ded</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_derivative</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a97b20db8b489ec2ba7ae17ccb70d6fdd</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;param, size_type order) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_velocityBound</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aae61f8ae2b12a12163fb9d367d3c75d2</anchor>
      <arglist>(vectorOut_t bound, const value_type &amp;param0, const value_type &amp;param1) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a8bab2d2a975068759f070504f9d02395</anchor>
      <arglist>(const interval_t &amp;paramInterval) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>addb9d41818de8aa3dbcda54476bd9db4</anchor>
      <arglist>(const ConstantCurvatureWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Constraint</name>
    <filename>a00022.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a429bce2911a05611b4605b2c12c84fda</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8d86d3866cc767326d7d241c9908984b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a613dc89bd75e348e436a5d235e9139a6</anchor>
      <arglist>(ConfigurationIn_t config)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a00a26a9cb959837c4df3a70096b65290</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintPtr_t</type>
      <name>copy</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a91ad25d8fdea67633b25b15756d15af1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a85b6e19928125dd2048201fcc724795c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a327bace24d2482c102edae5bddbb4bdd</anchor>
      <arglist>(ConfigurationOut_t configuration)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6dc385e4a4a96cb9390819cf82c65389</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a32ca18ff601784330a57a7f138c2c708</anchor>
      <arglist>(const Constraint &amp;constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5798ef49ecbfeeb54d2c271edb90934c</anchor>
      <arglist>(const ConstraintPtr_t &amp;self)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstraintSet</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a00cbb3fc5907a1cdfdc3ccfacf1dd3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>constraints::LockedJoint</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a85b1e86404bb57ad44606895fb50e845</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConfigProjector</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aa0b7cb74bdaccc4f0639fd10583f68ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a540e56ec36b238e688a33277ed0e69e7</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConstraintSet</name>
    <filename>a00023.html</filename>
    <base>hpp::core::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintPtr_t</type>
      <name>copy</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae251989aca246b8937321cbdbbf9eb5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0895c1976ca15022e36fb3984dba5abe</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>ConfigProjectorPtr_t</type>
      <name>configProjector</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a8dc1e74e5c4012ecfedd66b51e50e4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Constraints_t::iterator</type>
      <name>begin</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a7149c01b5e01453b81cd0528584a9702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Constraints_t::iterator</type>
      <name>end</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac811e8cf8943cee81611cdb89209509b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad02c09e134300a9affb35fcdb5eff24e</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a087f13a1806166d615b5527cb32a95f3</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a830b73100653fbc3f184cdc1198fb233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a80f800b50662a4bad150ccb8c3c74da1</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc9c9a04ff80600691a6c084f3bc7ab6</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc9a6662bb48bafd0ab7f82f900b200c</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>af615e7b550919575806a6bd55ff69ba1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSetPtr_t</type>
      <name>create</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad6c2d5b23757df6b5d402b683548ade4</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSetPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>addfb385a1955ab5087841eaa3def135a</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;cs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstraintSet</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a06324e6ccb98d0b6fe4cde9bf9ba7e52</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstraintSet</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a44276fa064ae282317235907ee51e9ff</anchor>
      <arglist>(const ConstraintSet &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac7385c5df7fcb726019523d0cf79b03d</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad6622e24ca6e638d22ac1ff6d1df9ae9</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad8ca0d93ffaa24515611422d1377ff22</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>constraints::LockedJoint</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a85b1e86404bb57ad44606895fb50e845</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Constraint</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a697ed9eaa8955d595a023663ab1e8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConfigProjector</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa0b7cb74bdaccc4f0639fd10583f68ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a830b73100653fbc3f184cdc1198fb233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a80f800b50662a4bad150ccb8c3c74da1</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc9c9a04ff80600691a6c084f3bc7ab6</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc9a6662bb48bafd0ab7f82f900b200c</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>af615e7b550919575806a6bd55ff69ba1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::Container</name>
    <filename>a00024.html</filename>
    <templarg>Types</templarg>
    <templarg>Key</templarg>
    <member kind="typedef">
      <type>std::map&lt; Key, Types &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const Key &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const </arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; AffordanceConfig_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, AffordanceConfig_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; AffordanceObjects_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, AffordanceObjects_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; CenterOfMassComputationPtr_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, CenterOfMassComputationPtr_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; ConfigurationShooterBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, ConfigurationShooterBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; ConfigValidationBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, ConfigValidationBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; constraints::ImplicitPtr_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, constraints::ImplicitPtr_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; DistanceBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, DistanceBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; hpp::core::Parameter &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, hpp::core::Parameter &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; JointAndShapes_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, JointAndShapes_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; LockedJointPtr_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, LockedJointPtr_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; PathOptimizerBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, PathOptimizerBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; PathPlannerBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, PathPlannerBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; PathProjectorBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, PathProjectorBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; PathValidationBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, PathValidationBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; RobotBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, RobotBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; segments_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, segments_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; SteeringMethodBuilder_t &gt;</name>
    <filename>a00024.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, SteeringMethodBuilder_t &gt;</type>
      <name>Map_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a288983ec1a29bbbb2dd27cd765cfd25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b655f995958fdbb04c1d4200dc66a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::key_type</type>
      <name>key_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4b539033f9c17e1c34d28a8ddcb03a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6953f20841a1f5766f4bf0c02c9f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a348c094f10f5dfa47c780790f8c74efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map_t::iterator</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>acba687f74b1ce195e978027dc34bfa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a607cac03d1c7e74a534bc6b4d906626c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8035185d8abcda03d3b090423b4d3cea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38868a8295214ece89aff505eaaf72ba</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5c1516c6b97dcc39912ce07b86dea4bc</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc3ab710274903e842c1dd48275d3aea</anchor>
      <arglist>(const key_type &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const mapped_type &amp;</type>
      <name>get</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac31ca1a3ee560bee5a43291980be76b6</anchor>
      <arglist>(const key_type &amp;name, const mapped_type &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416da68ab290615ba25bbf59d04b95bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aca810226f2b631e61c5ab6debb56fa83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22d158e2b35b2f551eb7bfd1fd488bd4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>Map_t</type>
      <name>map</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa5c631722d94cd6feadb037167d751c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ContinuousValidation</name>
    <filename>a00025.html</filename>
    <base>hpp::core::PathValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0e168243b4645e0730384878a3e21572</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1bffc8eb1df11fc814b20c37c30c65f3</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af5d4b4e984bcb29d2c0e1b640d4dac28</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a607166de5f06bc9382b455514f8b542f</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;relMotion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeInitializer</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a54579a051f4b7e3532bc83405c515908</anchor>
      <arglist>(continuousValidation::InitializerPtr_t initializer)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>tolerance</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a41618189e1277c4c104724900059fc78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContinuousValidation</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a57c989c005f3eed6ebcfe00718dfe590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>continuousValidation::BodyPairCollisions_t</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af85703481f7b2d5850c88b2e1319d1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContinuousValidation</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a58e1e7ea0f43e8089d90f2b144115ef0</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>validateConfiguration</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa11f72be395b9eb92fc3e4af5aae040c</anchor>
      <arglist>(BodyPairCollisions_t &amp;bodyPairCollisions, const Configuration_t &amp;config, const value_type &amp;t, interval_t &amp;interval, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a00ea8ef2d198b8205c2294390732895e</anchor>
      <arglist>(ContinuousValidationWkPtr_t weak)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setPath</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a85706b542d238a1bf57cb78279fa304a</anchor>
      <arglist>(BodyPairCollisions_t &amp;bodyPairCollisions, const PathPtr_t &amp;path, bool reverse)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af172d24bbce3b95e1f81377949054b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>tolerance_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa78d97ac5dd8fd284050169d95bf6922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BodyPairCollisions_t</type>
      <name>bodyPairCollisions_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5d6b629045348f9df84c5d9e391a1262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BodyPairCollisions_t</type>
      <name>disabledBodyPairCollisions_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ade735a6133d60dbb23e527ec2b21121b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pinocchio::Pool&lt; BodyPairCollisions_t &gt;</type>
      <name>bodyPairCollisionPool_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4a72435639a6202e6d6644d374f344a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>stepSize_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acc34cded7a6abdf37d1cb7fd01fd1ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>continuousValidation::InitializerPtr_t</type>
      <name>initializer_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ade793bffc3702e3d3bcaa4ac34ef6be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>continuousValidation::Initializer</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ab14d1b98fcf8d50575cf271670a1c04a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::Cost</name>
    <filename>a00026.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hessian</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af1ec1ca2b3f65e8164517c38beae9fd6</anchor>
      <arglist>(matrixOut_t hessian) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cost</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a2afb70fd2c71d8a1d389a04d8df9b1fa</anchor>
      <arglist>(size_type inputSize, size_type inputDerivativeSize, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousValidation::Dichotomy</name>
    <filename>a00027.html</filename>
    <base>hpp::core::ContinuousValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dichotomy</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gae37786e33010961a02753d8a4429abcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga1e1cbbaf63b2578d9b478256b84b5fda</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dichotomy</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gad606aaf62cbf056e9fb44d698dd09a88</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gaff093eacd98246cf36b55fce0973bc8d</anchor>
      <arglist>(const DichotomyWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::Dichotomy</name>
    <filename>a00028.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::StraightPath</type>
      <name>StraightPath</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a03adf80c6fa9a75e098509efba7966ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::StraightPathPtr_t</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a9394c63b5e66a9fc9d54ce690a27cad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a0a5a6041fe99ef5a6404c44ece892f88</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type maxPathLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a17ade9f4157118ebbbac80d037433f81</anchor>
      <arglist>(const Problem &amp;problem, value_type maxPathLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a4820c4f7207c0983d7665f2cb8526924</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dichotomy</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a1ea1ce232faea905d919f81f222411ce</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type maxPathLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>applyToStraightPath</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a1a4e469465fbc63a574c4ebed001c865</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DiffusingPlanner</name>
    <filename>a00029.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a791f8399fc5697b3111fed6c0e915a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aad70741d89a7e861908ee6281f36d3b0</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;shooter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiffusingPlannerPtr_t</type>
      <name>createWithRoadmap</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a17d816e65b09034a785b32c659c74049</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiffusingPlannerPtr_t</type>
      <name>create</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a03253becd83250a7fd2fac6fed3867a5</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiffusingPlanner</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af630f760834c5cab89dad400535d2877</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiffusingPlanner</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a204aeb9ef68f3e15d388062194f13729</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a20ee83b94302a13fa4fa82bd80fb6fc5</anchor>
      <arglist>(const DiffusingPlannerWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extend</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6f686d488eedcb59a09fb52190cf530d</anchor>
      <arglist>(const NodePtr_t &amp;near, const Configuration_t &amp;target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathValidation::Discretized</name>
    <filename>a00030.html</filename>
    <base>hpp::core::PathValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>adbc01a153952f0ac6db8e4fe13a3ae1d</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a7016e613fb94009df487d1107f87a6c6</anchor>
      <arglist>(const ConfigValidationPtr_t &amp;configValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a664e7f66435714906db2827b362a4a9f</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a6e1cb0e4d909d21c1741da9cbf60e57e</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a5720877b5cb31c4fbe479c79fe0896d9</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Discretized</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a970e6db1d9435ab82e1cdaa7fd864833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiscretizedPtr_t</type>
      <name>create</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a8b56cefac12a21f8c7ce26b2100e7bab</anchor>
      <arglist>(const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Discretized</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a7adcf3735f2887f5fc75f223fe143f76</anchor>
      <arglist>(const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>stepSize_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ac68824878c3348d877f8eab2ff63336b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Distance</name>
    <filename>a00031.html</filename>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a3c75dcf2c7e82c43c46d09bf834ed9fa</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>acb40f8d9ed47fcaa3cd5b72868b17153</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>compute</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ac66f42a527b868c5ece66104e132adde</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>compute</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>acd79e14ee0554f53344ad63d60259144</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DistancePtr_t</type>
      <name>clone</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a2f1e693bb0fbd06776ffffb002700972</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Distance</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a35921476d6af679e3265003fc554fb88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Distance</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a56a0a2c7c1873c23e52e3132fb6dd01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>afb950be0fa0e23bd7435370bf187bc72</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a10748dc598cf771bb1e9da4854bf586e</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DistanceBetweenObjects</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceBetweenObjects</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac1dd944826adb10b280bc7c88b75577d</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObstacle</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae9a0a23fe5347673c19c80c16d9276c5</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>obstacles</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a20b7c6cdee0490611c67424f2a08d1c8</anchor>
      <arglist>(const ObjectStdVector_t &amp;obstacles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDistances</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3d0b688c142887836e4dfcd2a4a8cdd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CollisionPairs_t &amp;</type>
      <name>collisionPairs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a51358721a883bc651350e2957add439d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DistanceResults_t &amp;</type>
      <name>distanceResults</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a772a864c70888ba7d0679b73f7e34d2b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Dubins</name>
    <filename>a00033.html</filename>
    <base>hpp::core::steeringMethod::CarLike</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aa700c71deb88cee197cab30cf667c239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a9c19c237276d99cdfdd1b75bb96dfa1f</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPtr_t</type>
      <name>createWithGuess</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a45b4f92c28f2bb5e8237a15a2183c1ff</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPtr_t</type>
      <name>create</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4552465dfc9d82fab357fe5584f4b930</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels=std::vector&lt; JointPtr_t &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae3e089b237570120ee6f6b1a50f4b1e0</anchor>
      <arglist>(const DubinsPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dubins</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a85920fef1060db1a4194de84ac79a023</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dubins</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a299a030e6c1e750e77fa0a23d853562d</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dubins</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a79774312474c2131059d3455e5fa26dc</anchor>
      <arglist>(const Dubins &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a54a8b540d52cdaa9c342a3396a390ef6</anchor>
      <arglist>(DubinsWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DubinsPath</name>
    <filename>a00034.html</filename>
    <base>hpp::core::PathVector</base>
    <member kind="typedef">
      <type>core::PathVector</type>
      <name>parent_t</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a5acd21e74e4d1c9382e4f0de34fef813</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DubinsPath</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a132552902d0f1f2ad76229d67db2d5e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9f3e78dadff5dc45d0dc57120db96798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a8d4666c2266562aa56b62076d780eb25</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a566cc4baab0de35385ca07b2b7c1864e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a56d96f38d76af964b943e0b0eadad24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>adac72261dd870c24edf9060534c89b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>af2d7c8e051d438800b78cba6ad60dcf9</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a7d62b3580f865107187005b743d62fa8</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a7e615f6207609d17bda9f98007b8d604</anchor>
      <arglist>(const DubinsPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DubinsPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ac70e4b44ab7e5536b298d7f0d98e51a8</anchor>
      <arglist>(const DubinsPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a8ea06651943e08b332e0687cfd8dc066</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DubinsPath</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1a44cba931f2a123263c75060ab00b51</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DubinsPath</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aa880cda9aa1d231abf1009a63bd38d70</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DubinsPath</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1d2b266fee48fabc720e1d75e38a0cfe</anchor>
      <arglist>(const DubinsPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DubinsPath</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ad19aef9cf7d7931e3e7717215a3ad998</anchor>
      <arglist>(const DubinsPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a0b043b04033cc1d3db601a3cc17b4bb1</anchor>
      <arglist>(DubinsPathPtr_t self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Edge</name>
    <filename>a00035.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5a267e059a12f5d614858f6455f7706b</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>from</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a75b0bb2121466b1d3b54225b9706cf2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>to</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a537d8df73d6e5493407f1caf071661db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>path</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab50d91fc93b307762867b1e4b8bb9c7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::configurationShooter::Gaussian</name>
    <filename>a00036.html</filename>
    <base>hpp::core::ConfigurationShooter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shoot</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a77ace3f186cd6126dc27c65ca110d2bd</anchor>
      <arglist>(Configuration_t &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>center</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a265c8d7ad3c279ed452ba99bf7bb4cc2</anchor>
      <arglist>(ConfigurationIn_t c)</arglist>
    </member>
    <member kind="function">
      <type>const Configuration_t &amp;</type>
      <name>center</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aac2cf1b3561a13374471ec92d8fb6677</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sigma</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a8c64ec3b963d18fb1ddff43d06ab1536</anchor>
      <arglist>(const value_type &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sigmas</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a9f61133e95a4b2093e0622f086086d95</anchor>
      <arglist>(vectorIn_t s)</arglist>
    </member>
    <member kind="function">
      <type>const vector_t &amp;</type>
      <name>sigmas</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ae239cf5a6113c229fbf11b50eff20dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianPtr_t</type>
      <name>create</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a6d76398206188c618f857147b1deddda</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a4e4c19adfa5b15d8217230ed95263ad0</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a953bbc1fecd5522863c1fa207f908f3b</anchor>
      <arglist>(const GaussianPtr_t &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::Global</name>
    <filename>a00037.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::StraightPath</type>
      <name>StraightPath</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a92e8d266d5335f1c6cae07b6a882a0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::StraightPathPtr_t</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad746fae9de974ebd50c78cec7347f985</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalPtr_t</type>
      <name>create</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a90e020c8368941cb642cb68c9b20db5d</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalPtr_t</type>
      <name>create</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1dae49c311b707780123c05db4db7eee</anchor>
      <arglist>(const Problem &amp;problem, const value_type &amp;step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a2a4c82ea4af5b828c012731597b85b60</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Global</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ab8c9f5f3d7be0d2b69fdc2093cb18172</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step, value_type threshold, value_type hessianBound)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::problemTarget::GoalConfigurations</name>
    <filename>a00038.html</filename>
    <base>hpp::core::ProblemTarget</base>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a9f928b15ed851f159f8b4fa6b3112983</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a61bb08081108c04d6214afaafa8f5a32</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const </arglist>
    </member>
    <member kind="function">
      <type>PathVectorPtr_t</type>
      <name>computePath</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a798a3a96b2baf82e916ccfa0f2eaf427</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GoalConfigurationsPtr_t</type>
      <name>create</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>af4ca0750364433e67aa249a152147c6a</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GoalConfigurations</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a6d5e450a1d8d4b7fa4451a25380576ac</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::GradientBased</name>
    <filename>a00039.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga333c9ed253e1901223f3ab95ce2bc970</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GradientBasedPtr_t</type>
      <name>create</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3395c68307cad504abcf8cac8ea725fa</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientBased</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga53fdf87420e173ddc6ddee85a4f2eaf9</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::path::Hermite</name>
    <filename>a00040.html</filename>
    <base>Spline&lt; BernsteinBasis, 3 &gt;</base>
    <member kind="typedef">
      <type>Spline&lt; BernsteinBasis, 3 &gt;</type>
      <name>parent_t</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>abab3e073972422bc8d27fef03ce712cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Hermite</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aa553677c24146eabb48bde69534fe979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>abfa8dcd9573e9b3c5542bb3a94f93c80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afe1ea1935aa99c4f3ecef94145e3498d</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a8b30a061cbad15ddc91a4df9fadb7d48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>v0</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>af4ec18d89ed110b8eac13ed4d3f16b80</anchor>
      <arglist>(const vectorIn_t &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>v1</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a3ba8484528a96012045714b1ee015f0a</anchor>
      <arglist>(const vectorIn_t &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>v0</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ab2837e87b55d4cb09a03438bfc3abad5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>v1</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a5a8713f5db5f3f7d759a48b8b1633dc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afe406c2c5f702826830f176bd64bf323</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ac09d55eccffc63f5c020e9c3373280ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>hermiteLength</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a60c1a0d17dc4cd84ccc2e2552bfdf658</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeHermiteLength</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a222e7d57d4a44fb9fa1f2bd140fbc0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>velocity</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae05b0a8a0f35dd1be44f726444c82d1e</anchor>
      <arglist>(const value_type &amp;t) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HermitePtr_t</type>
      <name>create</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a639265541c5f138cea37c88d8ac0b278</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HermitePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a840287d7ebe63cf3211687c519867fe3</anchor>
      <arglist>(const HermitePtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HermitePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a550f90431871dd21991c7b486e685e4b</anchor>
      <arglist>(const HermitePtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a18a269b46b4866d1f8264cc389d4670d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Hermite</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a0e2353ff14bd1d3a1b30de705680c987</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Hermite</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>af58560522fb8c783c8c893412fba76b1</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Hermite</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afb621d5390c6030b369c622ef22af88e</anchor>
      <arglist>(const Hermite &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Hermite</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7d0999fb8df00915f29c186cad647746</anchor>
      <arglist>(const Hermite &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a15955cb433f2965a8e2f367b0522e909</anchor>
      <arglist>(HermitePtr_t self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Hermite</name>
    <filename>a00041.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aff15e0bf6542d0cfb924c20dc2eb2378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a4409e8ac9107d433e5e9fccea8b3bfcc</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HermitePtr_t</type>
      <name>create</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa2c0e0bb5bf31a54f6214d8eb6230e76</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HermitePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a3719d116a0782c9074a205ea7160cbe5</anchor>
      <arglist>(const HermitePtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Hermite</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a01de78bfcc366d8494718b162deebf2f</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Hermite</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a632f978cc81c0f5c60e06289a5dae558</anchor>
      <arglist>(const Hermite &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a3af0f64ec9e33c8a9fa0d4a518ab28b9</anchor>
      <arglist>(HermiteWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousValidation::Initializer</name>
    <filename>a00042.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initContinuousValidation</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ae3448f86960b9efa0808c0a791d411b0</anchor>
      <arglist>(ContinuousValidationWkPtr_t continuousVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6257dd9e9abfc47640cc93948e3d2db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac56cdf61270dd71f533215808f43d271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InitializerPtr_t</type>
      <name>create</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>adcc323ba08c7519e471d52f62bab5ce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateAutoCollisions</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6b4cad5239f657c034afe33d68b13c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Initializer</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>afa4e7d5f996f33de31ea00b0fd17f093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>defaultInitialize</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac479a9e599525c78cf8c60f8eee0a155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>defaultReset</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a2ee4281b3ea0574f1ada77dd30046cac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContinuousValidationWkPtr_t</type>
      <name>continuousVal_</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab5d658c512ff2acdb66ce67d6bf42469</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Interpolated</name>
    <filename>a00043.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a1f6e65d86a95d8cf7590384baaa7a7f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aacbd6a2640d97ad1f7d111c3e7ec879c</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPtr_t</type>
      <name>create</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>af12f299917083020dc89030de1b001d0</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPtr_t</type>
      <name>create</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a883dc872b83dfab8fb1889919db0ebd9</anchor>
      <arglist>(const DevicePtr_t &amp;device, const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ab2a38cc80e6ffcf9d188e0e93710feaf</anchor>
      <arglist>(const InterpolatedPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ab72747cb4228a6f293397073ea74d31a</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a9df24b8b3c1ab5b6d436221e76f590f9</anchor>
      <arglist>(const DevicePtr_t &amp;device, const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a0a72116bad671a84c7c78945dffc0084</anchor>
      <arglist>(const Interpolated &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a01a79dfa2852960d5eefc2e66e561d78</anchor>
      <arglist>(InterpolatedWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::InterpolatedPath</name>
    <filename>a00044.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>std::pair&lt; value_type, Configuration_t &gt;</type>
      <name>InterpolationPoint_t</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a47b71403400f83fef12e5f29283b7bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; value_type, Configuration_t, std::less&lt; value_type &gt;, Eigen::aligned_allocator&lt; InterpolationPoint_t &gt; &gt;</type>
      <name>InterpolationPoints_t</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5d0ac2e9734c6a5340e9ff185eea5215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aaef91811efba37e7d1f078f8320d7bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatedPath</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a4d148afcfcbfb278c73b717544e62501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af68224281cf8d23a477718a18c2ce724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac1092a4dc260d196eb3e7b4684a0fd82</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>reverse</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3b0c5ab6290388c28ed484d6404c292a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>abca244452bb7502b5265bad98ca87064</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a4a0b268a03705ecad57c0fa582d871a6</anchor>
      <arglist>(const value_type &amp;time, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a181482dd6afecc106945789a7c704402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa6dc3b958f69b4abf1e63c3b4153e555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InterpolationPoints_t &amp;</type>
      <name>interpolationPoints</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6331d06586685bf3e40230e13d34709d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a02f74cda18f54c7d59ec9b987618517c</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acc751fe7054cd2f0efaaed380152018e</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7cf1e09f2ae20e228b385972a59b0e8b</anchor>
      <arglist>(const InterpolatedPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a4c39ba2a15c161121737326cf9adc597</anchor>
      <arglist>(const PathPtr_t &amp;path, const DevicePtr_t &amp;device, const std::size_t &amp;nbSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a21b2623d03b4be5fb30f24636cfdcc69</anchor>
      <arglist>(const InterpolatedPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae52b1694c5ed7acf7fd90f1be8cb18f8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1987d0c859ee8a6fee4787ba59fa6f58</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a332f15ab5735c464c846e31e9e2e4efb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3f4e8232168804cfe3ac8f78222a4b08</anchor>
      <arglist>(const PathPtr_t &amp;path, const DevicePtr_t &amp;device, const std::size_t &amp;nbSamples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7dff12acac29453366ea7fdce3481523</anchor>
      <arglist>(const InterpolatedPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2a4eda1b73ed6adaf7a0aecac3f27e1b</anchor>
      <arglist>(const InterpolatedPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab9de2705f1eb9ac1cb4f6fc12a1d2467</anchor>
      <arglist>(InterpolatedPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCopy</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a199e8b4cbe3d541b5bc2c58a4a21aebc</anchor>
      <arglist>(InterpolatedPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab92e65d03750a4c02263a94138add2d1</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_derivative</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9c0ab279f5acdda332e9e80aae404a03</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t, size_type order) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_velocityBound</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a73ea953198dff56f98c35e149e77d902</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t0, const value_type &amp;t1) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a07769bb415e896f6d946b4b751f285de</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousValidation::IntervalValidation</name>
    <filename>a00045.html</filename>
    <templarg>ValidationReportTypePtr_t</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validateConfiguration</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a2ac79dace9f9de8d1ffbeb4a64b73712</anchor>
      <arglist>(const value_type &amp;t, interval_t &amp;interval, ValidationReportTypePtr_t &amp;report, pinocchio::DeviceData &amp;data)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a42ec4c6770391afd3b37f3866c86d8ec</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse)</arglist>
    </member>
    <member kind="function">
      <type>PathConstPtr_t</type>
      <name>path</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a04aa4f97e89b9cc843dd621780bd13e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>tolerance</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a85fce9c854330621637d0a9c5e8d386e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3bc906f28c594486fae5e72f0fa456c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a13499e0ec2bcb0f478aff5edbf55d463</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::icl::continuous_interval&lt; value_type &gt;</type>
      <name>continuous_interval</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>aee1e3d4211e937dc1761b4280aeb5fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::icl::interval_set&lt; value_type &gt;</type>
      <name>interval_set</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a7e71779c56c680a03d85b9e209a52b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntervalValidation</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a906a075a09c87327584cfe287fc7c3c4</anchor>
      <arglist>(value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntervalValidation</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ac5e3611f2d2fbb00356d7c144c8e05ab</anchor>
      <arglist>(const IntervalValidation &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathPtr_t</type>
      <name>path_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ad5308057458f5639e85565875e9242eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>tolerance_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae570d66b52ab22f173c2c1ccd7213166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reverse_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3eeadad7173e3a71fe07fd0c994f3ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>refine_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>abdf26b95df72ee232b414437f586f247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>valid_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ada1789ee9bd2ae382900c6a28352d3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interval_set</type>
      <name>validInterval_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab519ec32bd58eb99b2f391e44788e340</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntervalValidation&lt; CollisionValidationReportPtr_t &gt;</name>
    <filename>a00045.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validateConfiguration</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a2ac79dace9f9de8d1ffbeb4a64b73712</anchor>
      <arglist>(const value_type &amp;t, interval_t &amp;interval, CollisionValidationReportPtr_t &amp;report, pinocchio::DeviceData &amp;data)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a42ec4c6770391afd3b37f3866c86d8ec</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse)</arglist>
    </member>
    <member kind="function">
      <type>PathConstPtr_t</type>
      <name>path</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a04aa4f97e89b9cc843dd621780bd13e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>tolerance</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a85fce9c854330621637d0a9c5e8d386e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3bc906f28c594486fae5e72f0fa456c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a13499e0ec2bcb0f478aff5edbf55d463</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::icl::continuous_interval&lt; value_type &gt;</type>
      <name>continuous_interval</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>aee1e3d4211e937dc1761b4280aeb5fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::icl::interval_set&lt; value_type &gt;</type>
      <name>interval_set</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a7e71779c56c680a03d85b9e209a52b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntervalValidation</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a906a075a09c87327584cfe287fc7c3c4</anchor>
      <arglist>(value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntervalValidation</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ac5e3611f2d2fbb00356d7c144c8e05ab</anchor>
      <arglist>(const IntervalValidation &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathPtr_t</type>
      <name>path_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ad5308057458f5639e85565875e9242eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>tolerance_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae570d66b52ab22f173c2c1ccd7213166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reverse_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3eeadad7173e3a71fe07fd0c994f3ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>refine_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>abdf26b95df72ee232b414437f586f247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>valid_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ada1789ee9bd2ae382900c6a28352d3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interval_set</type>
      <name>validInterval_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab519ec32bd58eb99b2f391e44788e340</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::JointBoundValidation</name>
    <filename>a00046.html</filename>
    <base>hpp::core::ConfigValidation</base>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a9b1bfdb1b4e4811b6b14bcd239f2cd42</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JointBoundValidationPtr_t</type>
      <name>create</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ae694cec562d8f06573293abb5a57a3aa</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointBoundValidation</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a7da76950b3ebb8cd5b0515b9bc6cb281</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::JointBoundValidationReport</name>
    <filename>a00047.html</filename>
    <base>hpp::core::ValidationReport</base>
    <member kind="function">
      <type></type>
      <name>JointBoundValidationReport</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a85db236473065dd720054d4bdfbff972</anchor>
      <arglist>(const JointConstPtr_t &amp;joint, size_type rank, value_type lowerBound, value_type upperBound, value_type value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a6d86ba6d54f8ed55aacb0709fa9a0e57</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>JointConstPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a02c549ee4a465b67c3db2c2c4a2a947d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>rank_</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8a0873f04f072108807ad8d5880e18b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>lowerBound_</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8f7c746951e69f353b6b60e85ebed067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>upperBound_</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ae7cc9c8e8a81ecf9839cc5d99acfe770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aed425da6d68c393d97f79ee7189f3ff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Kinodynamic</name>
    <filename>a00048.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aba1b41da4106dd60257125cf9d98094d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>afbe59dc28998e0381f2faab1734d0d84</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeMinTime</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0a3f7f102c996837c138f0d0cec823dd</anchor>
      <arglist>(int index, double p1, double p2, double v1, double v2, interval_t *infInterval) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixedTimeTrajectory</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a37b061b51e889eccc4b96d7f649845a7</anchor>
      <arglist>(int index, double T, double p1, double p2, double v1, double v2, double *a1, double *t0, double *t1, double *tv, double *t2, double *vLim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmax</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a692f4057620d1048ec5af7f5818bcd21</anchor>
      <arglist>(Vector3 aMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVmax</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6ee9c43f84092b78dbcfbf1d887a8244</anchor>
      <arglist>(Vector3 vMax)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicPtr_t</type>
      <name>create</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a731d1d9fd83dc8317764c6de91e97837</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa71cc20f396ac7aa67d7cbe557ff8e5b</anchor>
      <arglist>(const KinodynamicPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Kinodynamic</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3a9f8783cb2abbf4e49961af0e3c00ce</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Kinodynamic</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a392f0bba0c40462079d795c3c74ee05c</anchor>
      <arglist>(const Kinodynamic &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aba07ab92f1b82ae25ac7887908bb21e3</anchor>
      <arglist>(KinodynamicWkPtr_t weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>aMax_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a73d6d59429ab4163735094e33ceb3f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>vMax_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae390d2e9cf65c201392e342295d0154b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>aMaxFixed_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a397a1957669e983bdc9b54704cef5e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>aMaxFixed_Z_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6deac8aa6c45c4ccc34015a2a930c00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>synchronizeVerticalAxis_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a9f7f8a1b2a1d6e5a60a32f00e14e15c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>orientedPath_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a84df85947190599c757e5cc85ea23e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>orientationIgnoreZValue_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa78152001e3957499adca187ee41019d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::KinodynamicDistance</name>
    <filename>a00049.html</filename>
    <base>hpp::core::Distance</base>
    <member kind="function" virtualness="virtual">
      <type>virtual DistancePtr_t</type>
      <name>clone</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a7d5d34264cc13184939de4356220c7e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aab76008ceea33cadcadf613a587829bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicDistancePtr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a3d07c3f3d76f7ba09142bae209b5ddd6</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicDistancePtr_t</type>
      <name>createFromProblem</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aff81f4da3609c32b5210fa5901bedcee</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicDistancePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a5b172963e046f933897112996ba0738d</anchor>
      <arglist>(const KinodynamicDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicDistance</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad37e48d3c624629b1dcd4d485afb8a32</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicDistance</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1b6da97fdb0f56b640668b6d808d8e8b</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicDistance</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>afad8d599fc874f82cbb0d45b95fcdffd</anchor>
      <arglist>(const KinodynamicDistance &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a40707dc5f2978d10c624d2b90df7ac4d</anchor>
      <arglist>(KinodynamicDistanceWkPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a355918ac2ac84ec6d747635a0f3a7c68</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeMinTime</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aa8223fdfc69937a4ed3aff5fe965fbf1</anchor>
      <arglist>(double p1, double p2, double v1, double v2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::KinodynamicOrientedPath</name>
    <filename>a00050.html</filename>
    <base>hpp::core::KinodynamicPath</base>
    <member kind="typedef">
      <type>KinodynamicPath</type>
      <name>parent_t</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a569b6db47c9221e8aa710320b8ab9e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinodynamicOrientedPath</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa7b4976fd568d9078d34f22930434ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a2be691abe9ef71dd176a794e24188534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab287d43a0b93062439e2209ea2c22e93</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ignoreZValue</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a452fe9ee4d140ebdaf6687eaa97261a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreZValue</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a27e4b590b4547c681bfcc5805ae8a014</anchor>
      <arglist>(bool ignoreZValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicOrientedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8a9d06869ac4e11f00b0db32d9de7a94</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim, bool ignoreZValue=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicOrientedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad908e1d24448b4e3e342fb05a9470ad9</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim, ConstraintSetPtr_t constraints, bool ignoreZValue=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicOrientedPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac63d2b0de784c75a6eba61ac2668651d</anchor>
      <arglist>(const KinodynamicOrientedPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicOrientedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad83b7b1c85eedcb5bbc988de7f184699</anchor>
      <arglist>(const KinodynamicPathPtr_t &amp;path, bool ignoreZValue=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicOrientedPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a0f3a30ce991cdb6c18e969164ffbbd7c</anchor>
      <arglist>(const KinodynamicOrientedPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab2d50a92844f4c7198ea148f9301ce74</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>orienteInitAndGoal</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa368860187ed44a9aaf85c0d8349c08b</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicOrientedPath</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a0e8dfc1f043f731cd4f9faad78af6be8</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim, bool ignoreZValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicOrientedPath</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a49cb055acb4147b269d3c4c0f87bb2a6</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim, ConstraintSetPtr_t constraints, bool ignoreZValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicOrientedPath</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>adf0199637154114097917a8c49e14bbc</anchor>
      <arglist>(const KinodynamicOrientedPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicOrientedPath</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad9e026583b574f89df7867a9b0986347</anchor>
      <arglist>(const KinodynamicPath &amp;path, bool ignoreZValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicOrientedPath</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a9da871910ba196ce4566e5bfac1dcdb5</anchor>
      <arglist>(const KinodynamicOrientedPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a95280114545ca49d757a6ad910dee2a4</anchor>
      <arglist>(KinodynamicOrientedPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ae5494979b74d2f9cdbc36379394e5504</anchor>
      <arglist>(ConfigurationOut_t result, value_type t) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ae9cafb15976041a30f30a10eaf02ccf3</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::KinodynamicPath</name>
    <filename>a00051.html</filename>
    <base>hpp::core::StraightPath</base>
    <member kind="typedef">
      <type>StraightPath</type>
      <name>parent_t</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>adbab90a3b2a464c9dd32332ba902a5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinodynamicPath</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab507903458e8252ad94426791aca5c6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a8a0ca9e40d2f8ba929a60deaf10f3d3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a7291a519ccce5ff7f8e2f16ce563302e</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ad16bc88db255e1483b02a706db9b6e1e</anchor>
      <arglist>(const interval_t &amp;paramInterval) const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>getT0</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aec9953e5e7cf8bf423ae48df1940680b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>getT1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ace4e9798a0577865550d54d06050a92e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>getT2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a2d6723714486345d38f4721da4369f5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>getTv</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ad1f4e5b490625360de5e4d59f6500792</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>getA1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a86d897e5df0825843b8b0b4d776e9d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5c5bbbd516afe089a4b774c9a17193a9</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a17a1478214f577d6f3922078048456e0</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a95feea38bef4e1d8fbc17f3872010080</anchor>
      <arglist>(const KinodynamicPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinodynamicPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>accf571d48099690ec39bc3534339499b</anchor>
      <arglist>(const KinodynamicPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a768bb18030d1d387e4309d761825b1bf</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicPath</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a848f55305704153b6f3acc20621ceda5</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicPath</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a70fdd056e5eafb77220fe719d53087cf</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConfigurationIn_t a1, ConfigurationIn_t t0, ConfigurationIn_t t1, ConfigurationIn_t tv, ConfigurationIn_t t2, ConfigurationIn_t vLim, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicPath</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a53aa840a9ab29795af901c1425dfa507</anchor>
      <arglist>(const KinodynamicPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>KinodynamicPath</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4ee5742d8349f1b6e3282e2ce0aedf17</anchor>
      <arglist>(const KinodynamicPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a237d3d23ba5d733cc9bfaa629a4f1695</anchor>
      <arglist>(KinodynamicPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a5d7b5c8fdf93200503dc14e176b38d56</anchor>
      <arglist>(ConfigurationOut_t result, value_type t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>sgnenum</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a297a3d441f591ea6410cdd785438036f</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>sgn</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a57574949689f2b534b03c8c876919084</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>sgnf</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a14d992beab7803f9353319995b90c3cb</anchor>
      <arglist>(double d) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathPlanner::kPrmStar</name>
    <filename>a00052.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="enumeration">
      <type></type>
      <name>STATE</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUILD_ROADMAP</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5da90f41b43131ab69a57d465fd2790cbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_NODES</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5daa0a91195739122721c209e212edaf106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECT_INIT_GOAL</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5da0f18001cd553c6548e871348eca9acfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILURE</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5dacbc579a88ffdca4ecfd7387039e86031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PathPlanner</type>
      <name>Parent_t</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a46d12065a3e19b1854a1215d626236f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUILD_ROADMAP</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5da90f41b43131ab69a57d465fd2790cbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINK_NODES</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5daa0a91195739122721c209e212edaf106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECT_INIT_GOAL</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5da0f18001cd553c6548e871348eca9acfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILURE</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af71547c9c4eee379a5309d022099ee5dacbc579a88ffdca4ecfd7387039e86031</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSolve</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af2dd83540b399302c39f6396e83c450f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a46e507e8f0df200095c9834701ad1c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>STATE</type>
      <name>getComputationState</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ae9b702e79331f95f049668cff066cd1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static kPrmStarPtr_t</type>
      <name>create</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af9159b91b831e446b1ba065558ec214d</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static kPrmStarPtr_t</type>
      <name>createWithRoadmap</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab5c091a789ea573172defe1d7d6f2b70</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>kPRM</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7cc87e7dcda27f6f1461ad36efe480d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>kPrmStar</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1ac508716bc3019fac4c76262a27a58e</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>kPrmStar</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a541ea2f36b9fc0c34717e1ab5a12259a</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a6cc7dcf639fc0e3960d7f3ebd05b8808</anchor>
      <arglist>(const kPrmStarWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::LinearConstraint</name>
    <filename>a00053.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearConstraint</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a2e86ec7a4a63c12d8c9ff1617fa1a2f1</anchor>
      <arglist>(size_type inputSize, size_type outputSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearConstraint</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad7c0f8363d3058cdfe9b2a503980db80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concatenate</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a98d5958f64abbd951f163e2fb0aa9dab</anchor>
      <arglist>(const LinearConstraint &amp;oc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decompose</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8cd4883d13acc8d57d90b32a1cf6f76e</anchor>
      <arglist>(bool check=false, bool throwIfNotValid=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRank</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3af2602c7c6d242391a8a449683bd00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceConstraint</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab98ecab4864e4e73bf3401e87e142b1a</anchor>
      <arglist>(const LinearConstraint &amp;lc, LinearConstraint &amp;lcr, bool computeRank=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSolution</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aff7bcbfc3ed0b99152122453895a6c9f</anchor>
      <arglist>(const vector_t &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad1d945484b3b22fa4095ce825c46317d</anchor>
      <arglist>(const vector_t &amp;x, const value_type &amp;threshold=Eigen::NumTraits&lt; value_type &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRows</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae14ddc816bfc54650dce9a50a7b13527</anchor>
      <arglist>(const std::size_t &amp;nbRows)</arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>J</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a67abc646fae530b0b337358bc0a7856c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>b</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a31f3dab2a12a2ae9afdf093cba07c3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>rank</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8b4cce0235cac6c9bd8e26cdf78154e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>PK</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6c8b0aadaed933e1d608dabcffad6bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xStar</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a748d6406ec9d2b9d9d5f876321c2d2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xSol</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a53c53f6a8f00a089afd055342d83f73a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>J</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a67abc646fae530b0b337358bc0a7856c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>b</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a31f3dab2a12a2ae9afdf093cba07c3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>rank</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a8b4cce0235cac6c9bd8e26cdf78154e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>PK</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6c8b0aadaed933e1d608dabcffad6bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xStar</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a748d6406ec9d2b9d9d5f876321c2d2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xSol</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a53c53f6a8f00a089afd055342d83f73a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::NearestNeighbor</name>
    <filename>a00054.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa193b570951cbe30f2bab37f04b54c3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addNode</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a70e5483ce16492c16d51090b4422e954</anchor>
      <arglist>(const NodePtr_t &amp;node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NodePtr_t</type>
      <name>search</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa822a0582280bc99f3fbaeef70e5b7bc</anchor>
      <arglist>(const Configuration_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;distance, bool reverse=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NodePtr_t</type>
      <name>search</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a329e15aefc77e0ad80b858fd81c04a27</anchor>
      <arglist>(const NodePtr_t &amp;node, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Nodes_t</type>
      <name>KnearestSearch</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af1b8c04cc889bda96ce8644bdfc77c21</anchor>
      <arglist>(const Configuration_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, const std::size_t K, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Nodes_t</type>
      <name>KnearestSearch</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ae9660326278416bb3cb081b73795db7e</anchor>
      <arglist>(const NodePtr_t &amp;node, const ConnectedComponentPtr_t &amp;connectedComponent, const std::size_t K, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Nodes_t</type>
      <name>KnearestSearch</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a3430309677baf54ae0640d2984053368</anchor>
      <arglist>(const Configuration_t &amp;configuration, const RoadmapPtr_t &amp;roadmap, const std::size_t K, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a5f5e6f4d53aa6bdb5e35af48b3d3e0c2</anchor>
      <arglist>(ConnectedComponentPtr_t cc1, ConnectedComponentPtr_t cc2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DistancePtr_t</type>
      <name>distance</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a9d3272ad9c664ea3ffbc1d8e48c9c2f5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighbor</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a6490bad9daf403c36d0c87aae6877bbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Node</name>
    <filename>a00055.html</filename>
    <member kind="typedef">
      <type>std::list&lt; EdgePtr_t &gt;</type>
      <name>Edges_t</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a74c65456f9d57e36c035c96fbe4ce063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a1d90b9dde9df4703255dbbd89e352eec</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae74cbbfb862aec394420cf8d949e3859</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, ConnectedComponentPtr_t connectedComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOutEdge</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a6fd511c2789e92a17e65e742dd2e3095</anchor>
      <arglist>(EdgePtr_t edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInEdge</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a3004c16946fdc3f77f0a31343709381b</anchor>
      <arglist>(EdgePtr_t edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectedComponent</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa2e71f412975ae33209ec0c49e9b9954</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>ConnectedComponentPtr_t</type>
      <name>connectedComponent</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a6b8707eb8f1492a925ffbfd0a37737cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges_t &amp;</type>
      <name>outEdges</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa31da8eb583fc227adf7f01e661e1206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges_t &amp;</type>
      <name>inEdges</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a3eedf5267fc11f232072aa45d9cc2189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutNeighbor</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a9217584e43f81178546fdb10e389f301</anchor>
      <arglist>(const NodePtr_t &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInNeighbor</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a2b40445652ac10f12c5d70d3a9a11687</anchor>
      <arglist>(const NodePtr_t &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>ConfigurationPtr_t</type>
      <name>configuration</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae02456293889a1ca42cde3143eeb0eb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a4004fdb5baa2a3e03d0fc497243ef2d2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Node</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a9993d0ce6f4ddcba112cf9b4b938ce88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::NumTraits&lt; hpp::core::RelativeMotion::RelativeMotionType &gt;</name>
    <filename>a00056.html</filename>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::ConfigOptimization::Optimizer</name>
    <filename>a00057.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>optimize</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7a6a6454475a94480db3752aa242d151</anchor>
      <arglist>(ConfigurationOut_t q, const std::size_t numIter) const </arglist>
    </member>
    <member kind="variable">
      <type>ConfigProjectorPtr_t</type>
      <name>proj</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ac1641307adfabc8edb5a62a80672efac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Parameter</name>
    <filename>a00058.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a9d2c9a0dd6d5377a86610311c092eade</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a9d2dd420a72fd42b37e9d4f494214ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772af8a3336336cd17606f840f5ac3f72037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOAT</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772aca9bd7906ae00f6dbc8eb110a6a300ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a22add990f7ee7c290d5781cb6031f7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VECTOR</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a6611a0529f247313c632cb2b5deee0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATRIX</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772aed3f534e4e3d92f1f8ad6d441fce2da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NB_TYPES</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772aeb6c2a315aa7943a531785c4f0f11cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a9d2c9a0dd6d5377a86610311c092eade</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a9d2dd420a72fd42b37e9d4f494214ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772af8a3336336cd17606f840f5ac3f72037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOAT</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772aca9bd7906ae00f6dbc8eb110a6a300ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a22add990f7ee7c290d5781cb6031f7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VECTOR</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772a6611a0529f247313c632cb2b5deee0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATRIX</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772aed3f534e4e3d92f1f8ad6d441fce2da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NB_TYPES</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a22897bb23da039f638c0ab12468bb772aeb6c2a315aa7943a531785c4f0f11cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aad0106ca7d31cbebc524eaa404e7937e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af9f65eeb7b001b7cee67658931d9207f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab0caa8478214f540a78bddf4e84e9b1a</anchor>
      <arglist>(const bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ac6a8a1d01311d3b14bc7d9498f46dce6</anchor>
      <arglist>(const size_type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a0b4ada44563cc210cac3bfe45bf244de</anchor>
      <arglist>(const value_type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa476ddda6276b13bac99e1c782f34027</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>acb997ec6eb977873f7c041f467b65907</anchor>
      <arglist>(const vector_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9042e415bf025c09b7909822bc56ecdc</anchor>
      <arglist>(const matrix_t &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aad209a88049a4439dd7d961f92a9e8ce</anchor>
      <arglist>(const Parameter &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a172291b4a920c9af9292617c40c12855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Parameter</type>
      <name>operator=</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a48b6ac857e94cb109fd7c6fffb9dc431</anchor>
      <arglist>(const Parameter &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a0940ae75d234347b8a35e99dc60cf282</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab4644526919b18dab9ec884f3a32d40c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>intValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>afe3bba7eabb5a162b82110267285b887</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>floatValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a95e6a24c75cd34e23400f5a70ec317b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stringValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a3456be94a8f4cffdc55783cbb5730e1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>vectorValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a551fb2dc62c8ef24aa64485286a644a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix_t</type>
      <name>matrixValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af6a891d9c7b8c61ea4f3cebcf46aee21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>typeName</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa44de89db50ba88a8cd86b3e584a112e</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>type_</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a996dc5e2d4cb2ccce314ee95ce214b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *const</type>
      <name>value_</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>afa48587d88dbdae6c1daa863cf016678</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>HPP_CORE_DLLAPI friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa24bb8b611f5d88cccb3e6d1195a5775</anchor>
      <arglist>(std::ostream &amp;os, const Parameter &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ParameterDescription</name>
    <filename>a00059.html</filename>
    <member kind="function">
      <type></type>
      <name>ParameterDescription</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a44e9a7e3902f9f3744e4ae91b3aec24e</anchor>
      <arglist>(Parameter::Type type, std::string name, std::string doc=&quot;&quot;, Parameter defaultValue=Parameter())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterDescription</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a7f463f19fbc7a6248f934a697991d2a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a21020fa9c4f727bd52dab006e720921d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Parameter::Type &amp;</type>
      <name>type</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a9274f650968a5173dd70964f035f12d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>doc</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4719085521c1d018f0e714bb95731fc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>defaultValue</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a84f44150de251ccdda91a0ae9dba4253</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::ConfigOptimization::Parameters</name>
    <filename>a00060.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a64e907f6231a4030dabad6a48a70c744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addConfigConstraintToPath</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a55f528a7a9541b189707892cbe18f625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numberOfPass</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>afb32dd134b598e4c80c2af2d48dbe096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numberOfIterations</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a6e16493a982e79997425c2acb8806b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>alphaInit</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a9ffe7d53309d3810d20ea6c58fdf9036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; Configuration_t(const PathVector &amp;)&gt;</type>
      <name>getGoal</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a90ad13bdca35d20fb4274f7f47dbb9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; ConfigProjectorPtr_t(const PathPtr_t &amp;, const PathPtr_t &amp;, bool &amp;) &gt;</type>
      <name>getConfigProjector</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ab0452c9919314b06db8ec86f8daf9c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; bool(JointConstPtr_t, const size_type)&gt;</type>
      <name>shouldFilter</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a3379f298faa61a0eaeba77cb18f09e35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::PartialShortcut::Parameters</name>
    <filename>a00061.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4a3d6a8dad54d8ac7b69f9f3865b9cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>removeLockedJoints</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a91f454c2a1dc8a4f70458756d8182b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyFullShortcut</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a75970d058e9ae521a69966e93387cce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numberOfConsecutiveFailurePerJoints</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aaebcce816b7f58576329f4b69d5923c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>progressionMargin</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad5efb6dfeee0176f179cb50539f3dba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::PartialShortcut</name>
    <filename>a00062.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcut::Parameters</class>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a0d8e7ab14f011bb8175c7c4835dcd081</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PartialShortcutPtr_t</type>
      <name>createWithTraits</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5785846798bda80cad24da42c2ae6adc</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PartialShortcutPtr_t</type>
      <name>create</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a044fea82f50f1bfdd352136de44a6a4e</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="variable">
      <type>struct hpp::core::pathOptimization::PartialShortcut::Parameters</type>
      <name>parameters</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a622c6e6d44093fcc0528d99f858abe8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialShortcut</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae24a6353a4c5e706d4032226564fd685</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::PartialShortcutTraits</name>
    <filename>a00063.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>removeLockedJoints</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa848895a48edf98e54194b89a4890828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>onlyFullShortcut</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af557460e690ad76a108fe04cfc6f7e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfConsecutiveFailurePerJoints</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa76e488e2690e1b2090dade2a2631f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>progressionMargin</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a93af513a86e37e465ce62a230aef41fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Path</name>
    <filename>a00064.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Path</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a34c160f000b93c5dac39f0fb8fa2eb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7048348f9f71017fcbdf7fb6e9202262</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8c6bbb809350d09a671f839f29a85609</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const =0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>as</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a301067df334969c0c76d7fb47a3bfc1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; const T &gt;</type>
      <name>as</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac2dca4742b8e471d5a983a98cb838abe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ab1f0a3549a67476ac8be4f0975784f2c</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a6243f0191cfef5da2a37b8e56975d677</anchor>
      <arglist>(const value_type &amp;tmin, const value_type &amp;tmax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>reverse</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a742d849c702a1ce98a217a7466214d07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>operator()</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9eea1eb660de762af7d1a81e3ccf0d75</anchor>
      <arglist>(const value_type &amp;time) const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>operator()</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a20c359124bcce766b7492819ee7ec377</anchor>
      <arglist>(const value_type &amp;time, bool &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8d803abac21be0bac9beb1a6da3f9b3b</anchor>
      <arglist>(ConfigurationOut_t result, const value_type &amp;time) const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>eval</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8bdd9ef66473ccf1aad7e507de8c140a</anchor>
      <arglist>(const value_type &amp;time, bool &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a712edc312bff849cf031e831d8976981</anchor>
      <arglist>(ConfigurationOut_t result, const value_type &amp;time) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>at</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a2db5c01eff108eff3c7779752a56e6af</anchor>
      <arglist>(const value_type &amp;time, ConfigurationOut_t result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivative</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>af4ff885fcc0f935cb0bad085a74d2077</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;time, size_type order) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocityBound</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8e8c694139face9a891d3e560326e833</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t0, const value_type &amp;t1) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputSize</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a6b1c90dd15edb7433f2d312f44729331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputDerivativeSize</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a4dce1e58bd78277aef41b3cf06599100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interval_t &amp;</type>
      <name>timeRange</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a35ae47ffb43b4cd64eb18c67b5e8a862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>length</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aec9d7e2a48160b74b4992aacd4a3fc9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aff6be5b3f0159456be30b940ab28449d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae0f4eddccae68b211dfd162e2ec3cd78</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a365a0deb55193e3a9f3b355971120832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interval_t &amp;</type>
      <name>paramRange</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa9efc7f7ed743519399940ea59f53321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeParameterization</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3fe03f06c35e231160507146fbf871bc</anchor>
      <arglist>(const TimeParameterizationPtr_t &amp;tp, const interval_t &amp;tr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad701f17a107c933af6d0deaeca8127c3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>afae1e18629d3fabd76872cbd99307cad</anchor>
      <arglist>(const interval_t &amp;interval, size_type outputSize, size_type outputDerivativeSize, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a4b31ad9780b79d48b75d4a084d71fbac</anchor>
      <arglist>(const interval_t &amp;interval, size_type outputSize, size_type outputDerivativeSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>adf26ad74e174ef8898169d388c5dd353</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa626b174e01a5a42fd1636633cd24dd1</anchor>
      <arglist>(const Path &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a180c3dc1d8df99f8d050af42fbf7fee6</anchor>
      <arglist>(const PathWkPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a92a695e72bdf3f3261089324ec2f3a8a</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkPath</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>adb491988614b89d5777dc3126289fdba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>timeRange</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9daaee6b91b759b378b7876d5d7f1c2d</anchor>
      <arglist>(const interval_t &amp;timeRange)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const TimeParameterizationPtr_t &amp;</type>
      <name>timeParameterization</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a505905b6130bec1ec1a3fd297520c020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>paramLength</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a656bff88df6995a0bc9127b4e6286abd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Configuration_t</type>
      <name>configAtParam</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3cca2a70a1f665b3ff15a3a623bb4b48</anchor>
      <arglist>(const value_type &amp;param, bool &amp;success) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3f0d1f9ee83649962e372dbf30b5914a</anchor>
      <arglist>(ConfigurationOut_t configuration, value_type param) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_derivative</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ab8c2b683cd11fd378a40ce8b7da2d210</anchor>
      <arglist>(vectorOut_t derivative, const value_type &amp;param, size_type order) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_velocityBound</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a1a0f08256759ef2f012df64d6e2672d2</anchor>
      <arglist>(vectorOut_t bound, const value_type &amp;param0, const value_type &amp;param1) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ace8677131008a810f353ecd51133dfe6</anchor>
      <arglist>(const interval_t &amp;paramInterval) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interval_t</type>
      <name>paramRange_</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a6772386fc8933f114b37bbccf8575710</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ExtractedPath</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa8e59bb1f9289cf7f4a2fd89e7fe036e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a5ea27806529a992b2754d027a0c0303f</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Path</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a34c160f000b93c5dac39f0fb8fa2eb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7048348f9f71017fcbdf7fb6e9202262</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8c6bbb809350d09a671f839f29a85609</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const =0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>as</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a301067df334969c0c76d7fb47a3bfc1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; const T &gt;</type>
      <name>as</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac2dca4742b8e471d5a983a98cb838abe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ab1f0a3549a67476ac8be4f0975784f2c</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a6243f0191cfef5da2a37b8e56975d677</anchor>
      <arglist>(const value_type &amp;tmin, const value_type &amp;tmax) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>reverse</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a742d849c702a1ce98a217a7466214d07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>operator()</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9eea1eb660de762af7d1a81e3ccf0d75</anchor>
      <arglist>(const value_type &amp;time) const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>operator()</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a20c359124bcce766b7492819ee7ec377</anchor>
      <arglist>(const value_type &amp;time, bool &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8d803abac21be0bac9beb1a6da3f9b3b</anchor>
      <arglist>(ConfigurationOut_t result, const value_type &amp;time) const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>eval</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8bdd9ef66473ccf1aad7e507de8c140a</anchor>
      <arglist>(const value_type &amp;time, bool &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a712edc312bff849cf031e831d8976981</anchor>
      <arglist>(ConfigurationOut_t result, const value_type &amp;time) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>at</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a2db5c01eff108eff3c7779752a56e6af</anchor>
      <arglist>(const value_type &amp;time, ConfigurationOut_t result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivative</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>af4ff885fcc0f935cb0bad085a74d2077</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;time, size_type order) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocityBound</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8e8c694139face9a891d3e560326e833</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t0, const value_type &amp;t1) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputSize</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a6b1c90dd15edb7433f2d312f44729331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputDerivativeSize</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a4dce1e58bd78277aef41b3cf06599100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interval_t &amp;</type>
      <name>timeRange</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a35ae47ffb43b4cd64eb18c67b5e8a862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>length</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aec9d7e2a48160b74b4992aacd4a3fc9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aff6be5b3f0159456be30b940ab28449d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae0f4eddccae68b211dfd162e2ec3cd78</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a365a0deb55193e3a9f3b355971120832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interval_t &amp;</type>
      <name>paramRange</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa9efc7f7ed743519399940ea59f53321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeParameterization</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3fe03f06c35e231160507146fbf871bc</anchor>
      <arglist>(const TimeParameterizationPtr_t &amp;tp, const interval_t &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathOptimizer</name>
    <filename>a00065.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathOptimizer</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaba321189c08102d5cbf7181c23c7488c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga9d07d63edbc71df565164e70cb807057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga04d8e315addf200833541c8bb01ef360</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga945c65ca497efd7c4098cd99dd26c413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathOptimizer</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga1dbe27ed7b7e7706778be064443061e1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga1fe4d818491c40aa735dbdafab2353e9</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>interrupt_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8ada4f7cabc118faaac5d3f48ac4c56e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathPlanner</name>
    <filename>a00066.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathPlanner</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a06862f419f7d31d56904dddff302dc6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RoadmapPtr_t &amp;</type>
      <name>roadmap</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>abc9d0f87290140294426a57a5351d25a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>af10fd1b9d58700918c12c8fbbad1b5ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSolve</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ad309affd83643ec92dedf255c91e539a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>solve</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a8fa2699cbd9b88e87894e64ef556734b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tryDirectPath</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a553d274f23db9dc7989d55acec2f82e9</anchor>
      <arglist>() HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tryConnectInitAndGoals</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aba0726e8d482ea5e8ec433401d42efce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a7df08171eba296112c900c636f603145</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>finishSolve</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a8ed743cc43c1f972b067640936c07645</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aef447a681b5d2d00605b71b99d4a4ba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ac8098e760406db0d4ea973a66e8d281b</anchor>
      <arglist>(const unsigned long int &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeOut</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ab0ce4afc42b82d0f9dd7ca20781bb172</anchor>
      <arglist>(const double &amp;timeOut)</arglist>
    </member>
    <member kind="function">
      <type>PathVectorPtr_t</type>
      <name>computePath</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a07d0aa10a14488b370b7d53743a17699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathPlanner</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a23f89105a10a7d9f158c775ee4ffacd5</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathPlanner</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ac4fec20ca2705d619abde2cce20b32b0</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ac77b5d64432f2dcf5f09ea7e550c278e</anchor>
      <arglist>(const PathPlannerWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathProjector</name>
    <filename>a00067.html</filename>
    <member kind="typedef">
      <type>hpp::core::Path</type>
      <name>Path</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4864c23a5b2f1a15f310eff37397616d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::PathPtr_t</type>
      <name>PathPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a8b6760eee83a8cc63fa9ac179792729b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::PathVector</type>
      <name>PathVector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a34693f323fadda64b138315a4875dbaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::PathVectorPtr_t</type>
      <name>PathVectorPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae01104d166bbaf6421f78aafd6259c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathProjector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a448f1f6886cb7eeb653f3d2851c394f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a29266645c7b310610120b738aa2d1c09</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathProjector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1b02ea82552838a5ead31104ad09f88c</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, bool keepSteeringMethodConstraints=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_apply</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab2b471f381213026bd55c4197ca1b170</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>d</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a727e64726a50146a3faba8d9029efb7a</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a77be67d453c3d17fcf568d67692a1054</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SteeringMethodPtr_t</type>
      <name>steeringMethod_</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a5d6481f6b66b88f25f3b5e2c17351a7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathValidation</name>
    <filename>a00068.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3118cbc5c819da8606525cb6d891b584</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7a8451c1b22d7adc7b760b7cb18b8238</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8a56e2b20b65212f1bdaf1ef06ca7951</anchor>
      <arglist>(const JointPtr_t &amp;, const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a9f3bfacdbde336da64fabb483884353a</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathValidation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8a1346bec3223db2238f9a18113e58ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathValidation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>afade6a235342145afc83a3aaf3a9700c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::PathValidationReport</name>
    <filename>a00069.html</filename>
    <base>hpp::core::ValidationReport</base>
    <member kind="function">
      <type></type>
      <name>PathValidationReport</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a3a9ebc2ed615299bee4a18c3c11e16bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathValidationReport</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a31d669bb881a4ecda6b539c00241bebc</anchor>
      <arglist>(const value_type &amp;param, const ValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathValidationReport</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac9bc8dc7a898a721be37ff29b0547319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a012320238f1660e80b515310f729c1f0</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getParameter</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a50f30ae4881344c4df93baef6535ca81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>abba9634e946a10d1251cbab3a2f5c80b</anchor>
      <arglist>(value_type p)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>parameter</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8957141b5259236d39addd2aab335dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValidationReportPtr_t</type>
      <name>configurationReport</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ad31d2396992f77eef9ff4b2064dc6658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathValidations</name>
    <filename>a00070.html</filename>
    <base>hpp::core::PathValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a12b0818f1da945467f36feab3b05ed8e</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPathValidation</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aec5197db532c97e1ede5b08bb7bbcecf</anchor>
      <arglist>(const PathValidationPtr_t &amp;pathValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ab37940db7c8f290530d3984f5c223413</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a669e22afa509f2ee253b3a877026730c</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae4efe6c4535f26af2c756346b57faf29</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathValidations</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a3334bd67e47a66d7f08687e243a09bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathValidationsPtr_t</type>
      <name>create</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a6136085da3aa34f08c4003346c9e78fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathValidations</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae563ff4dd168a254cdd9be664bf6b2d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathVector</name>
    <filename>a00071.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a9d0963990b44621452fd480a0a9d9eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberPaths</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a434f94aba30ecee8a4c5aa6fd46d02eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>pathAtRank</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a27100e71bf8826dc0183943ba5d16b4e</anchor>
      <arglist>(std::size_t rank) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>rankAtParam</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a6f3b78390c6f96c0b023fc7e32cfa34a</anchor>
      <arglist>(const value_type &amp;param, value_type &amp;localParam) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendPath</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab825e8cf2a2f07bb2626ce177ff5b463</anchor>
      <arglist>(const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concatenate</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae5a38cb7d94c651f5a58bcb42314f1cb</anchor>
      <arglist>(const PathVector &amp;path) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concatenate</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a2babfded76b3d123804c12ab9003bd6b</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a44b17db99a70e273be3beb39da0c5530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a14c21734af4a8184e0c88bebef3a55f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatten</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>abbe749b63ba2e320bc9a67f52532a9e6</anchor>
      <arglist>(PathVectorPtr_t flattenedPath) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a3ed5f2ad6048195722b60d42232efe75</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathVector</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a88edeb2655919b239a436771786fb6d4</anchor>
      <arglist>(std::size_t outputSize, std::size_t outputDerivativeSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathVector</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>acba690f46e308a067645b4ef875512d9</anchor>
      <arglist>(const PathVector &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathVector</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a35b9c0797fcb947c56195d26f74acd5b</anchor>
      <arglist>(const PathVector &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8e0c0fc8430743380e0889d6032ed27f</anchor>
      <arglist>(PathVectorPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a5f95d1d5a1dbd4c4d49106d5ca7ef472</anchor>
      <arglist>(ConfigurationOut_t result, value_type t) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_derivative</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae48b4a3d3861e6a0bd0e6b6e5309c130</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t, size_type order) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a5866a06985b13ccd2ed910ba3640ae19</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>create</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aee21d3c1ad1ec521d07eaa716072f036</anchor>
      <arglist>(size_type outputSize, size_type outputDerivativeSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>abf5d642aa70b4161a264c6f1b8255d0d</anchor>
      <arglist>(const PathVectorPtr_t &amp;original)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a59ddabb066475fdc57c13305a04d2a7b</anchor>
      <arglist>(const PathVectorPtr_t &amp;original, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ad72d108ccf5d3b36a36bde8fcaa4b79a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae8014bb98cb6ad3dcf0eed14d2b4c461</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathVector</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae593580985345d9180e4807b1f404357</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PlanAndOptimize</name>
    <filename>a00072.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSolve</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a95bcf6b0e30a9df28a7a4c668140ff67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a393a3a5fa8052a12b04b48a50426f336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>finishSolve</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa1f5576ab4f1a3cfe1cbfd1d8b783c83</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOptimizer</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad229a2d13c14112cd2c5aa04a050b1b8</anchor>
      <arglist>(const PathOptimizerPtr_t &amp;optimizer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlanAndOptimizePtr_t</type>
      <name>create</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4653211dc2dd9d209e86559a4cbfd4f2</anchor>
      <arglist>(const PathPlannerPtr_t &amp;pathPlanner)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlanAndOptimize</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad31070fab8f26d24965ec9bfb279d301</anchor>
      <arglist>(const PathPlannerPtr_t &amp;pathPlanner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::timeParameterization::Polynomial</name>
    <filename>a00073.html</filename>
    <base>hpp::core::TimeParameterization</base>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a906576f253541585050985634444343e</anchor>
      <arglist>(const vector_t &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>const vector_t &amp;</type>
      <name>parameters</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a811d4045527715c34458d13b6bce3d7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimeParameterizationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a1cf1f8cb553640579e99b0a6325dc874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a21e201631b3cccc24d8485b827410fea</anchor>
      <arglist>(const value_type &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>derivative</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a0be7ef0d5435916edba951bea0f5ae25</anchor>
      <arglist>(const value_type &amp;t, const size_type &amp;order) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>derivativeBound</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a53aeac5b46d97c257baa87296dd3aad9</anchor>
      <arglist>(const value_type &amp;low, const value_type &amp;up) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Problem</name>
    <filename>a00074.html</filename>
    <member kind="function">
      <type></type>
      <name>Problem</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a1b62a8901ba8ed70ceeb273d55162a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Problem</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad71c5c3d40a310fc05a8b8f902aef662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkProblem</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a8278ea41c7f852ff1039bf833cacb3bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Parameter &amp;</type>
      <name>getParameter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad6abadbbdcf2b8f4639333d28e99f26a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7f11d2cbcba1bd43a5892465f3e95867</anchor>
      <arglist>(const std::string &amp;name, const Parameter &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a429115157c3b547de8c2bbe2b3309e5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConfigurationPtr_t &amp;</type>
      <name>initConfig</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af4b33ede4c2988ea0864b131dc51117b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initConfig</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aacac640a0598d327b2b9d9792ca6d287</anchor>
      <arglist>(const ConfigurationPtr_t &amp;inConfig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a1021a256cdab219b77219dfe1ff239c7</anchor>
      <arglist>(const ProblemTargetPtr_t &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const ProblemTargetPtr_t &amp;</type>
      <name>target</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0b328967ea4d46b9e33b42297ddf5e10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae5f389b1d996db449bbb233d4236fd1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7ea8725e5aaeb5ea893be86fe72cb1f8</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a781ce8af44be6b7fce107a772f6d5d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steeringMethod</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a53758cec7eaddc48d821526f1665d4bd</anchor>
      <arglist>(const SteeringMethodPtr_t &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>SteeringMethodPtr_t</type>
      <name>steeringMethod</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3bf4fa157afe6fdf545cea5f178e2aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a67e9731f7ccf2ac0ea7eb16156c45245</anchor>
      <arglist>(const DistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a93c6675723890982979fe7064b9ecba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0e88eb870d1211782c02a039e846a895</anchor>
      <arglist>(const ConfigValidationsPtr_t &amp;configValidations)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigValidationsPtr_t &amp;</type>
      <name>configValidations</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae0866d20650baaa2922804ad276d0808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetConfigValidations</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>afa431fdeca827adc357b8b8790007b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearConfigValidations</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a9f8df7d9d662f0dcd31ca02e63ffb77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfigValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a5bcf92e0be1304bf484aae6f8c123dfd</anchor>
      <arglist>(const ConfigValidationPtr_t &amp;configValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a69ebdbd75d46d9c6e364da410f4d677b</anchor>
      <arglist>(const PathValidationPtr_t &amp;pathValidation)</arglist>
    </member>
    <member kind="function">
      <type>PathValidationPtr_t</type>
      <name>pathValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad31a632de24bec9bcc56fca6e3597e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a6e92df7128471fdd3787abeb1cc77857</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;configurationShooter)</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationShooterPtr_t</type>
      <name>configurationShooter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae018a7e15c6cafa840cbc0ab068580bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathProjector</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a415047384c5f2dc7da4a89be6f309a34</anchor>
      <arglist>(const PathProjectorPtr_t &amp;pathProjector)</arglist>
    </member>
    <member kind="function">
      <type>PathProjectorPtr_t</type>
      <name>pathProjector</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aa9f4fb784216b41587fad4fe545d9f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a95c6a22d3833fdee9ed376cf69b36bfd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a2a9caec6d6a4d4026169e3853b7bb831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObstacle</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>adb930803f20e64defd87bea28ea3e6b0</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aac2b8d6ef49579a87d2c235c42ccadb1</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a69d9daa9dafadddc4ebda9744608f0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectStdVector_t &amp;</type>
      <name>collisionObstacles</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a49c263b7d757538cd1b6ee2d538abfaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionObstacles</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>abbfb9a6e54e2d39dd2fa63c4fcbf6fb0</anchor>
      <arglist>(const ObjectStdVector_t &amp;collisionObstacles)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProblemPtr_t</type>
      <name>create</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aa448c21fd5d87a3db08f6739aa41dfe1</anchor>
      <arglist>(DevicePtr_t robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>declareParameter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7faa378113b9fd794915ec210a0004ed</anchor>
      <arglist>(const ParameterDescription &amp;desc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Container&lt; ParameterDescription &gt; &amp;</type>
      <name>parameterDescriptions</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aff0af760428543036b4a3b6f6d4ddc7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ParameterDescription &amp;</type>
      <name>parameterDescription</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a9dc60b6fe1f4c5c1b57856df39610d80</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; Parameter &gt;</type>
      <name>parameters</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af2bdd70c2e8c7c825eb20818b12303c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Problem</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ab341b06760c84f5ac13f06cbcb9e3175</anchor>
      <arglist>(DevicePtr_t robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7a50d0371073c38ed93a9d16ae531a7a</anchor>
      <arglist>(ProblemWkPtr_t wkPtr)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a429115157c3b547de8c2bbe2b3309e5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConfigurationPtr_t &amp;</type>
      <name>initConfig</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af4b33ede4c2988ea0864b131dc51117b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initConfig</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aacac640a0598d327b2b9d9792ca6d287</anchor>
      <arglist>(const ConfigurationPtr_t &amp;inConfig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a1021a256cdab219b77219dfe1ff239c7</anchor>
      <arglist>(const ProblemTargetPtr_t &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const ProblemTargetPtr_t &amp;</type>
      <name>target</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0b328967ea4d46b9e33b42297ddf5e10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae5f389b1d996db449bbb233d4236fd1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7ea8725e5aaeb5ea893be86fe72cb1f8</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a781ce8af44be6b7fce107a772f6d5d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steeringMethod</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a53758cec7eaddc48d821526f1665d4bd</anchor>
      <arglist>(const SteeringMethodPtr_t &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>SteeringMethodPtr_t</type>
      <name>steeringMethod</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3bf4fa157afe6fdf545cea5f178e2aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a67e9731f7ccf2ac0ea7eb16156c45245</anchor>
      <arglist>(const DistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a93c6675723890982979fe7064b9ecba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0e88eb870d1211782c02a039e846a895</anchor>
      <arglist>(const ConfigValidationsPtr_t &amp;configValidations)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigValidationsPtr_t &amp;</type>
      <name>configValidations</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae0866d20650baaa2922804ad276d0808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetConfigValidations</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>afa431fdeca827adc357b8b8790007b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearConfigValidations</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a9f8df7d9d662f0dcd31ca02e63ffb77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfigValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a5bcf92e0be1304bf484aae6f8c123dfd</anchor>
      <arglist>(const ConfigValidationPtr_t &amp;configValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a69ebdbd75d46d9c6e364da410f4d677b</anchor>
      <arglist>(const PathValidationPtr_t &amp;pathValidation)</arglist>
    </member>
    <member kind="function">
      <type>PathValidationPtr_t</type>
      <name>pathValidation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad31a632de24bec9bcc56fca6e3597e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a6e92df7128471fdd3787abeb1cc77857</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;configurationShooter)</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationShooterPtr_t</type>
      <name>configurationShooter</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae018a7e15c6cafa840cbc0ab068580bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathProjector</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a415047384c5f2dc7da4a89be6f309a34</anchor>
      <arglist>(const PathProjectorPtr_t &amp;pathProjector)</arglist>
    </member>
    <member kind="function">
      <type>PathProjectorPtr_t</type>
      <name>pathProjector</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aa9f4fb784216b41587fad4fe545d9f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a95c6a22d3833fdee9ed376cf69b36bfd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a2a9caec6d6a4d4026169e3853b7bb831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObstacle</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>adb930803f20e64defd87bea28ea3e6b0</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aac2b8d6ef49579a87d2c235c42ccadb1</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectConstPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a69d9daa9dafadddc4ebda9744608f0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectStdVector_t &amp;</type>
      <name>collisionObstacles</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a49c263b7d757538cd1b6ee2d538abfaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionObstacles</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>abbfb9a6e54e2d39dd2fa63c4fcbf6fb0</anchor>
      <arglist>(const ObjectStdVector_t &amp;collisionObstacles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ProblemSolver</name>
    <filename>a00075.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; PathOptimizerPtr_t &gt;</type>
      <name>PathOptimizers_t</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a152926794b023d2e87dfcdb1cedfdf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>PathOptimizerTypes_t</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4ce273f79f7730a33f43c4664aa35c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ConfigValidationTypes_t</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2982afb707468feb741fcd5dc56b4adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProblemSolver</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a43d395964a3f4bf47f83c7d920f97493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a10f6977808578f2238a2494b884483a0</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>robotType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae2f8bca6d6c6493b31d68e36c8531c42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>createRobot</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8ef9777e831d0ffb42c99b68b0b0bf7f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>robot</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7c240451620baa487192f393b41c0a11</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a75b4246cb247a7724a84a8a1897b13bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProblemPtr_t</type>
      <name>problem</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>adc49ca8ec37f61fdf3fbbcc1e3d19317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConfigurationPtr_t &amp;</type>
      <name>initConfig</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2dce4e7ce0e16e569d5ed6bb2bd296ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initConfig</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6234dbdfe05076f24d55583d601b4169</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a439a79a0dc0397000036ca99a444b26d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0cb9dd5079e40cec3e99a9c596486ed8</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0f498f74c397df2372aba13f55c5db78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathPlannerType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2670564eda72537b63d1e25befc6b40f</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>pathPlannerType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae70668c0a42c4883cd633d9bd00c565b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6af4b700b834876a9a6f78cd51dc9895</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>distanceType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac2faa46318c207e3ca66a1404f91cf91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steeringMethodType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa1e57f27050c974f959144113d565d4c</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>steeringMethodType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad4f43b38a8b6cd9a67bb1e5d0f20ef2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooterType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a93e067ea72670804030a4ce1e2923bc3</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>configurationShooterType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1c79e62e74fe4f8f9c1e5c9623d671c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PathPlannerPtr_t &amp;</type>
      <name>pathPlanner</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a79ae7d4567393fd3bbf5d2d00946ca71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOptimizer</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1064edadef70ef58ec610d6fd2a8b256</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const PathOptimizerTypes_t &amp;</type>
      <name>pathOptimizerTypes</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8dc03dde77fb2c87adf202d9a0c4ee8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPathOptimizers</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0c3a5d1d30d367e1cd76e03ed29beda3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PathOptimizerPtr_t &amp;</type>
      <name>pathOptimizer</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2fe532373d694f024f34cf4bb21e390f</anchor>
      <arglist>(std::size_t rank) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimizePath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8c2abb7730c93addc98bf50abe6aa1e8</anchor>
      <arglist>(PathVectorPtr_t path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathValidationType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aea2e100dfefb1d966bc6b786f1650da9</anchor>
      <arglist>(const std::string &amp;type, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>pathValidationType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a81c7f61b875277dcc2277372ce17917d</anchor>
      <arglist>(value_type &amp;tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathProjectorType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>afb7f1d80fd9b33bc1cbc4b42b4ffcb2a</anchor>
      <arglist>(const std::string &amp;type, const value_type &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>pathProjectorType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3106ee86889de3503061d00779fdd6d2</anchor>
      <arglist>(value_type &amp;tolerance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addConfigValidation</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3aafffe6c9c906ef7182eab6cb2c8103</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigValidationTypes_t</type>
      <name>configValidationTypes</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9062fe266b6edf9340f055514a75b3bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearConfigValidations</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa18a98375933a9a7f782174f0a535186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfigValidationBuilder</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8bd7dc94ada11b5141a50873e14e6eab</anchor>
      <arglist>(const std::string &amp;type, const ConfigValidationBuilder_t &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>const RoadmapPtr_t &amp;</type>
      <name>roadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>acd613c2561075278989e6ec4dc149a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProblem</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ace4479b208b07e11c4aefcf473f87b53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetRoadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4cbb35a72bae1c28cfcafdff15165719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectStdVector_t &amp;</type>
      <name>collisionObstacles</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9f985612dcd3edb5c32ee73f03876a9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ObjectStdVector_t &amp;</type>
      <name>distanceObstacles</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aba401610c7a1dd037d1e679adcf94314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae2c9985efd7b2aa6d0899c2c4c461c96</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initDistance</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a658a3749c53015c4059b3ad9f640bfc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initSteeringMethod</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a187e037f6764cb8c1712a5e020ffcf9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initPathProjector</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4c426341903249021e1e9e25c3372ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initPathValidation</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0fc710190e557106101eab852128ea36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initConfigValidation</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6d6160f0cab27fddae528e4b830a29d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initValidations</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>acf6a9783dca100ee4bf5889e5af9f13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initProblemTarget</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8b8f8f0b3f31e30cfc849e85dfc7311e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a89f392be4832bd0be4ab9b8753827f1e</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLockedJoint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad378b68a30735fff869e5397d3529e3e</anchor>
      <arglist>(const LockedJointPtr_t &amp;lockedJoint) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a169e1087a2bfe99cd5334593692aaad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a89aad97cd950808c8e7a83bdd3a34802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addNumericalConstraintToConfigProjector</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a70b5208d1076a590dcf5a3fe003f1d0b</anchor>
      <arglist>(const std::string &amp;configProjName, const std::string &amp;constraintName, const std::size_t priority=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLockedJointToConfigProjector</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa05d211dd562be5c732e2e64f0385830</anchor>
      <arglist>(const std::string &amp;configProjName, const std::string &amp;lockedJointName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumericalConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a26e0ea341b5464f9a58b8768590cd699</anchor>
      <arglist>(const std::string &amp;name, const constraints::ImplicitPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9aeb8da9fcaf671099b7f6d9692dbbef</anchor>
      <arglist>(const std::string &amp;name, const ComparisonTypes_t types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aef88bcd49b21dd429c4b948f915aa7e0</anchor>
      <arglist>(const std::string &amp;name, const ComparisonType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ComparisonTypes_t</type>
      <name>comparisonType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af0a6e9e18caa2b93741e7a0fdc18d0a8</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>constraints::ImplicitPtr_t</type>
      <name>numericalConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aed9eaabfe5f281d50c51513d4ca6ebcd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValueAndJacobian</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a485599d11f4217c9be0caa4cd7010aae</anchor>
      <arglist>(const Configuration_t &amp;configuration, vector_t &amp;value, matrix_t &amp;jacobian) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterProjection</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9b4a59435c5f21f63d2927a16aff200a</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterProjection</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a701d85bb2bee9e6916abf50cbe62dc96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1873fc35c4c8d0d7808adeadc7899cfd</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa6e6b952da57868e34799d6ee2241416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeOutPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa0cd716b194b27fadc199239445c75b3</anchor>
      <arglist>(double timeOut)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeOutPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2911adcf82857c3f7cbe9c04ff176599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aff71efe2513e37b089069cd844ea4b68</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a554dc17275167d15471e41287e661495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPathOptimizers</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae648412ffe3cbfc3cd64c943f66a5d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepareSolveStepByStep</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7d490c1c60656ee8916c2ee0ad0b15a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>executeOneStep</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a15412de571b230af4053cdca8c2c1d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishSolveStepByStep</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a912885a20c52361147e5f64409edf1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad4a4f560c0eabc555a539dcd7fde842f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>directPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a53cf4620e9deea75999d0277230e7639</anchor>
      <arglist>(ConfigurationIn_t start, ConfigurationIn_t end, bool validate, std::size_t &amp;pathId, std::string &amp;report)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfigToRoadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1c9255735da7a2a61795f356aaf3c50e</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdgeToRoadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5bfed0abc8438c2491c4214ce8d9b42d</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config1, const ConfigurationPtr_t &amp;config2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2fc7880658292548d4de2a16cf22f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af2410523b32f2a7a22da2a0a866a1b01</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erasePath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a57bf563309bf97f64e0a9370b125f73b</anchor>
      <arglist>(std::size_t pathId)</arglist>
    </member>
    <member kind="function">
      <type>const PathVectors_t &amp;</type>
      <name>paths</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a79c18a5880f146b8ee75e4a6f8c761a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abc25ed776290ab4ffaafab45efaad2da</anchor>
      <arglist>(const DevicePtr_t &amp;device, bool collision, bool distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2b1348795967eaa958208eaaf547fccf</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;inObject, bool collision, bool distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a261a6abd2a964b3aef6bfd49860712e2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab7658d48ed9b54ae240a4647ec2b00af</anchor>
      <arglist>(const std::string &amp;name, FclCollisionObject &amp;inObject, bool collision, bool distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7496bda451b4111352186429f605d9c9</anchor>
      <arglist>(const std::string &amp;jointName, const std::string &amp;obstacleName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5d0a86bedb94fc7885ea62e54b86a197</anchor>
      <arglist>(const std::string &amp;name, const fcl::AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a05d47239be974929f6c15ea51f27a575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CollisionObjectPtr_t</type>
      <name>obstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abafcaaffb14beb2ce59213f96ac712e4</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>obstacleFramePosition</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aaa15a86101a760ef34ef9262bd345243</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>obstacleNames</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>adf9a0a77267e6ecade488d99a361d0b0</anchor>
      <arglist>(bool collision, bool distance) const </arglist>
    </member>
    <member kind="function">
      <type>const DistanceBetweenObjectsPtr_t &amp;</type>
      <name>distanceBetweenObjects</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab46990b29a53cc0e4966354008386e8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProblemSolverPtr_t</type>
      <name>create</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a42bb1c99581e2a51e2d46d1c958ef71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProblemSolverPtr_t</type>
      <name>latest</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab083da15005e48caa971015a13d89755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; RobotBuilder_t &gt;</type>
      <name>robots</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1aa2b40571d2ac17fab0c6a3fb730355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; ConfigurationShooterBuilder_t &gt;</type>
      <name>configurationShooters</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a509ce58f23f4f768fa49108a15d2c351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; SteeringMethodBuilder_t &gt;</type>
      <name>steeringMethods</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5d69386a963f19681bedd918b58f8c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; DistanceBuilder_t &gt;</type>
      <name>distances</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a77ae973fbfb1b01343f43cacd9a30679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; PathValidationBuilder_t &gt;</type>
      <name>pathValidations</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae93f2cd22851ea04d3157909806109e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; ConfigValidationBuilder_t &gt;</type>
      <name>configValidations</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0a90de0b663425b70444eef9fae48ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; PathProjectorBuilder_t &gt;</type>
      <name>pathProjectors</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a386d70ded3fc95254912daa31bf68263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; PathPlannerBuilder_t &gt;</type>
      <name>pathPlanners</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a211b9e8a7bd355ceccb13b8ae06705d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; PathOptimizerBuilder_t &gt;</type>
      <name>pathOptimizers</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3a25d193ec2f6234ec17f71541cd9aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; constraints::ImplicitPtr_t &gt;</type>
      <name>numericalConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3ee4b17ec06122b3c0383cb88902e2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; LockedJointPtr_t &gt;</type>
      <name>lockedJoints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af15aca2cb30aace06bc1229fd15eb9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; CenterOfMassComputationPtr_t &gt;</type>
      <name>centerOfMassComputations</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a588ae8634dbf51a57a70ed3c6b10b61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; segments_t &gt;</type>
      <name>passiveDofs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4bc8fa1194a7fc8361f4cf56351d4344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; JointAndShapes_t &gt;</type>
      <name>jointAndShapes</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a52a146d79b4abafccdce9e3f134eee5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; AffordanceObjects_t &gt;</type>
      <name>affordanceObjects</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af80dbbcc064ed0b36288e78e51e9aee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container&lt; AffordanceConfig_t &gt;</type>
      <name>affordanceConfigs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4b4caa6e6bb233512c2885692f5781f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemSolver</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab4c28cce9d2831787ab0531af47f37e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>problem</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1e4a6dadc812f2c1eb946f5360a3adf9</anchor>
      <arglist>(ProblemPtr_t problem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProblem</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aef63008c501bd6f876ee53b2be05a1bc</anchor>
      <arglist>(ProblemPtr_t problem)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintSetPtr_t</type>
      <name>constraints_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a36c42b98d9a98b5152976d8aed046f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7348f05edce62be1a45b5528fa6d6a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemPtr_t</type>
      <name>problem_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa9b6082a6107c32a64e37867e96ab9cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathPlannerPtr_t</type>
      <name>pathPlanner_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a72dc95d531badf18038d204c5b760df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapPtr_t</type>
      <name>roadmap_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abc01bbf8f62e460ae39ba8ede1349089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathVectors_t</type>
      <name>paths_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>afae26e4f2c0a6cc12888d968413a5e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>pathProjectorType_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aeda3fc9bdba8c0b214abbd82d238d1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>pathProjectorTolerance_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abb0cc99fed3ace86704b335a092f7fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>pathPlannerType_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abe001abbc9d539b9105d083ac66b3601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemTargetPtr_t</type>
      <name>target_</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9bc47e6b3983b34b91d959e76417a353</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a89f392be4832bd0be4ab9b8753827f1e</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLockedJoint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad378b68a30735fff869e5397d3529e3e</anchor>
      <arglist>(const LockedJointPtr_t &amp;lockedJoint) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a169e1087a2bfe99cd5334593692aaad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetConstraints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a89aad97cd950808c8e7a83bdd3a34802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addNumericalConstraintToConfigProjector</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a70b5208d1076a590dcf5a3fe003f1d0b</anchor>
      <arglist>(const std::string &amp;configProjName, const std::string &amp;constraintName, const std::size_t priority=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLockedJointToConfigProjector</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa05d211dd562be5c732e2e64f0385830</anchor>
      <arglist>(const std::string &amp;configProjName, const std::string &amp;lockedJointName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumericalConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a26e0ea341b5464f9a58b8768590cd699</anchor>
      <arglist>(const std::string &amp;name, const constraints::ImplicitPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9aeb8da9fcaf671099b7f6d9692dbbef</anchor>
      <arglist>(const std::string &amp;name, const ComparisonTypes_t types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aef88bcd49b21dd429c4b948f915aa7e0</anchor>
      <arglist>(const std::string &amp;name, const ComparisonType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ComparisonTypes_t</type>
      <name>comparisonType</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af0a6e9e18caa2b93741e7a0fdc18d0a8</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>constraints::ImplicitPtr_t</type>
      <name>numericalConstraint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aed9eaabfe5f281d50c51513d4ca6ebcd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValueAndJacobian</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a485599d11f4217c9be0caa4cd7010aae</anchor>
      <arglist>(const Configuration_t &amp;configuration, vector_t &amp;value, matrix_t &amp;jacobian) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterProjection</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9b4a59435c5f21f63d2927a16aff200a</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterProjection</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a701d85bb2bee9e6916abf50cbe62dc96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1873fc35c4c8d0d7808adeadc7899cfd</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa6e6b952da57868e34799d6ee2241416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeOutPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa0cd716b194b27fadc199239445c75b3</anchor>
      <arglist>(double timeOut)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimeOutPathPlanning</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2911adcf82857c3f7cbe9c04ff176599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aff71efe2513e37b089069cd844ea4b68</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a554dc17275167d15471e41287e661495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPathOptimizers</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae648412ffe3cbfc3cd64c943f66a5d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepareSolveStepByStep</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7d490c1c60656ee8916c2ee0ad0b15a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>executeOneStep</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a15412de571b230af4053cdca8c2c1d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishSolveStepByStep</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a912885a20c52361147e5f64409edf1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad4a4f560c0eabc555a539dcd7fde842f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>directPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a53cf4620e9deea75999d0277230e7639</anchor>
      <arglist>(ConfigurationIn_t start, ConfigurationIn_t end, bool validate, std::size_t &amp;pathId, std::string &amp;report)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfigToRoadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1c9255735da7a2a61795f356aaf3c50e</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdgeToRoadmap</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5bfed0abc8438c2491c4214ce8d9b42d</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config1, const ConfigurationPtr_t &amp;config2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2fc7880658292548d4de2a16cf22f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af2410523b32f2a7a22da2a0a866a1b01</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erasePath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a57bf563309bf97f64e0a9370b125f73b</anchor>
      <arglist>(std::size_t pathId)</arglist>
    </member>
    <member kind="function">
      <type>const PathVectors_t &amp;</type>
      <name>paths</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a79c18a5880f146b8ee75e4a6f8c761a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abc25ed776290ab4ffaafab45efaad2da</anchor>
      <arglist>(const DevicePtr_t &amp;device, bool collision, bool distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2b1348795967eaa958208eaaf547fccf</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;inObject, bool collision, bool distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a261a6abd2a964b3aef6bfd49860712e2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab7658d48ed9b54ae240a4647ec2b00af</anchor>
      <arglist>(const std::string &amp;name, FclCollisionObject &amp;inObject, bool collision, bool distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7496bda451b4111352186429f605d9c9</anchor>
      <arglist>(const std::string &amp;jointName, const std::string &amp;obstacleName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutObstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5d0a86bedb94fc7885ea62e54b86a197</anchor>
      <arglist>(const std::string &amp;name, const fcl::AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a05d47239be974929f6c15ea51f27a575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CollisionObjectPtr_t</type>
      <name>obstacle</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abafcaaffb14beb2ce59213f96ac712e4</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>obstacleFramePosition</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aaa15a86101a760ef34ef9262bd345243</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>obstacleNames</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>adf9a0a77267e6ecade488d99a361d0b0</anchor>
      <arglist>(bool collision, bool distance) const </arglist>
    </member>
    <member kind="function">
      <type>const DistanceBetweenObjectsPtr_t &amp;</type>
      <name>distanceBetweenObjects</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab46990b29a53cc0e4966354008386e8b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ProblemSolverPlugin</name>
    <filename>a00076.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ad92f93d70283faa13eec804e7621452e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>version</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aa95b78f38f3f48abcdfb406119413814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a186f01aba8f301f1fe7c35a3cce386a8</anchor>
      <arglist>(ProblemSolverPtr_t ps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProblemSolverPlugin</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a353e87d3c94379c0cbd0ec6e85158e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_initialize</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aed46a8e40bb01d557a6256d3ea842d2f</anchor>
      <arglist>(ProblemSolverPtr_t ps)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemSolverPlugin</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>afb7be78491d18990bb42dd53990f713d</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ProblemTarget</name>
    <filename>a00077.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProblemTarget</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa6c1654c9e7f0f8af9721ff96b5c8735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>check</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad6400455fd6ee4de3bcaefc8f92e005e</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reached</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a727a488f2b06c8904492146b827ccd06</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathVectorPtr_t</type>
      <name>computePath</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad0dbff8e212f0d3716ea5595a6c7a534</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>problem</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>afca4897d5cbfbc96d34629aafd5ea96f</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemTarget</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0881782319fc0e52cdf5901ab02a52c1</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a804b6dac0857667753c794186adba4df</anchor>
      <arglist>(const ProblemTargetWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemWkPtr_t</type>
      <name>problem_</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aae50d697c9d0566745162e4dbbf7e848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemTargetWkPtr_t</type>
      <name>weakPtr_</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aceaf55f52cb9cf50770214347b275d2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousValidation::Progressive</name>
    <filename>a00078.html</filename>
    <base>hpp::core::ContinuousValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Progressive</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gac32201994f1f059750b9b2f033f064b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga893f43ef71ef8f5b348b90f0c0d4ae7c</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Progressive</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gafffe07f4a15909e051da70a989d2fbb4</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gab70034bcc41d42ba9b721f254ae48228</anchor>
      <arglist>(const ProgressiveWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::Progressive</name>
    <filename>a00079.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::StraightPath</type>
      <name>StraightPath</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>abccf0fbc1b65dc8a885d492cdaf52123</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::StraightPathPtr_t</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ae02a9b113e55b3f4edf879eadb97aa7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a8c6b357ff36d873d3cc6bfa6da98549c</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a19657c76784b637a60cca36b8578cbd6</anchor>
      <arglist>(const Problem &amp;problem, const value_type &amp;step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>adebfd860c5ea7740896c7ca961302f0d</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Progressive</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a29943428e35f9cc3fcea0b6a2215c384</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step, value_type threshold, value_type hessianBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>project</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a02c1c3e2fb80ae7f3f98a5d2064ccfb7</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;proj) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::projection_error</name>
    <filename>a00080.html</filename>
    <member kind="function">
      <type></type>
      <name>projection_error</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a33c815ae058fc1dabc70041d5d4fa6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>projection_error</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a5fc29c260e12cc4bb9944e688d445b8f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>projection_error</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae1833d5e485dcf658c66f4b667f84ce0</anchor>
      <arglist>(const projection_error &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~projection_error</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a88b1330deccbaff263e1318e42c4937e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2ec632e18c1b14ff33e9dd2f8562edf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msg_</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab788e12b40e905ed11862f1562f805e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::QuadraticProgram</name>
    <filename>a00081.html</filename>
    <member kind="typedef">
      <type>Eigen::JacobiSVD&lt; matrix_t &gt;</type>
      <name>Decomposition_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gac06dce338d44e4a5c249e9b0c9698768</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::LLT&lt; matrix_t, Eigen::Lower &gt;</type>
      <name>LLT_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga34d7dae38d1726583e32d29da1f9fda4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa3c8a9ed38e00ccc5270cf99963955aa</anchor>
      <arglist>(size_type inputSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga94012fe4980e935094e3bbd3ea4ac2b5</anchor>
      <arglist>(const QuadraticProgram &amp;QP, const LinearConstraint &amp;lc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga87fa98ba7c876fede139c4c9a4061762</anchor>
      <arglist>(const QuadraticProgram &amp;QP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa16d9c48ee70e6b5d8c1d502ea4770e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRows</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae38d270ddc4c8f7f48af6e56bf6328a4</anchor>
      <arglist>(const std::size_t &amp;nbRows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduced</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7ffd4dbcd5bb448ee47f8d079566b68b</anchor>
      <arglist>(const LinearConstraint &amp;lc, QuadraticProgram &amp;QPr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga67ee163c3c35c4fa2fb95724769906b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0bc3d9a2f736dc4c3332a08e4821e01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLLT</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga6e45821d1161199a8d8cd583723b9d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solve</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5158814cc80cec955e25215296c8a588</anchor>
      <arglist>(const LinearConstraint &amp;ce, const LinearConstraint &amp;ci)</arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>H</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae84e3e0239e366627df706ca4469ab99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>b</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gacfedf11f20288509ae16a160b4bc1dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bIsZero</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5f38e782312552c5bb255cdea14bba8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LLT_t</type>
      <name>llt</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaebee63495249a47719b152659d6ba1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>trace</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga60c06d0c87d64a52e0f1788effd12de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXi</type>
      <name>activeConstraint</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga75e792b0fd16f63b3471f8b131d5944b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>activeSetSize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae90925e3da34cfbc50911525507d3780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Decomposition_t</type>
      <name>dec</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa00e92533b986fa49f17cf2c23ba8a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xStar</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0c5592712fbc6720ae6e2caafde290bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduced</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7ffd4dbcd5bb448ee47f8d079566b68b</anchor>
      <arglist>(const LinearConstraint &amp;lc, QuadraticProgram &amp;QPr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga67ee163c3c35c4fa2fb95724769906b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0bc3d9a2f736dc4c3332a08e4821e01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLLT</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga6e45821d1161199a8d8cd583723b9d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solve</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5158814cc80cec955e25215296c8a588</anchor>
      <arglist>(const LinearConstraint &amp;ce, const LinearConstraint &amp;ci)</arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>H</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae84e3e0239e366627df706ca4469ab99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>b</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gacfedf11f20288509ae16a160b4bc1dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bIsZero</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5f38e782312552c5bb255cdea14bba8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LLT_t</type>
      <name>llt</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaebee63495249a47719b152659d6ba1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>trace</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga60c06d0c87d64a52e0f1788effd12de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXi</type>
      <name>activeConstraint</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga75e792b0fd16f63b3471f8b131d5944b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>activeSetSize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae90925e3da34cfbc50911525507d3780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Decomposition_t</type>
      <name>dec</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa00e92533b986fa49f17cf2c23ba8a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xStar</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0c5592712fbc6720ae6e2caafde290bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::RandomShortcut</name>
    <filename>a00082.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa40e85c38ecdd257bd36678ec541bf1e</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RandomShortcutPtr_t</type>
      <name>create</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a89c7ab5f7b390ddee89559be87284e85</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RandomShortcut</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae18daef120209ae06e54ef2b92d175c0</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shootTimes</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a993580840ab084bdb4407031047d4c75</anchor>
      <arglist>(const PathVectorPtr_t &amp;currentOpt, const value_type &amp;t0, value_type &amp;t1, value_type &amp;t2, const value_type &amp;t3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::RecursiveHermite</name>
    <filename>a00083.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::path::Hermite</type>
      <name>Hermite</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a592101d5e97ffe9073419799c9cf036d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::path::HermitePtr_t</type>
      <name>HermitePtr_t</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aab066dc12a643c6a1c8361bf8238e8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RecursiveHermitePtr_t</type>
      <name>create</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa9f7b9453e43297dd0ad80134f13a2aa</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RecursiveHermitePtr_t</type>
      <name>create</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>add4212957466c07d22f007f8cff7ff48</anchor>
      <arglist>(const Problem &amp;problem, const value_type &amp;step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a45a2b5bf37741614ee431d9559d71750</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RecursiveHermite</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a4a93a0804e64c9556c1ffef7ad801fbf</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, const value_type &amp;M, const value_type &amp;beta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>project</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6a014b97d1cea0f4814842ed7099e957</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;proj) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::ReedsShepp</name>
    <filename>a00084.html</filename>
    <base>hpp::core::steeringMethod::CarLike</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aca4c4ea6a5570553fbeb5e1fd26e8d6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a468746e1da311165e720c28a834c10f6</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>createWithGuess</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a98d7a1ccfd543e64ef098128858484ba</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>create</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a5cf0e7f7c27a3720efb7160dd11983cb</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels=std::vector&lt; JointPtr_t &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a3cf463b2fb686f1b81f899ab20cb87fa</anchor>
      <arglist>(const ReedsSheppPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ad14904e14096ad5406e4f5afa3adcfb7</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ac38debd0e232848c3cf281cfa86a896f</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a469ff149f0890fced16fae924af78c0b</anchor>
      <arglist>(const ReedsShepp &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a45e747f332f350f610c9eae31db5da80</anchor>
      <arglist>(ReedsSheppWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::distance::ReedsShepp</name>
    <filename>a00085.html</filename>
    <base>hpp::core::Distance</base>
    <member kind="function" virtualness="virtual">
      <type>virtual DistancePtr_t</type>
      <name>clone</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a6c3e3d5efee944e171c8e929402d3a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>create</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a5b4a1aece9d0e74d67bf004a694d1a58</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>create</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a1f25bfa69e0f15421472c3826cd36c69</anchor>
      <arglist>(const Problem &amp;problem, const value_type &amp;turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>affa5a25d7cb4a293557bc1459b2b50c0</anchor>
      <arglist>(const ReedsSheppPtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab2362cc535782c8d2623ef7a190b2ef0</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3d8709b2d2c04390c1efa4eed96ee9c0</anchor>
      <arglist>(const Problem &amp;problem, const value_type &amp;turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aedf910eba6e8784775b2b84f5c47949d</anchor>
      <arglist>(const ReedsShepp &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3ec37b09f6a095eb03833f647450f2e6</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a1f7de4b00ba908e723988ac0b079807d</anchor>
      <arglist>(const ReedsSheppWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ReedsSheppPath</name>
    <filename>a00086.html</filename>
    <base>hpp::core::PathVector</base>
    <member kind="typedef">
      <type>core::PathVector</type>
      <name>parent_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adcdeeab24af152eae72d953bac1ebb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReedsSheppPath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adb73457b0e5f493984ebe240fc8463d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a507fdad901a942239a9e19a1876f4abe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a988b1dc10ef51e27825c18a16477d025</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a664ad6dda0c159af48e07806cdcbdd00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ae87d319864ebe7fdea61e5163135dcdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a68715d286b37ec398e63c6ffd72cd4b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a2d75b2e81a8352907e6ea058b2df2375</anchor>
      <arglist>(const pinocchio::DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a874de805a3680b67b645819eacd9a576</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a42ddce969ee1e94a656df89b4e71633f</anchor>
      <arglist>(const ReedsSheppPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af3d3b2402bffc4ce1babf9bc09bdb2a9</anchor>
      <arglist>(const ReedsSheppPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a6fbb09bad37759e61e0e686471670562</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a668dd22d6c9058231742fb05983c2ed7</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1182acad496f2c631dad589b5c272de3</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type extraLength, value_type rho, size_type xyId, size_type rzId, const std::vector&lt; JointPtr_t &gt; wheels, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ac812b7196afcaf39fd7c7c213ccf8735</anchor>
      <arglist>(const ReedsSheppPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ad5a6cd6ca375e4101e1b0d3dfa9ffd20</anchor>
      <arglist>(const ReedsSheppPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a744faa2eae96321bc8472509e362d36b</anchor>
      <arglist>(ReedsSheppPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_derivative</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a205659037f38d1322e051e1fd961215a</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t, size_type order) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::RelativeMotion</name>
    <filename>a00087.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>RelativeMotionType</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constrained</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a21e42fac17793b726881b14541808e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Parameterized</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a321e5a0170b51d02940b8d1481d79538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unconstrained</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a79093f81645055375529f7c66f7995b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; RelativeMotionType, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aaff17241a9c8eb76eedfb81ae530293e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constrained</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a21e42fac17793b726881b14541808e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Parameterized</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a321e5a0170b51d02940b8d1481d79538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unconstrained</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a79093f81645055375529f7c66f7995b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static matrix_type</type>
      <name>matrix</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a09fe30e8a4ff83fa2d7ab0589bf72841</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fromConstraint</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a87381d65555c743220fc252ba0f39468</anchor>
      <arglist>(matrix_type &amp;matrix, const DevicePtr_t &amp;robot, const ConstraintSetPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recurseSetRelMotion</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a81c1f6c50a966cfa004bb6fb047ac99d</anchor>
      <arglist>(matrix_type &amp;matrix, const size_type &amp;i1, const size_type &amp;i2, const RelativeMotionType &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>idx</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ac17b6f34cb28674433f348fb9461dc90</anchor>
      <arglist>(const JointConstPtr_t &amp;joint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Roadmap</name>
    <filename>a00088.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aad2f12c329d25db8779fc98df97564bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ad7ca3b977a1371a781de1d6a5db16937</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab782f5e521d9792abe0544204284a1c8</anchor>
      <arglist>(const Configuration_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>nearestNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aeda44ab4d6c5d73dc2200cbd3095e639</anchor>
      <arglist>(const Configuration_t &amp;configuration, value_type &amp;minDistance, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>nearestNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa44a41dd516763c5731c1b26d218918f</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, value_type &amp;minDistance, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>nearestNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a7532b2a409bb2dfa07daf9a4d95e9958</anchor>
      <arglist>(const Configuration_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;minDistance, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>nearestNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a1c1d231fa9508183900f14c7f0f6a612</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;minDistance, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>Nodes_t</type>
      <name>nearestNodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a7b6eff62cbf332df6c7391579032120d</anchor>
      <arglist>(const Configuration_t &amp;configuration, size_type k)</arglist>
    </member>
    <member kind="function">
      <type>Nodes_t</type>
      <name>nearestNodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>af9afe6b296a44852eae6b6712ee51d72</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, size_type k)</arglist>
    </member>
    <member kind="function">
      <type>Nodes_t</type>
      <name>nearestNodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a92a1caf84145b0af416bc463a51f2519</anchor>
      <arglist>(const Configuration_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, size_type k)</arglist>
    </member>
    <member kind="function">
      <type>Nodes_t</type>
      <name>nearestNodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ae41e6a31bd2e039ac178530adec54485</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, size_type k)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNodeAndEdges</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aad937d559f96901500918364b947a3c6</anchor>
      <arglist>(const NodePtr_t from, const ConfigurationPtr_t &amp;to, const PathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNodeAndEdge</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aab107fe071c1a1fe99eeeedf01434e90</anchor>
      <arglist>(const NodePtr_t from, const ConfigurationPtr_t &amp;to, const PathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNodeAndEdge</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a221f93b9d2a039ff7f19f6e13a874cfc</anchor>
      <arglist>(const ConfigurationPtr_t &amp;from, const NodePtr_t to, const PathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type>EdgePtr_t</type>
      <name>addEdge</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a3a3e9b0ffaf0daaab80fdda429ebe105</anchor>
      <arglist>(const NodePtr_t &amp;n1, const NodePtr_t &amp;n2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdges</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a391f90d88a2f85fd54b2094ce5866480</anchor>
      <arglist>(const NodePtr_t from, const NodePtr_t &amp;to, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addGoalNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a83d022e0f8a57b0ef467e45baf0acfe0</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalNodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a62a7c44ee226bf2af35fe10f234d4e8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a4c3ff43684bff9dca71d875587021ccc</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Roadmap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aedc756b45b8b91f3990987bcf86b0ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathExists</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a63a3d2484a55f750922657c5911693ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Nodes_t &amp;</type>
      <name>nodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a7075d2e990840c1ea9c8975c4be7baf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges_t &amp;</type>
      <name>edges</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8faa6be27563e6d95f143075dbcb302e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>initNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a9dd3a1853399c7e9419758baa9d03995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeVector_t &amp;</type>
      <name>goalNodes</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa0deb09a55553bbbf8e54b3251dde4ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConnectedComponents_t &amp;</type>
      <name>connectedComponents</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a43dffded13728aaee09523e3d665b03f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NearestNeighborPtr_t</type>
      <name>nearestNeighbor</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a9c190d5cde6c4f7fd31c58bcd506ce19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestNeighbor</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aacd12245e4634a408277350d9650bdc6</anchor>
      <arglist>(NearestNeighborPtr_t nearestNeighbor)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a03b28795cb5c0f188cad84b99813b5f9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a654d75604faebf6cc00509528bc35b92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RoadmapPtr_t</type>
      <name>create</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aaf828e935a1bcca9a0debaa1104c6bbf</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Roadmap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ae59f5938ec5c75e3fdc32d0552527548</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addConnectedComponent</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5de1e70c45562c6d3122968ebc76a29c</anchor>
      <arglist>(const NodePtr_t &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>push_node</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a77e9331b299e9782d53094ec633eb2f1</anchor>
      <arglist>(const NodePtr_t &amp;n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addEdge</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aaf85e646056a70fb0fac21a41d9172a8</anchor>
      <arglist>(const EdgePtr_t &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NodePtr_t</type>
      <name>createNode</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa22fae8708f87015d564296a6bb1994c</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a371b3651b469c13242389c7627775891</anchor>
      <arglist>(RoadmapWkPtr_t weak)</arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a654d75604faebf6cc00509528bc35b92</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::parser::RoadmapFactory</name>
    <filename>a00089.html</filename>
    <base>hpp::util::parser::ObjectFactory</base>
    <member kind="typedef">
      <type>::hpp::util::parser::ObjectFactory</type>
      <name>Parent_t</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a8db7bec08c7b885dbf2937bc66fd623c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadmapFactory</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9553cac988b306dfbfdc08dac5784dfd</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap, const ProblemPtr_t &amp;problem, ObjectFactory *parent, const XMLElement *element)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>roadmap</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac53bdb69ee89095782f3c4312edf2a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>finishAttributes</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a0431b9ab76cb63610105a44d8ce694d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishTags</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a0416163b89a09eb3b8f7d2a0ab845a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadmapFactory</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ab22a2d1d2d9d21caf8ac7dadfb028b5a</anchor>
      <arglist>(const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap, ObjectFactory *parent=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectFactory *</type>
      <name>create</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>acd258e6495acf2bb58df77249b26a2c5</anchor>
      <arglist>(const RoadmapPtr_t &amp;r, const ProblemPtr_t &amp;p, ObjectFactory *parent, const XMLElement *el)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::SimpleShortcut</name>
    <filename>a00090.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a05d57c0e7f01874eb0165f86d51a028f</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleShortcutPtr_t</type>
      <name>create</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a9f1598263ac02649cfa12d150d356fb2</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleShortcut</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a43ab17c92768062849f65f6d969bbba1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::SimpleTimeParameterization</name>
    <filename>a00091.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>acd48e8934259a000d0971366b3cb4028</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleTimeParameterizationPtr_t</type>
      <name>create</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>acff24f03167ad9f4b13ee300811bdd8e</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleTimeParameterization</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a630bd5584c3e03a572195b4405828854</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Snibud</name>
    <filename>a00092.html</filename>
    <base>hpp::core::steeringMethod::CarLike</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a74e388c69ddffe084534e08c79855ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a5e2ca7d7c12bdbeffb964757de56b499</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnibudPtr_t</type>
      <name>createWithGuess</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>adb38cb69072b639d445e34c241eeb91d</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnibudPtr_t</type>
      <name>create</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a526f471c76f221353e65d7e582cdd096</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels=std::vector&lt; JointPtr_t &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SnibudPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a978bcc1309e1280aea62393a119e3533</anchor>
      <arglist>(const SnibudPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Snibud</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a71f0a097703ee83b8c85b98cd96d6bfe</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Snibud</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a9db6069e3b0f94e7bb31a2199f53ba6a</anchor>
      <arglist>(const Problem &amp;problem, const value_type turningRadius, JointPtr_t xyJoint, JointPtr_t rzJoint, std::vector&lt; JointPtr_t &gt; wheels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Snibud</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac4e3f321d4ce81c922ab5939d6dc7e08</anchor>
      <arglist>(const Snibud &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>af32125552e71af58917a4c30d71b77fd</anchor>
      <arglist>(SnibudWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousValidation::SolidSolidCollision</name>
    <filename>a00093.html</filename>
    <base>hpp::core::continuousValidation::BodyPairCollision</base>
    <member kind="function">
      <type>value_type</type>
      <name>computeMaximalVelocity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aebc92684756ffc3d6c1146d135410007</anchor>
      <arglist>(vector_t &amp;Vb) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeObjectTo_b</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a49ccd6eb1ce703e54f133182fbdeca27</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0884d487d62ff784b25af4b51f7f8b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a8dc4084367d3a5e56b5c0eac9ed3f7e9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisionPair</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a94138f8cf6b661810c5cfc13edbd3eaa</anchor>
      <arglist>(const CollisionObjectConstPtr_t &amp;left, const CollisionObjectConstPtr_t &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const CoefficientVelocities_t &amp;</type>
      <name>coefficients</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a1f492974d0c1fbcd62d0264713fcc554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint_a</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>af6846b61c01efbc6c5dae8d5c357056e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint_b</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ac5ebc42e5b10af1e5fae091a2b1a0be4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>indexJointA</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a4f0885f67121e83b3cde7677c353ac2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>indexJointB</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a8477d583eb1d8e4952bdaa9fa802c2f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BodyPairCollisionPtr_t</type>
      <name>copy</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>af6d7ee3e07a70352c859bd510b148ccb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SolidSolidCollisionPtr_t</type>
      <name>create</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a68c1a47fc615579083aa593534aff05e</anchor>
      <arglist>(const JointPtr_t &amp;joint_a, const ConstObjectStdVector_t &amp;objects_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SolidSolidCollisionPtr_t</type>
      <name>create</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a592f4bb68af756f24fb249bf4a534c2b</anchor>
      <arglist>(const JointPtr_t &amp;joint_a, const JointPtr_t &amp;joint_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SolidSolidCollision</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0da18bc9198f87a9750e4564cd0da2f2</anchor>
      <arglist>(const JointPtr_t &amp;joint_a, const JointPtr_t &amp;joint_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SolidSolidCollision</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a4819c5b23bd4c2ff9017c83460f14587</anchor>
      <arglist>(const JointPtr_t &amp;joint_a, const ConstObjectStdVector_t &amp;objects_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SolidSolidCollision</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>affc4e9b38b460ca398aaab6df94bbc12</anchor>
      <arglist>(const SolidSolidCollision &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Spline</name>
    <filename>a00094.html</filename>
    <templarg>_PolynomeBasis</templarg>
    <templarg>_SplineOrder</templarg>
    <base>hpp::core::SteeringMethod</base>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a1416ea5d1dca8bbdf7057229b98eee1ca495b8ea13af02b68c44ddf2ffae29072</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a1416ea5d1dca8bbdf7057229b98eee1cae6392ed271d26a8586578e773c4795fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>path::Spline&lt; PolynomeBasis, SplineOrder &gt;</type>
      <name>SplinePath</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aab1ce81c449ae40c2e72d325dfc187b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplinePath::Ptr_t</type>
      <name>SplinePathPtr_t</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a83baf6c2e95df8d8fbc5c04c39f5bf88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Spline &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aeee2b856d0875bbb9146cae6239589f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Spline &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a78e3cc1a1e14bdbfc5ad2629a4654e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a1416ea5d1dca8bbdf7057229b98eee1ca495b8ea13af02b68c44ddf2ffae29072</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a1416ea5d1dca8bbdf7057229b98eee1cae6392ed271d26a8586578e773c4795fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a9686e419bd3a233fc0b21c0d2d0e925f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a008175badd7e609d4cb2c512a45b8834</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a1da6fb4a8afb76a749d4ec18f8c477b0</anchor>
      <arglist>(ConfigurationIn_t q1, std::vector&lt; int &gt; order1, matrixIn_t derivatives1, ConfigurationIn_t q2, std::vector&lt; int &gt; order2, matrixIn_t derivatives2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a41069d97985f01302c2cc0b9fedd47bc</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>createCopy</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa9fa9f02921afc0956e71c53deb4dae9</anchor>
      <arglist>(const Ptr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa9a0b2885c146d3d7a551d65b5646d14</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa700be5ae01584da49602e990973abfa</anchor>
      <arglist>(const Spline &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a41545706151e680542d16f1315f68e40</anchor>
      <arglist>(WkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::path::Spline</name>
    <filename>a00095.html</filename>
    <templarg>_PolynomeBasis</templarg>
    <templarg>_Order</templarg>
    <base>hpp::core::Path</base>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461ad028a2b93b92a07987e835c98866ba23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Order</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461ae1956b258fa6139a7937e66a3662cfe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NbCoeffs</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461a68dcc012029e39e18619f471ccac2cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NbPowerOfT</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461a0d5fae9dd01995e63d6f0ca2ae4191a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::sbf_traits&lt; PolynomeBasis, Order &gt;</type>
      <name>sbf_traits</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af0510e6896858a8e2e5ffeac035d917b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::spline_basis_function&lt; PolynomeBasis, Order &gt;</type>
      <name>BasisFunction_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac4b2d29a842b9b9ffe8048d394873c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, NbPowerOfT, 1 &gt;</type>
      <name>PowersOfT_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a2e18f10b0ddcd3efe9296def6c8c7d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sbf_traits::Coeffs_t</type>
      <name>BasisFunctionVector_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aa93bcb164888910f0e1ff60ce91d7538</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sbf_traits::IntegralCoeffs_t</type>
      <name>BasisFunctionIntegralMatrix_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a63d560098a576cb372ff32d50571561b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, NbCoeffs, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>ParameterMatrix_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a04d445d26628ae67470826d558f1ac95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; const vector_t, Eigen::Aligned &gt;</type>
      <name>ConstParameterVector_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7ca9c6e9cf1c4256c60e9778e90ef9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; vector_t, Eigen::Aligned &gt;</type>
      <name>ParameterVector_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aaf5f1830ed91c89d4ec92098617f1268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Spline &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9f060aee14a3e066018161f1744f1075</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Spline &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4859dedec177dddef1fb664ced3ce2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461ad028a2b93b92a07987e835c98866ba23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Order</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461ae1956b258fa6139a7937e66a3662cfe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NbCoeffs</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461a68dcc012029e39e18619f471ccac2cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NbPowerOfT</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461a0d5fae9dd01995e63d6f0ca2ae4191a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>parameterSize</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a788fe48dbcd71e5bbd078ed112f5e137</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterDerivativeCoefficients</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3b92e6922b5ecb41affcdbe1b721c96c</anchor>
      <arglist>(vectorOut_t res, const value_type &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterIntegrate</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a24175e22966472851d903039dbd3686a</anchor>
      <arglist>(vectorIn_t dParam)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>squaredNormIntegral</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0ba5093df4ddf0e7264b00dedfb769f4</anchor>
      <arglist>(const size_type order) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squaredNormIntegralDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac616cdfdf024f7e03a935bd42e44311e</anchor>
      <arglist>(const size_type order, vectorOut_t res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1e1b0f8446058ee7adffcbb11f486a89</anchor>
      <arglist>(const size_type order, const value_type &amp;u, BasisFunctionVector_t &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a11ea0e642718ee2361425d8a14889812</anchor>
      <arglist>(const size_type order, const value_type &amp;u, vectorOut_t res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxVelocity</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5d371eea0fe82ee4f2d6f5307cd2d339</anchor>
      <arglist>(vectorOut_t res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squaredNormBasisFunctionIntegral</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab97f2595eef432f355df956774b0f036</anchor>
      <arglist>(const size_type order, BasisFunctionIntegralMatrix_t &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squaredNormBasisFunctionIntegral</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a95bddc309a71c27a1540b8b391ff25b5</anchor>
      <arglist>(const size_type order, matrixOut_t res) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a18a6c04298d7f566c8786f245dd49780</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3482ee33ecfb8e932b9005ba0ac7879a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Configuration_t &amp;</type>
      <name>base</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1f6f6e992a782f53b9db005f30bd39e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a052f539ea736edcf6b0c34dd065742f4</anchor>
      <arglist>(const Configuration_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const ParameterMatrix_t &amp;</type>
      <name>parameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a29ea8ed3721617c273c177e8045178a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a928a555e2884a8eb44b348435967c219</anchor>
      <arglist>(const ParameterMatrix_t &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>ConstParameterVector_t</type>
      <name>rowParameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5f3b35225ad42fd83d90a8659b3797de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowParameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9bb26f1def5dbfcb95372787fd59faf7</anchor>
      <arglist>(vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7db1392ed3a5e39d5e4879f9e2c53375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acf9a9487f01cfb1229719387e4a8a5ce</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a51fce667800a47b5b08a48fe83da0a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timeFreeBasisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad74fd959bf1d39525b32ea953c2e65f9</anchor>
      <arglist>(const size_type order, const value_type &amp;u, BasisFunctionVector_t &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timeFreeBasisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a745eb719c4ffa6363dc3cddadf5445a4</anchor>
      <arglist>(const size_type order, const value_type &amp;u, vectorOut_t res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4b8cb4bba76319b68dc6de90c80f8422</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const interval_t &amp;interval, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>value</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>accfe3faa37067003467e26f135cfdb8f</anchor>
      <arglist>(pinocchio::LiegroupElementConstRef base, Eigen::Ref&lt; const ParameterMatrix_t &gt; params, const value_type &amp;u, ConfigurationOut_t config, vectorOut_t velocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab76e47a3bebd46e363245e23532ec73e</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const interval_t &amp;interval, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3e42a0ac211a49e664d11862280ee96e</anchor>
      <arglist>(const Spline &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aefc48ddcfa878a2d55b8e890674fae88</anchor>
      <arglist>(const Spline &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae35dcb1305434c31bfff5f3da810ac97</anchor>
      <arglist>(const Ptr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab4b3c53d1e2f998fa1713e59234186b4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_compute</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae33e0b98f9f322aa14d400607037a9f7</anchor>
      <arglist>(ConfigurationOut_t configuration, value_type t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_derivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a215e8739fa6be81bf6ebbe1c0981dc2e</anchor>
      <arglist>(vectorOut_t res, const value_type &amp;t, size_type order) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_paramDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a097b8c06cce41d05de1fd432e5d3ed64</anchor>
      <arglist>(vectorOut_t res, const value_type &amp;t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_paramIntegrate</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a63c590119809df93a4c047034beb05b8</anchor>
      <arglist>(vectorIn_t dParam)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_velocityBound</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8dfabdee095a502006e412f9d97b550a</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t0, const value_type &amp;t1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>parameterSize_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af0d5496422b9706061ab2cb39ba3520c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab3a92f48bdd12a8530a68c2a3d2f0870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LiegroupElement</type>
      <name>base_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab101a06c1d78bf35f1a1207955281a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterMatrix_t</type>
      <name>parameters_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5b2498238aea5a69702c60dfc1c708fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>steeringMethod::Spline&lt; _PolynomeBasis, _Order &gt;</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acf19c1171f3881880c18f75b627dfb19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; BernsteinBasis, 3 &gt;</name>
    <filename>a00095.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>internal::sbf_traits&lt; PolynomeBasis, Order &gt;</type>
      <name>sbf_traits</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af0510e6896858a8e2e5ffeac035d917b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::spline_basis_function&lt; PolynomeBasis, Order &gt;</type>
      <name>BasisFunction_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac4b2d29a842b9b9ffe8048d394873c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, NbPowerOfT, 1 &gt;</type>
      <name>PowersOfT_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a2e18f10b0ddcd3efe9296def6c8c7d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sbf_traits::Coeffs_t</type>
      <name>BasisFunctionVector_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aa93bcb164888910f0e1ff60ce91d7538</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sbf_traits::IntegralCoeffs_t</type>
      <name>BasisFunctionIntegralMatrix_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a63d560098a576cb372ff32d50571561b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, NbCoeffs, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>ParameterMatrix_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a04d445d26628ae67470826d558f1ac95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; const vector_t, Eigen::Aligned &gt;</type>
      <name>ConstParameterVector_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7ca9c6e9cf1c4256c60e9778e90ef9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Map&lt; vector_t, Eigen::Aligned &gt;</type>
      <name>ParameterVector_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aaf5f1830ed91c89d4ec92098617f1268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Spline &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9f060aee14a3e066018161f1744f1075</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Spline &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4859dedec177dddef1fb664ced3ce2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461ad028a2b93b92a07987e835c98866ba23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Order</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461ae1956b258fa6139a7937e66a3662cfe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NbCoeffs</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461a68dcc012029e39e18619f471ccac2cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NbPowerOfT</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abfad9f5616ee64cfbdb7ac7d57720461a0d5fae9dd01995e63d6f0ca2ae4191a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>parameterSize</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a788fe48dbcd71e5bbd078ed112f5e137</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterDerivativeCoefficients</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3b92e6922b5ecb41affcdbe1b721c96c</anchor>
      <arglist>(vectorOut_t res, const value_type &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameterIntegrate</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a24175e22966472851d903039dbd3686a</anchor>
      <arglist>(vectorIn_t dParam)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>squaredNormIntegral</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0ba5093df4ddf0e7264b00dedfb769f4</anchor>
      <arglist>(const size_type order) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squaredNormIntegralDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac616cdfdf024f7e03a935bd42e44311e</anchor>
      <arglist>(const size_type order, vectorOut_t res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1e1b0f8446058ee7adffcbb11f486a89</anchor>
      <arglist>(const size_type order, const value_type &amp;u, BasisFunctionVector_t &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a11ea0e642718ee2361425d8a14889812</anchor>
      <arglist>(const size_type order, const value_type &amp;u, vectorOut_t res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxVelocity</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5d371eea0fe82ee4f2d6f5307cd2d339</anchor>
      <arglist>(vectorOut_t res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squaredNormBasisFunctionIntegral</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab97f2595eef432f355df956774b0f036</anchor>
      <arglist>(const size_type order, BasisFunctionIntegralMatrix_t &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>squaredNormBasisFunctionIntegral</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a95bddc309a71c27a1540b8b391ff25b5</anchor>
      <arglist>(const size_type order, matrixOut_t res) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a18a6c04298d7f566c8786f245dd49780</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3482ee33ecfb8e932b9005ba0ac7879a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Configuration_t &amp;</type>
      <name>base</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1f6f6e992a782f53b9db005f30bd39e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>base</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a052f539ea736edcf6b0c34dd065742f4</anchor>
      <arglist>(const Configuration_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const ParameterMatrix_t &amp;</type>
      <name>parameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a29ea8ed3721617c273c177e8045178a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a928a555e2884a8eb44b348435967c219</anchor>
      <arglist>(const ParameterMatrix_t &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>ConstParameterVector_t</type>
      <name>rowParameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5f3b35225ad42fd83d90a8659b3797de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowParameters</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9bb26f1def5dbfcb95372787fd59faf7</anchor>
      <arglist>(vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7db1392ed3a5e39d5e4879f9e2c53375</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acf9a9487f01cfb1229719387e4a8a5ce</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a51fce667800a47b5b08a48fe83da0a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timeFreeBasisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad74fd959bf1d39525b32ea953c2e65f9</anchor>
      <arglist>(const size_type order, const value_type &amp;u, BasisFunctionVector_t &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timeFreeBasisFunctionDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a745eb719c4ffa6363dc3cddadf5445a4</anchor>
      <arglist>(const size_type order, const value_type &amp;u, vectorOut_t res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4b8cb4bba76319b68dc6de90c80f8422</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const interval_t &amp;interval, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>value</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>accfe3faa37067003467e26f135cfdb8f</anchor>
      <arglist>(pinocchio::LiegroupElementConstRef base, Eigen::Ref&lt; const ParameterMatrix_t &gt; params, const value_type &amp;u, ConfigurationOut_t config, vectorOut_t velocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab76e47a3bebd46e363245e23532ec73e</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const interval_t &amp;interval, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3e42a0ac211a49e664d11862280ee96e</anchor>
      <arglist>(const Spline &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Spline</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aefc48ddcfa878a2d55b8e890674fae88</anchor>
      <arglist>(const Spline &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae35dcb1305434c31bfff5f3da810ac97</anchor>
      <arglist>(const Ptr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab4b3c53d1e2f998fa1713e59234186b4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_compute</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae33e0b98f9f322aa14d400607037a9f7</anchor>
      <arglist>(ConfigurationOut_t configuration, value_type t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_derivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a215e8739fa6be81bf6ebbe1c0981dc2e</anchor>
      <arglist>(vectorOut_t res, const value_type &amp;t, size_type order) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_paramDerivative</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a097b8c06cce41d05de1fd432e5d3ed64</anchor>
      <arglist>(vectorOut_t res, const value_type &amp;t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_paramIntegrate</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a63c590119809df93a4c047034beb05b8</anchor>
      <arglist>(vectorIn_t dParam)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_velocityBound</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8dfabdee095a502006e412f9d97b550a</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t0, const value_type &amp;t1) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>parameterSize_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af0d5496422b9706061ab2cb39ba3520c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab3a92f48bdd12a8530a68c2a3d2f0870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LiegroupElement</type>
      <name>base_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ab101a06c1d78bf35f1a1207955281a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterMatrix_t</type>
      <name>parameters_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5b2498238aea5a69702c60dfc1c708fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::SplineGradientBased</name>
    <filename>a00096.html</filename>
    <templarg>_PolynomeBasis</templarg>
    <templarg>_SplineOrder</templarg>
    <base>hpp::core::pathOptimization::SplineGradientBasedAbstract</base>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4ba5168e76eaee71986304d9d0845058fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4baaa0359ed771fd30baa08b8335a2765c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineGradientBasedAbstract&lt; _PolynomeBasis, _SplineOrder &gt;</type>
      <name>Base</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaf07b1f6a1efe400edce57a0132ef980d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SplineGradientBased &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae44de55487524b7ab6f8dd9cc52975c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>path::Spline&lt; PolynomeBasis, SplineOrder &gt;</type>
      <name>Spline</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a7d1e911c161fc650701ebb12380234fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline::Ptr_t</type>
      <name>SplinePtr_t</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae6483158f52d16317efc9af6fcf83432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SplinePtr_t &gt;</type>
      <name>Splines_t</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a7b791d1140f1697080f818fd58126aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4ba5168e76eaee71986304d9d0845058fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4baaa0359ed771fd30baa08b8335a2765c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0f3fcb900ba0e6a99849bd6b6721df90</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga55fd1d5ef934062c666b9d3dfabe9645</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab6fd581843397ec4c2ada24cc27d1eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; SplineOptimizationData &gt;</type>
      <name>SplineOptimizationDatas_t</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab2f08e85a140533ca1b1299b2236e595</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SplineGradientBased</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab198df2dd7e22ce0c96fcb8ca7387ce9</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addProblemConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga041a7de312634005b269e68a9c7593ae</anchor>
      <arglist>(const PathVectorPtr_t &amp;init, const Splines_t &amp;splines, LinearConstraint &amp;lc, SplineOptimizationDatas_t &amp;sods) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addProblemConstraintOnPath</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gabad5a01bb7b7b997ba5f01ec1918fc79</anchor>
      <arglist>(const PathPtr_t &amp;path, const size_type &amp;idxSpline, const SplinePtr_t &amp;spline, LinearConstraint &amp;lc, SplineOptimizationData &amp;sod) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>computeActiveParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3c11dd21e01d2b38732d30fb830577f1</anchor>
      <arglist>(const PathPtr_t &amp;path, const constraints::solver::BySubstitution &amp;hs, const value_type &amp;guessThr=-1, const bool &amp;useExplicitInput=false) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checkOptimum_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa411fd04af461526f9631802d02fe503</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addProblemConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga041a7de312634005b269e68a9c7593ae</anchor>
      <arglist>(const PathVectorPtr_t &amp;init, const Splines_t &amp;splines, LinearConstraint &amp;lc, SplineOptimizationDatas_t &amp;sods) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addProblemConstraintOnPath</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gabad5a01bb7b7b997ba5f01ec1918fc79</anchor>
      <arglist>(const PathPtr_t &amp;path, const size_type &amp;idxSpline, const SplinePtr_t &amp;spline, LinearConstraint &amp;lc, SplineOptimizationData &amp;sod) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>computeActiveParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3c11dd21e01d2b38732d30fb830577f1</anchor>
      <arglist>(const PathPtr_t &amp;path, const constraints::solver::BySubstitution &amp;hs, const value_type &amp;guessThr=-1, const bool &amp;useExplicitInput=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::SplineGradientBasedAbstract</name>
    <filename>a00097.html</filename>
    <templarg>_PolynomeBasis</templarg>
    <templarg>_SplineOrder</templarg>
    <base>hpp::core::PathOptimizer</base>
    <class kind="struct">hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData</class>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3acf673f4401cd742b99e6ea82e8618665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3a534f487e1fdd513b83e49ec3bce85d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>path::Spline&lt; PolynomeBasis, SplineOrder &gt;</type>
      <name>Spline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7d1e911c161fc650701ebb12380234fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline::Ptr_t</type>
      <name>SplinePtr_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae6483158f52d16317efc9af6fcf83432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SplinePtr_t &gt;</type>
      <name>Splines_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7b791d1140f1697080f818fd58126aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3acf673f4401cd742b99e6ea82e8618665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3a534f487e1fdd513b83e49ec3bce85d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SplineGradientBasedAbstract</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga1334932f5adc317c6830cc5d819ce12c</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathVectorPtr_t</type>
      <name>buildPathVector</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga81a8fdfbf9a44736327180c95eba8d38</anchor>
      <arglist>(const Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae9fe98ae8d16357b0e44a0e99776a690</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gac860589bf2bc9b49d572ecc8802eac78</anchor>
      <arglist>(const Splines_t &amp;in, Splines_t &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interpolate</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga4915ada97b7f5db2926044422d266d15</anchor>
      <arglist>(const Splines_t &amp;a, const Splines_t &amp;b, const value_type &amp;alpha, Splines_t &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSplines</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5e4595e61ea8312879f6229c50fe3a86</anchor>
      <arglist>(Splines_t &amp;spline, const vector_t &amp;param) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga37a1c231cc744c46a0deceaef9881c32</anchor>
      <arglist>(vector_t &amp;param, const Splines_t &amp;spline) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>steeringMethod::Spline&lt; PolynomeBasis, SplineOrder &gt;</type>
      <name>SSM_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaca3fd6ec0371757a6025f6da00d338c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SSM_t::Ptr_t</type>
      <name>steeringMethod_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga967a141b92dce2d5981f976fab569c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendEquivalentSpline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga094020303d44df3d81267bd2a8e21804</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendEquivalentSpline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3f800b59d36f40b666167da72e36d628</anchor>
      <arglist>(const InterpolatedPathPtr_t &amp;path, Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendEquivalentSpline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8da8342769531d20cba8464b4acbfeda</anchor>
      <arglist>(const PathVectorPtr_t &amp;path, Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>cleanInput</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga149c53678137270d8bcf568e507fc118</anchor>
      <arglist>(const PathVectorPtr_t &amp;input)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::pair&lt; PathValidationReportPtr_t, std::size_t &gt; &gt;</type>
      <name>Reports_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga58f41044b3dacd041ce25a70f69d1ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PathValidationPtr_t &gt;</type>
      <name>validations_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga89e1dab1036585aa80be1c5d3d4d4d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePathValidation</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gad4cfd42d5f0fb64975e3e729c8d920e0</anchor>
      <arglist>(const Splines_t &amp;splines)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Reports_t</type>
      <name>validatePath</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8d2c8833bbd2ead3dd776b379e14a240</anchor>
      <arglist>(const Splines_t &amp;splines, std::vector&lt; std::size_t &gt; &amp;reordering, bool stopAtFirst, bool reorder) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab6fd581843397ec4c2ada24cc27d1eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>Bools_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga15f721896fc3c1e4114484c50ca6bbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; size_type &gt;</type>
      <name>Indices_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gad989bed1d9367c7be3e11628b9999b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; SplineOptimizationData &gt;</type>
      <name>SplineOptimizationDatas_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab2f08e85a140533ca1b1299b2236e595</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>jointBoundConstraint</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga4db2d57603f1e30939813757ecfe793e</anchor>
      <arglist>(const Splines_t &amp;splines, LinearConstraint &amp;lc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>addBoundConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga4187212fc7501a4a7b071ae718f52e6e</anchor>
      <arglist>(const Indices_t &amp;bci, const LinearConstraint &amp;bc, Bools_t &amp;activeConstraint, LinearConstraint &amp;constraint) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Indices_t</type>
      <name>validateBounds</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa58dcf247ea28123582cca4a857734ef</anchor>
      <arglist>(const Splines_t &amp;splines, const LinearConstraint &amp;lc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addContinuityConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5385d29459c330d48821324e32c92fa5</anchor>
      <arglist>(const Splines_t &amp;splines, const size_type maxOrder, const SplineOptimizationDatas_t &amp;ess, LinearConstraint &amp;continuity)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData</name>
    <filename>a00098.html</filename>
    <member kind="function">
      <type></type>
      <name>SplineOptimizationData</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gabce3427d6b8ebb46692eb1ba2dd4c458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineOptimizationData</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab1359f5ceb480f031b4d422beed001b9</anchor>
      <arglist>(size_type rDof)</arglist>
    </member>
    <member kind="variable">
      <type>ConstraintSetPtr_t</type>
      <name>set</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga66c84d20a3e6bcdf30f1f84d049a7a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; constraints::ExplicitConstraintSet &gt;</type>
      <name>es</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gad86ff7f9858a5e441a2f13c635e1c54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowBlockIndices</type>
      <name>activeParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaf1eb41569ba45624728f446b3cfca5d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::SteeringMethod</name>
    <filename>a00099.html</filename>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>operator()</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa3c93a56061a1eaa74024d3cc3c73f6a</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a88913eec475d5d8343bfa5d908c5f72b</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringMethod</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a1e3bd7aabdaed3bbef13c90c64172c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a6b03c440b79161815a4e174a94ea0d58</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a22578d5cbccac9250bd6134e13aa1f2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>adc84b1c5d4556d8ab629d1d0e1b179cd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a7d3c1cb0cc81e04631ded7e6a48d235e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethod</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a0745d19ebc8e83a7588ad93129e1637f</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethod</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ade8322c059667799aa9cfab22677f085</anchor>
      <arglist>(const SteeringMethod &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ab7b86ebf4fe65cafed7c440ec5de912a</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a749f8ef065d2e8e5caf4c23f9a9e686e</anchor>
      <arglist>(SteeringMethodWkPtr_t weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Problem &amp;</type>
      <name>problem_</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a667be7132af9343dfea2ef2708c2903a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>adc84b1c5d4556d8ab629d1d0e1b179cd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a7d3c1cb0cc81e04631ded7e6a48d235e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Straight</name>
    <filename>a00100.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gacf8a20bddd555cbd195199b3bf73b61f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ga3d78f75cb1027e8b8ea024c884af442f</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPtr_t</type>
      <name>create</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ga4e19325ce22cffc20ff600c4d65b4a24</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gaa14e75273d94f72c4d7f5a177644e709</anchor>
      <arglist>(const StraightPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Straight</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gaf7fdc313898160a5fcf7bfd29f521430</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Straight</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gab7176799b67f8820bb88ddfdfbded81b</anchor>
      <arglist>(const Straight &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ga5e0db5b11c6e6ec6314cbc4ceb354510</anchor>
      <arglist>(StraightWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::StraightPath</name>
    <filename>a00101.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a9776905b6ebe55b430db6fae3afdc45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a065b789045c5b976bd99709445a2d1d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aaa4037bf27eb84cbd9a8863f3e311092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a569ce155cc4ff270c8e48b0ede43d723</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialConfig</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad6c73fdd844e4f323b44478d64ff71e8</anchor>
      <arglist>(ConfigurationIn_t initial)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endConfig</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a1df6c200e533e84505c89e03aed7461e</anchor>
      <arglist>(ConfigurationIn_t end)</arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ac15ef6b3669525577602e4b42f37faf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>adf1c98c798ea629c42a752e3f1be7885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a170a27959c11de721d9dd42052e07114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa0b1904c30f6dc560aefd39d98a507f4</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a782a016ab7730922f3028286bef90725</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, interval_t interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aaca5d5397be998d13a35c74535c9caac</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3d3e2b5d8209b168db37af78036e769e</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, interval_t interval, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a80f20094469f2f6aa65ab6b219fc4c72</anchor>
      <arglist>(const StraightPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aeb4a6cb8c183f4f2941068a1aec41667</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>afc5fe957c71fd29dcb68e74a165a5fc4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad4508463491bb63ce622ee5f593b5feb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a6c0df510334d17fde0a4b77175db53c5</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, interval_t interval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a4ca48861398d927f5c50bde18925676a</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a69e9402e22556b1dfb2ecb6ea38ace72</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, interval_t interval, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a110ec072d954898dc83e8c9803197ed6</anchor>
      <arglist>(const StraightPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a36c6c4c5b59eea103a0c8d578753afc1</anchor>
      <arglist>(const StraightPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a31c0ab2fbe891c03beb7a933f13095f6</anchor>
      <arglist>(StraightPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3cb8c7016a807c6f80b9fcae12ef2b12</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_derivative</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>afe68f2c8fb46199d0ba4b39adc0869ee</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;t, size_type order) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_velocityBound</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a7f8d0c20b8c2345e6f41fd2595637607</anchor>
      <arglist>(vectorOut_t result, const value_type &amp;, const value_type &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>impl_extract</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a9db26a59d3702585bd1b3ca46f2b3d9f</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>device_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a7575e9a837242a06cc146d252826559b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Configuration_t</type>
      <name>initial_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a00e12341e667fc22969b8ffba989b3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Configuration_t</type>
      <name>end_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a890b775e1d0cb00638436275aa2ff691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::SubchainPath</name>
    <filename>a00102.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a87570da5ccafe4bbefc025be68299a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubchainPath</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a730af324fedd649244b7e7774a2111f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>add0e6482390123b442b15c90d342c3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ad0a07482c5e72be5ac70db52f51041dc</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aff9ec765c0b15318b9811a9e53d79138</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ab61af2ef3bb2b82ec5203a60d1de53cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a0245867a3d588f31d992faa8da870af7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dofExtract</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a1ff6c5805318f3acba2d801fe625d41a</anchor>
      <arglist>(ConfigurationIn_t qin, ConfigurationOut_t qout) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SubchainPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a80c769469263d5a777e1a56d8a8a60f0</anchor>
      <arglist>(const PathPtr_t &amp;original, const segments_t &amp;confIntervals, const segments_t &amp;velIntervals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SubchainPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a214e86d0717c6e97c763a95024196e6c</anchor>
      <arglist>(const SubchainPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SubchainPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a3ac24e5ef864db73afbb867b24a2d546</anchor>
      <arglist>(const SubchainPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ad0d75c163ebe4c0838d7a32b771b66f9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubchainPath</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a94a51e736d7ab0cebbbfe54bb5b4cb8f</anchor>
      <arglist>(const PathPtr_t &amp;original, const segments_t &amp;confIntervals, const segments_t &amp;velIntervals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubchainPath</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a818a0bde6943fc940ec28f624f7548b2</anchor>
      <arglist>(const SubchainPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubchainPath</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a77684e207f9de1a38a4a1d139b2cd194</anchor>
      <arglist>(const SubchainPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>acaa2f558f31bf22faccd7c276dd2cb55</anchor>
      <arglist>(SubchainPathPtr_t self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::problemTarget::TaskTarget</name>
    <filename>a00103.html</filename>
    <base>hpp::core::ProblemTarget</base>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afbc20b0080094c3209d2ef82fd4a2b85</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a77bcfd1795a2ed3499fe84c21cf099ed</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const </arglist>
    </member>
    <member kind="function">
      <type>PathVectorPtr_t</type>
      <name>computePath</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a60da0268449ea3bd47c2cbcaebf977f9</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5ae14d65c848cefb710e827747f9bead</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskTargetPtr_t</type>
      <name>create</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4ee03f187c235720394f555dd2d246d7</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskTarget</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae48c80307d8601844386c65bc7957998</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::TimeParameterization</name>
    <filename>a00104.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual value_type</type>
      <name>value</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a5aa70c7782179754c249919f9271d8aa</anchor>
      <arglist>(const value_type &amp;t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual value_type</type>
      <name>derivative</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a3bcaa776a2212e57cc12635825ad0f5d</anchor>
      <arglist>(const value_type &amp;t, const size_type &amp;order) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>derivativeBound</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0e6f0b9fcd1e6e850f6f9f206461014e</anchor>
      <arglist>(const value_type &amp;low, const value_type &amp;up) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimeParameterizationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a961851e3af0d8763b35dbe1929e9c47e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::configurationShooter::Uniform</name>
    <filename>a00105.html</filename>
    <base>hpp::core::ConfigurationShooter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shoot</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>adc4aa2683e94b89db070102cca0edacf</anchor>
      <arglist>(Configuration_t &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleExtraDOF</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aa23a34338d8331a21107bec3f5420e97</anchor>
      <arglist>(bool sampleExtraDOF)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UniformPtr_t</type>
      <name>create</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a6dbbdb7900771da32924cf30ff45fb94</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Uniform</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ab0b15d9daec3e1662ccb3d3d8253dfbd</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a51a8358ef3a137a6913f89c6769cd50c</anchor>
      <arglist>(const UniformPtr_t &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ValidationReport</name>
    <filename>a00106.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValidationReport</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a6d1626fbbc17c0067f20f5b52ea0cbef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aefd84cfadd47c57889036feb08717b5f</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::VisibilityPrmPlanner</name>
    <filename>a00107.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae4c7e70369bf3606fc54a12b1f41f334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VisibilityPrmPlannerPtr_t</type>
      <name>createWithRoadmap</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a8652c7b488cbaabe87a99a96c8f5388d</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VisibilityPrmPlannerPtr_t</type>
      <name>create</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a87d07a3d255d01ee0342ad657a2acf6b</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VisibilityPrmPlanner</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>adb7fef8dc0cc5b16b5588bf21f5d5619</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VisibilityPrmPlanner</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aa1b8c00ebde4d0a20b7f186ec1d765c1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>acb71c705c8fbfef51baa4a0c7c30a55a</anchor>
      <arglist>(const VisibilityPrmPlannerWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::WeighedDistance</name>
    <filename>a00108.html</filename>
    <base>hpp::core::Distance</base>
    <member kind="function" virtualness="virtual">
      <type>virtual DistancePtr_t</type>
      <name>clone</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a859f1c9d08195886f9959f7cd0b6a098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getWeight</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a982dabd948ba967a5f437b0494a58cfc</anchor>
      <arglist>(size_type rank) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ab6419b10b994006153e6c4b817afab15</anchor>
      <arglist>(size_type rank, value_type weight)</arglist>
    </member>
    <member kind="function">
      <type>const vector_t &amp;</type>
      <name>weights</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a985ab29bf97b6f987836945aaf80482f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weights</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>acb4cc997961abd9fbc18c76427028243</anchor>
      <arglist>(const vector_t &amp;ws)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a16896a47821652df42ac3de4b38b7d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af9aa1458a1c08043bfb30b823c29f11e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>createFromProblem</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a89757f265455c4c0f03ed53ad2c8b114</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>create</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa001fa0a8329774bad4daa215d7ecc99</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>createWithWeight</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a57140ed9d97f27690566e01874bc1359</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const vector_t &amp;weights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a019b7e5bd1fee849df639955ece47af6</anchor>
      <arglist>(const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a234c6eb27fcb1ea189d4770de104b1bc</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a4e9fbb3a7dc7833c496a2f4488989d87</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8e3378838d0003515ee69002539c7cfa</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const vector_t &amp;weights)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a4caa9983f16de0c11f0e5ff5e1ffe18c</anchor>
      <arglist>(const WeighedDistance &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae33666a9326242b492cc0d343fa6e337</anchor>
      <arglist>(WeighedDistanceWkPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aba1bb92a19c1e251ccc2a44468819dda</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>a00213.html</filename>
    <class kind="struct">Eigen::NumTraits&lt; hpp::core::RelativeMotion::RelativeMotionType &gt;</class>
    <member kind="typedef">
      <type>const Rhs_t::template block_t&lt; typename Rhs_t::ArgType &gt;::type</type>
      <name>BlockRhs</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a04bafbb03f83a0026b2259d79215e47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; BinaryOp, BlockLhs, BlockRhs &gt;</type>
      <name>BlockCwiseBOp</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a136165c4957273abb92c90efd04aec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; false, true &gt;</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga7c6741f034c1372efff96c61b7c8281e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; true, false &gt;</type>
      <name>ColBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga948a870b59cb5a3c12ff80cb31c9badb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_EIGEN_SPECIALIZE_CwiseBinaryOpImpl</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a455473d276e8fafb59ca19323aa4c790</anchor>
      <arglist>(HPP_EIGEN_LHS_TPL, HPP_EIGEN_LHS_TYPE, HPP_EIGEN_RHS_TPL, HPP_EIGEN_RHS_TYPE) HPP_EIGEN_DEFINE_CwiseBinaryOpImpl_evalTo(HPP_EIGEN_LHS_TPL</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1defb78d5021f9ea2229a1e9d77ae70e</anchor>
      <arglist>(typename Rhs_t::block_iterator block(d.rhs());block.valid();++block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a91a95221b01fa91e9d6b789be015d3bf</anchor>
      <arglist>(typename Lhs_t::block_iterator block(d.lhs());block.valid();++block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9d69e0c2c91cb3e898a48e6b869fb64d</anchor>
      <arglist>(d.lhs()._blocks()==d.rhs()._blocks())</arglist>
    </member>
    <member kind="function">
      <type>Lhs_t::block_iterator</type>
      <name>lblock</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1675bd9ae3066b37481dd7a4d7dd1192</anchor>
      <arglist>(d.lhs())</arglist>
    </member>
    <member kind="function">
      <type>Rhs_t::block_iterator</type>
      <name>rblock</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad7a774495fbc2de7c72f84eaf29db0c3</anchor>
      <arglist>(d.rhs())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9b82b351ed1d37bb3de5431ed31aa6a2</anchor>
      <arglist>(lblock.valid())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a340d193f3f94af5b49178ae421dd8b52</anchor>
      <arglist>(!lblock.valid()&amp;&amp;!rblock.valid())</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac632f65a14cfc732dc2172eb700c6b1e</anchor>
      <arglist>(std::ostream &amp;os, const MatrixBlocksBase&lt; Derived &gt; &amp;mbi)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_LHS_TYPE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad98a17081a40df1e3f51d2821875b8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_RHS_TPL</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a114c61b6d72148837113eda4d542e162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_RHS_TYPE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a52f515448da04ee078cd3c2a05a83423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Derived &amp;</type>
      <name>d</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>afbe2f44139b5b3ec5de0b6896b3d3021</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp</name>
    <filename>a00214.html</filename>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type></type>
      <name>HPP_MAKE_EXCEPTION</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a19f2d09243fdd6828b4d40953f4f413f</anchor>
      <arglist>(HPP_UTIL_DLLAPI, AssertionError)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a0bcb296b7ca1dab3382f49953c92a853</anchor>
      <arglist>(std::ostream &amp;o, const Exception &amp;exception)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI long &amp;</type>
      <name>indent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a16259580a8f0a07bad42458aa65963f3</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>incindent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a669ea668296b2ed089b72c3a1dce688e</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>decindent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>afaf02e3dd1c3eaf21e287dc4c825cc89</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>resetindent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a011dc7bc6e7c975fdc993c5b7abbac56</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>iendl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ab2e087df519f97420058c160b8313be4</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>incendl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a49bcbcf63c92e671f9aa3c737b8a2852</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>decendl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8d7bf72162e22331e54b3c387651ed95</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_PINOCCHIO_DLLAPI std::ostream &amp;</type>
      <name>setpyformat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gaf0a4b5cf356013ff921516719a6b9cf0</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_PINOCCHIO_DLLAPI std::ostream &amp;</type>
      <name>unsetpyformat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ga9ebdb5b7e4ea691aa1cc921cacd64b28</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>PrettyPrint&lt; T, PrettyOutput &gt;</type>
      <name>pretty_print</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gaa29fa2d7b51bc30954dd1e77c1163eca</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>PrettyPrint&lt; T, CondensedOutput &gt;</type>
      <name>condensed</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ga88b06fbd68a50ab03ddc565e58e9817e</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>PrettyPrint&lt; T, OneLineOutput &gt;</type>
      <name>one_line</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ga9a8cb47183de8943e9e57cb92659d5aa</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>OutputFormatBits</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa875e4c844d0b4f0f260e9ad2a976fc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>OneLineOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aaa31d6d0e57c8868f95725538d6265c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CondensedOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa7a931a55fd9d53e3d156ea75df8a66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>PrettyOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa02d62615027b11a583d13dff972e3455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>OutputFormatBits</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa875e4c844d0b4f0f260e9ad2a976fc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>OneLineOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aaa31d6d0e57c8868f95725538d6265c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CondensedOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa7a931a55fd9d53e3d156ea75df8a66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>PrettyOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa02d62615027b11a583d13dff972e3455</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core</name>
    <filename>a00143.html</filename>
    <namespace>hpp::core::configurationShooter</namespace>
    <namespace>hpp::core::continuousValidation</namespace>
    <namespace>hpp::core::distance</namespace>
    <namespace>hpp::core::nearestNeighbor</namespace>
    <namespace>hpp::core::parser</namespace>
    <namespace>hpp::core::path</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <namespace>hpp::core::pathPlanner</namespace>
    <namespace>hpp::core::pathProjector</namespace>
    <namespace>hpp::core::pathValidation</namespace>
    <namespace>hpp::core::plugin</namespace>
    <namespace>hpp::core::problemTarget</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
    <namespace>hpp::core::timeParameterization</namespace>
    <class kind="struct">hpp::core::AllCollisionsValidationReport</class>
    <class kind="class">hpp::core::BiRRTPlanner</class>
    <class kind="struct">hpp::core::CollisionPathValidationReport</class>
    <class kind="class">hpp::core::CollisionValidation</class>
    <class kind="struct">hpp::core::CollisionValidationReport</class>
    <class kind="class">hpp::core::ConfigProjector</class>
    <class kind="class">hpp::core::ConfigurationShooter</class>
    <class kind="class">hpp::core::ConfigValidation</class>
    <class kind="class">hpp::core::ConfigValidations</class>
    <class kind="class">hpp::core::ConnectedComponent</class>
    <class kind="class">hpp::core::Constraint</class>
    <class kind="class">hpp::core::ConstraintSet</class>
    <class kind="struct">hpp::core::Container</class>
    <class kind="class">hpp::core::ContinuousValidation</class>
    <class kind="class">hpp::core::DiffusingPlanner</class>
    <class kind="class">hpp::core::Distance</class>
    <class kind="class">hpp::core::DistanceBetweenObjects</class>
    <class kind="class">hpp::core::DubinsPath</class>
    <class kind="class">hpp::core::Edge</class>
    <class kind="class">hpp::core::InterpolatedPath</class>
    <class kind="class">hpp::core::JointBoundValidation</class>
    <class kind="class">hpp::core::JointBoundValidationReport</class>
    <class kind="class">hpp::core::KinodynamicDistance</class>
    <class kind="class">hpp::core::KinodynamicOrientedPath</class>
    <class kind="class">hpp::core::KinodynamicPath</class>
    <class kind="class">hpp::core::NearestNeighbor</class>
    <class kind="class">hpp::core::Node</class>
    <class kind="class">hpp::core::Parameter</class>
    <class kind="class">hpp::core::ParameterDescription</class>
    <class kind="class">hpp::core::Path</class>
    <class kind="class">hpp::core::PathOptimizer</class>
    <class kind="class">hpp::core::PathPlanner</class>
    <class kind="class">hpp::core::PathProjector</class>
    <class kind="class">hpp::core::PathValidation</class>
    <class kind="struct">hpp::core::PathValidationReport</class>
    <class kind="class">hpp::core::PathValidations</class>
    <class kind="class">hpp::core::PathVector</class>
    <class kind="class">hpp::core::PlanAndOptimize</class>
    <class kind="class">hpp::core::Problem</class>
    <class kind="class">hpp::core::ProblemSolver</class>
    <class kind="class">hpp::core::ProblemSolverPlugin</class>
    <class kind="class">hpp::core::ProblemTarget</class>
    <class kind="struct">hpp::core::projection_error</class>
    <class kind="class">hpp::core::ReedsSheppPath</class>
    <class kind="struct">hpp::core::RelativeMotion</class>
    <class kind="class">hpp::core::Roadmap</class>
    <class kind="class">hpp::core::SteeringMethod</class>
    <class kind="class">hpp::core::StraightPath</class>
    <class kind="class">hpp::core::SubchainPath</class>
    <class kind="class">hpp::core::TimeParameterization</class>
    <class kind="class">hpp::core::ValidationReport</class>
    <class kind="class">hpp::core::VisibilityPrmPlanner</class>
    <class kind="class">hpp::core::WeighedDistance</class>
    <member kind="typedef">
      <type>configurationShooter::Uniform</type>
      <name>BasicConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga1bb8ebc0355ebdd8e05eacb5973e904b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>configurationShooter::UniformPtr_t</type>
      <name>BasicConfigurationShooterPtr_t</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga30d41482c8e1399b305e10ed88f52191</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::solver::BySubstitution</type>
      <name>BySubstitution</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab8c3c1605cff3cd20c6ceb9d5e1927bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::ComparisonTypes_t</type>
      <name>ComparisonTypes_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adc26e9a32a78c8ea5fab45d1dee9ab8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::ComparisonType</type>
      <name>ComparisonType</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aad41baac696d2ce24eafd507917644e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BiRRTPlanner &gt;</type>
      <name>BiRRTPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af90c8cbdbb7aeee9d505f1c0c3e13b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::pinocchio::Body</type>
      <name>Body</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a622f6f5092687d1db478f64b1b8f9d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::pinocchio::BodyPtr_t</type>
      <name>BodyPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9778aade55828df4cb2db8aac7f768d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidation &gt;</type>
      <name>CollisionValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ba952d2597ae21f5cd6f8d9d28e1c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidationReport &gt;</type>
      <name>CollisionValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9c7932fefd2d84bac3e94fa0ed7f1154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; AllCollisionsValidationReport &gt;</type>
      <name>AllCollisionsValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0c85430b8a0a9891cf819664f601cf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a30e9981a40f9582642bb1c56f3224a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectConstPtr_t</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afe5b9b66b0cce3c6682f474fdb5de8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::FclCollisionObject</type>
      <name>FclCollisionObject</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a99d6dcf79968726dadce3124e7b72616</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclCollisionObject *</type>
      <name>FclCollisionObjectPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a505c544b8a108a7145b2239d5ba98bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const FclCollisionObject *</type>
      <name>FclConstCollisionObjectPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ca867ec40bd782f256fc3873c8b25d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FclCollisionObject &gt;</type>
      <name>FclCollisionObjectSharePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1c1d37343f1c638f13c9e3e10909926e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad766fef1c422ba6da91ab22223562d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a97d6dc1a72985ba3ba34ed5fd5afdf4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8ba16943042291b4784bbadd22a3a537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationPtr_t</type>
      <name>ConfigurationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acae0f8d3424537613fc2a04f86cf4cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ConfigurationPtr_t &gt;</type>
      <name>Configurations_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a555df35840ca80af0778fa3589522419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::iterator</type>
      <name>ConfigIterator_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a76d9d091e942b1f40871a71420e99094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::const_iterator</type>
      <name>ConfigConstIterator_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f6b83824859081b28bae9342ed0b3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationShooter &gt;</type>
      <name>ConfigurationShooterPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac2f4ac8058ccd404c47481f65cbfc5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigProjector &gt;</type>
      <name>ConfigProjectorPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a87a37d1e50af286182f596142bd92b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidation &gt;</type>
      <name>ConfigValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a030f93d853343d7f5a4b661450080e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidations &gt;</type>
      <name>ConfigValidationsPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa53b4b5b3da1f2df3002677b8e09ef42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConnectedComponent &gt;</type>
      <name>ConnectedComponentPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a87c561eb5d2515b1565dcd2af9f4fa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; ConnectedComponentPtr_t &gt;</type>
      <name>ConnectedComponents_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a0f76f318c278589f3e0864028da2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Constraint &gt;</type>
      <name>ConstraintPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aae51393dbe50864be441251296aa1aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa0c7dcd4ad373beb17324b76f4aebbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ConstraintSet &gt;</type>
      <name>ConstraintSetConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa8956276a26006f945ec6e51a9bcd34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; ConstraintPtr_t &gt;</type>
      <name>Constraints_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adb2ff8cfb4463f5dea2f9fcf3ba019b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Device</type>
      <name>Device_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a380042779011e940fe0710c251fccee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aed486a2c66d49302847a965e01894aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DeviceWkPtr_t</type>
      <name>DeviceWkPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0fb60f58be7c478c2aba017791971a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a99786db2e6d9370a864a8101065ed498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; DevicePtr_t &gt;</type>
      <name>Devices_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aacc07c1f8902ecc52457eaa7dea4917b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunction</type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac2e7f3781b4fe72388e13d49651e677f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunctionPtr_t</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acadaa17624fe50d234d025e370d2079d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiffusingPlanner &gt;</type>
      <name>DiffusingPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a45f0c26b60d1cdb9d2ad70fc02bf5bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Distance &gt;</type>
      <name>DistancePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a86df25709d657aa5607817e510a95434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenObjects &gt;</type>
      <name>DistanceBetweenObjectsPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0de76904f27310b270370cdabd0359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DistanceResults_t</type>
      <name>DistanceResults_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afd2676bc909f7becf3e112549313fa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Edge *</type>
      <name>EdgePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5ba26e20e074d0ce7db359cf5788ec86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Edge * &gt;</type>
      <name>Edges_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6b045aa2ba41d2f8119c931479abd276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExtractedPath &gt;</type>
      <name>ExtractedPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a03775a562555949e27a8558513c1d55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SubchainPath &gt;</type>
      <name>SubchainPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aefb9e419c183985ca2a30103b18aa56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9a0f1544df7653f343ca6e07a024846e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Joint</type>
      <name>Joint</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae01e37dbbe9726e3ee8b94388ed30e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointConstPtr_t</type>
      <name>JointConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6697b2c805f16e3560cc80c517eb6167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8eda82f394e6061cb7611351f7e659de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidation &gt;</type>
      <name>JointBoundValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac84e30c13037c7becde45492054e20c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidationReport &gt;</type>
      <name>JointBoundValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef1173e2689796b1fd597ee426ef75e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::HalfJointJacobian_t</type>
      <name>HalfJointJacobian_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a35ec1a911eabee3aab236f2d64f06f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointVector_t</type>
      <name>JointVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3479461675a9f55af2ea278dd29fab03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8b4e1106dc1ea73492a8b34dd3dd1480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJoint</type>
      <name>LockedJoint</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53ea5221cd5833977fd77123b9fd97fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJointPtr_t</type>
      <name>LockedJointPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac96fecfeb66e1b55f986976da16822c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJointConstPtr_t</type>
      <name>LockedJointConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2dd5cd700b0256597e868baf82282fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LockedJoints_t</type>
      <name>LockedJoints_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a243a25ae29386c945c0b2f394a3421d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aff0aaa06e7e53dbf2677d0e7ab7142bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix3_t</type>
      <name>matrix3_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeede579dec1d435e37c7d54de8dbfe4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrix6_t</type>
      <name>matrix6_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af30547d7a7c63ca088e02821e32dc91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a29d33e6decf8f586160db1b1653eb5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixIn_t</type>
      <name>matrixIn_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af55f0f0f180b108c82a9059780206ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixOut_t</type>
      <name>matrixOut_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae599e865ecccaaaea7128e34451ee4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupElement</type>
      <name>LiegroupElement</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab15d1e3ce101ada378a74683e9ca9736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupElementRef</type>
      <name>LiegroupElementRef</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a26ed2f744cb236c69c7c76d659b745fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupSpace</type>
      <name>LiegroupSpace</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af0b27f3b503b37ed454b78957fc1f959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::LiegroupSpacePtr_t</type>
      <name>LiegroupSpacePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f6ffc44398fb47349e6ddffa3b9d133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::size_type</type>
      <name>size_type</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa88f47f586bda126ce2ade3b76d4452c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::value_type</type>
      <name>value_type</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a190eee99ae2e156bf6d702bc1c8efabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; value_type, value_type &gt;</type>
      <name>interval_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa1eaaf92fb6075a80b6429631fe3e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::BlockIndex</type>
      <name>BlockIndex</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a810c87decfb8df38f9668bdc2707f62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::segment_t</type>
      <name>segment_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8e6cdd6d4d78aed624b2b6a519669400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::segments_t</type>
      <name>segments_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5c7752f5c47f43d794d05507c09d2a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node *</type>
      <name>NodePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaa1154a22c5a3cc1cbce0ab6cef46568</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; NodePtr_t &gt;</type>
      <name>Nodes_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac612183d50fd36786841219d1c05799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NodePtr_t &gt;</type>
      <name>NodeVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a36540bea2751b959b990f9ce06d1e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a875478d7600a8a860de7f478255d5749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionObjectPtr_t &gt;</type>
      <name>ObjectStdVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23e2ff2e34cc1bd62f8d98e2a09f64a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionObjectConstPtr_t &gt;</type>
      <name>ConstObjectStdVector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a77ec6716ab4123b5848fcc57172e3def</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Path &gt;</type>
      <name>PathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace7cc447422da6b26fae4c31940dd444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Path &gt;</type>
      <name>PathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac63e80a2b059ec831d1329b9fe4bf598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TimeParameterization &gt;</type>
      <name>TimeParameterizationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d384e6aa8db1b9de0c3e5a66f7470c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathOptimizer &gt;</type>
      <name>PathOptimizerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7be517aaea26ea8502a0f0e4bc4ac5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathPlanner &gt;</type>
      <name>PathPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad40ce0ab724662ec472bf78c1c0a73c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ProblemTarget &gt;</type>
      <name>ProblemTargetPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaca4fba95373d73fc144050fe022b88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathVector &gt;</type>
      <name>PathVectorPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4e193a9670d76e2574324171f9dbc44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const PathVector &gt;</type>
      <name>PathVectorConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a917a99f5f7102616bb84db210cfb3c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PlanAndOptimize &gt;</type>
      <name>PlanAndOptimizePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7351f2b8dd868b1bf97078f25bfce4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Problem &gt;</type>
      <name>ProblemPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af8bd8861fece84e0862fdca0ec25e188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProblemSolver *</type>
      <name>ProblemSolverPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1946314f3983277f4c5284308d18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Roadmap &gt;</type>
      <name>RoadmapPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a490aff87ba3b21101dfbef637372c5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StraightPath &gt;</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5518a19fa67c1517314d81ab0186f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const StraightPath &gt;</type>
      <name>StraightPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afd6446c211bb8a5c2ca41242e8535d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8fd704f02ef4a28f5ae91b5da4282e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a70a7bd2f114a3aa792d7839c19992e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DubinsPath &gt;</type>
      <name>DubinsPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c0d433618e11adbd6eab82d4b42733f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const DubinsPath &gt;</type>
      <name>DubinsPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a071e1d138173792d6e0945e1d25289e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; KinodynamicPath &gt;</type>
      <name>KinodynamicPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa5bb21410ac371dac7495d6a8fc43fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const KinodynamicPath &gt;</type>
      <name>KinodynamicPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3720bf9cb33302c8ca49c5947c69f6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; KinodynamicOrientedPath &gt;</type>
      <name>KinodynamicOrientedPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a90dae171cec6600883a290b7e172c12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const KinodynamicOrientedPath &gt;</type>
      <name>KinodynamicOrientedPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a57d84dc979aaa2fa12e1548bb45a53fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InterpolatedPath &gt;</type>
      <name>InterpolatedPathPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace5a5ad364c598f93238668fb2d4c388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const InterpolatedPath &gt;</type>
      <name>InterpolatedPathConstPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2ba9dc5971823acbb5c7751376722f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SteeringMethod &gt;</type>
      <name>SteeringMethodPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0053bc3437cb01218dd6dc00e8c1d9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathPtr_t &gt;</type>
      <name>Paths_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad336ad2a888d48e7731b62861a3ff486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathVectorPtr_t &gt;</type>
      <name>PathVectors_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2a525d697c13a5222f0346c4495a3f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac3f63ebece1ff250900fd5c06f6a880f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 2, 1 &gt;</type>
      <name>vector2_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aab9337f20c1674f75c893a99e170ec41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8de0e39cd82cae4ccbb7c155754821c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a65182c83de2824232c09621c0a016f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7e5f504b04604948602d1df2a408f6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic &gt;</type>
      <name>rowvector_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a53851c7c70479f33f371f1737f5b9f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; VisibilityPrmPlanner &gt;</type>
      <name>VisibilityPrmPlannerPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1ba74fc93c8c706fe3e5f841edce4c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ValidationReport &gt;</type>
      <name>ValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0705cba97a4d1ae359ae407f76283685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; WeighedDistance &gt;</type>
      <name>WeighedDistancePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a08e2e9036e1ce01111ee4e01c25a1591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; KinodynamicDistance &gt;</type>
      <name>KinodynamicDistancePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaeec2862d3be89df51d1d13a3124d732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, constraints::ImplicitPtr_t &gt;</type>
      <name>NumericalConstraintMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9730fc23249b995db61f731884c1524f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ComparisonTypes_t &gt;</type>
      <name>ComparisonTypeMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a89d7796599a311cad19d60139211720e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, segments_t &gt;</type>
      <name>segmentsMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a25e64e007ece685c1cbdaf55bbebeb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::NumericalConstraints_t</type>
      <name>NumericalConstraints_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a107ddd3632b932bdd72ab1f9681f1775</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CenterOfMassComputationPtr_t &gt;</type>
      <name>CenterOfMassComputationMap_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acaf9af2b82f866d54b12e46942f0433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CollisionObjectConstPtr_t, CollisionObjectConstPtr_t &gt;</type>
      <name>CollisionPair_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9ce30595c92c6b4a0132f2464a54ba96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPair_t &gt;</type>
      <name>CollisionPairs_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0b6340628265c283e99a37a1c3118ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ContinuousValidation &gt;</type>
      <name>ContinuousValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a418a499ce2b9677b8db801ef9be5c75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NearestNeighbor *</type>
      <name>NearestNeighborPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a645c9ed99cb8fb5c02113ba42811c18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidation &gt;</type>
      <name>PathValidationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac29e6238dd3231986f3f3e8d323bc003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidations &gt;</type>
      <name>PathValidationsPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a210dbbe8bce02899745bbd1b25cb280f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidationReport &gt;</type>
      <name>PathValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a51bcf6b3e015b1054da572494e904f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReportPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ade0108edfd5efe11699a893ac2cdfec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReports_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa28f6ce0bbe980544c5e7efc63ce9038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathProjector &gt;</type>
      <name>PathProjectorPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acd16e05d1b627514c689e55d35ee5dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; core::vector3_t &gt;</type>
      <name>Shape_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad210a2c82c0dd3f523ae6512e6ad2023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; JointPtr_t, Shape_t &gt;</type>
      <name>JointAndShape_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab28374e1724179b31636c60e63cb3174</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; JointAndShape_t &gt;</type>
      <name>JointAndShapes_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7b12378c56f0137bd6665890c7ab062e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::Implicit NumericalConstraint</type>
      <name>HPP_CORE_DEPRECATED</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a44e5bf9d0da6c1f9de26efd34d99ba40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; DevicePtr_t(const std::string &amp;) &gt;</type>
      <name>RobotBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7696595c8216e9371e1cd04285923da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathOptimizerPtr_t(const Problem &amp;) &gt;</type>
      <name>PathOptimizerBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8cef489d46a492887079fb69c1cc0101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathPlannerPtr_t(const Problem &amp;, const RoadmapPtr_t &amp;) &gt;</type>
      <name>PathPlannerBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3fbb1d69deb998d881f44a8f3cc31574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathValidationPtr_t(const DevicePtr_t &amp;, const value_type &amp;) &gt;</type>
      <name>PathValidationBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1b466240de9d55c35eb729f17e87ab81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ConfigValidationPtr_t(const DevicePtr_t &amp;) &gt;</type>
      <name>ConfigValidationBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a03230e43581b9666d0fbb0a94a964d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathProjectorPtr_t(const Problem &amp;, const value_type &amp;) &gt;</type>
      <name>PathProjectorBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac0bac79279c0dbd23fc47531d289389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ConfigurationShooterPtr_t(const Problem &amp;) &gt;</type>
      <name>ConfigurationShooterBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7dc5cc5cf0d4564de753e93f9b340237</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; DistancePtr_t(const Problem &amp;) &gt;</type>
      <name>DistanceBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aff0d2e4125a869a18d35b3025afde772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; SteeringMethodPtr_t(const Problem &amp;) &gt;</type>
      <name>SteeringMethodBuilder_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abdee5d810fc0996220902666aed2dd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; std::string, CollisionObjectPtr_t &gt; &gt;</type>
      <name>AffordanceObjects_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2e22265c4c41287448c31cf973862ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector3_t</type>
      <name>AffordanceConfig_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a129b020c203488b6de59d4c8eb01d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>steeringMethod::Straight</type>
      <name>SteeringMethodStraight</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1bbd88fc6593982689784184894cd541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>steeringMethod::StraightPtr_t</type>
      <name>SteeringMethodStraightPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a684f9a8a85bbaad06c8229cba58376f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac19b1e5c7ce1ad90ee52aa3491bd2e9f</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acb414703aac918925839d49b3948e465</anchor>
      <arglist>(BiRRTPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2167169fa8af2cc00a4f5f463b788d23</anchor>
      <arglist>(CollisionValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad3ec7349de8f0dc7504724da5124cc46</anchor>
      <arglist>(CollisionValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8f17347362db08cf19f05e5294fd64ad</anchor>
      <arglist>(AllCollisionsValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac94e7acd08f63ddfa2133416ded9dafb</anchor>
      <arglist>(ConfigurationShooter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8311bd5400d203db7df24ea03b59426d</anchor>
      <arglist>(ConfigProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>add02c514415417ab4b8b914e5f741190</anchor>
      <arglist>(ConfigValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a11bacdeb089c9a66c430707980a66ff3</anchor>
      <arglist>(ConfigValidations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afa5e13487da5f25b8466ba5104fec736</anchor>
      <arglist>(ConnectedComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4a974fea2650924cb1999dca9f5040bd</anchor>
      <arglist>(Constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab5de251f2f1bfa367068fc26b6ad440a</anchor>
      <arglist>(ConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a965629a64a025c2e6e6f240da05b75f7</anchor>
      <arglist>(DiffusingPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a33f177097b9d908822ab15a2ff674fb8</anchor>
      <arglist>(Distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa9e7cca73a7b0eaf230d062bbd289e5b</anchor>
      <arglist>(DistanceBetweenObjects)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a73d2ab29a49cc705e6a1f06fc0a81ae9</anchor>
      <arglist>(ExtractedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af21f60f2dc52aa2b56735d697ab02522</anchor>
      <arglist>(SubchainPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6ac5fb1471e1932896ed5c78f4628ffb</anchor>
      <arglist>(JointBoundValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa728f221db12a1afb747eb9f33677391</anchor>
      <arglist>(Path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad361599a99c5560b92ef592e8956d306</anchor>
      <arglist>(TimeParameterization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a653ee049387accb711897f44393ed90b</anchor>
      <arglist>(PathOptimizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9790ac608c0a25cf4aa7acae38adfd36</anchor>
      <arglist>(PathPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa99755b02258dbf65860185ccc20f98f</anchor>
      <arglist>(ProblemTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a560f6a29ed5a9ad39099c57fcbe0dc2a</anchor>
      <arglist>(PathVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab1ad444bdb7808d69b718b60e2e71989</anchor>
      <arglist>(PlanAndOptimize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a97710024ca6869f82ca48292d0182a41</anchor>
      <arglist>(Problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa204dbe6835f9640d2988a30f90ed1d5</anchor>
      <arglist>(Roadmap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a14ab4ed2bea455402224921945e1a87e</anchor>
      <arglist>(SteeringMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aae8a0c6463f41c3c13fe7bfb776f1c97</anchor>
      <arglist>(StraightPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4336b71884424eb417d2b61cc7e8ae77</anchor>
      <arglist>(InterpolatedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac90b4786125803dc8ab96d867540822e</anchor>
      <arglist>(DubinsPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adc6485953e44f5876e42cf17594b4e18</anchor>
      <arglist>(ReedsSheppPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a39c0ccf03c500a1e772da726311bebb4</anchor>
      <arglist>(KinodynamicPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a64ed39b9e61b6626249b21bb55aa8c12</anchor>
      <arglist>(KinodynamicOrientedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a60622ae657703c813320688b0c48df40</anchor>
      <arglist>(ValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a988fec29c02856c309455f39c67e9120</anchor>
      <arglist>(VisibilityPrmPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac1a0115a014bff841665ca660302c401</anchor>
      <arglist>(WeighedDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad38d74bfdecd02a4a022087f5264d2ca</anchor>
      <arglist>(KinodynamicDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef2e5a1160d45977e47716a5163284ae</anchor>
      <arglist>(ContinuousValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4c24e90ecfb3673badadc0c1d17384df</anchor>
      <arglist>(PathValidations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aca6b632cecd7c718d70c221776970e12</anchor>
      <arglist>(PathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac200530dfd3f4bf573f0ec5aa4ff7959</anchor>
      <arglist>(PathProjector)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ga1947b6d9b37f1a315e596b194adc6159</anchor>
      <arglist>(std::ostream &amp;os, const Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gac90e244c2dcfbdf7f95f0b59d825ac51</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ga8ae1800d63fa0035ab3281311e873193</anchor>
      <arglist>(std::ostream &amp;os, const Roadmap &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga656195c66d722769e89c7a8af48181a2</anchor>
      <arglist>(std::ostream &amp;os, const ValidationReport &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::configurationShooter</name>
    <filename>a00215.html</filename>
    <class kind="class">hpp::core::configurationShooter::Gaussian</class>
    <class kind="class">hpp::core::configurationShooter::Uniform</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Uniform &gt;</type>
      <name>UniformPtr_t</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a954fbc8eace2201addf10234e2de9b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Gaussian &gt;</type>
      <name>GaussianPtr_t</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a6d16b0d9a00b0c7fd6eb7ca6ab1036d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ad46ecf9b5b11d06ee6223903ccb8a512</anchor>
      <arglist>(Uniform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a03290b6e09a77a3c56a3d07b9243530d</anchor>
      <arglist>(Gaussian)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::continuousValidation</name>
    <filename>a00216.html</filename>
    <class kind="class">hpp::core::continuousValidation::BodyPairCollision</class>
    <class kind="struct">hpp::core::continuousValidation::CoefficientVelocity</class>
    <class kind="class">hpp::core::continuousValidation::Dichotomy</class>
    <class kind="class">hpp::core::continuousValidation::Initializer</class>
    <class kind="class">hpp::core::continuousValidation::IntervalValidation</class>
    <class kind="class">hpp::core::continuousValidation::Progressive</class>
    <class kind="class">hpp::core::continuousValidation::SolidSolidCollision</class>
    <member kind="typedef">
      <type>std::vector&lt; CoefficientVelocity &gt;</type>
      <name>CoefficientVelocities_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a3d199ff454ffcc0ffea6750ce737ee65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aa4a911e8e82d50969e922a45301d75f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aa8b78c4343b0cbe828f642b65d478f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a75c2a067020a7bf3c114ac6c9f5adf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac910a71e1e30d46d087029f4c49ee18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SolidSolidCollision &gt;</type>
      <name>SolidSolidCollisionPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a7492ba01a678f4ceaaaca539103fc946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Initializer &gt;</type>
      <name>InitializerPtr_t</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a124e406ca3bf1dd33f314c43d25dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ac5a5bd94ed5746ebaacb9f26fedbd165</anchor>
      <arglist>(std::ostream &amp;os, const BodyPairCollision &amp;pair)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a1303978c96f50ff48c4904883a389b9a</anchor>
      <arglist>(std::ostream &amp;os, const IntervalValidation&lt; ValidationReportTypePtr_t &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a5c1fb75e89d30cab0a78df20cce9658c</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a67e18eb9671a7157692958a4af6c07a8</anchor>
      <arglist>(Progressive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>afbac7d3cbd1e80d7f46f10c671ce2027</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ab1c6f0cdbfc25f34b4e566e3592e4887</anchor>
      <arglist>(SolidSolidCollision)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a4956a89e37a4a1553d0733bb17e030b6</anchor>
      <arglist>(Initializer)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::distance</name>
    <filename>a00217.html</filename>
    <class kind="class">hpp::core::distance::ReedsShepp</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsShepp &gt;</type>
      <name>ReedsSheppPtr_t</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aa819a4766c9c24002e7dfd2a43d28710</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a8af73a5f7181c54b9930e490ad975279</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::nearestNeighbor</name>
    <filename>a00218.html</filename>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad7bb0151c114887548e601d1ed626cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basic *</type>
      <name>BasicPtr_t</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a199a21933e46d2032dfc4fa227005d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::parser</name>
    <filename>a00219.html</filename>
    <class kind="class">hpp::core::parser::RoadmapFactory</class>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; std::string &gt;</type>
      <name>StringSequence</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga6a93d581ac8f3ae38e05cedf2d8e3bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; double &gt;</type>
      <name>ConfigurationFactory</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>gaddac3c470d5ddef6a2dbbdd69ee46327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; unsigned int &gt;</type>
      <name>IdSequence</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga3dabee6e928569a6a1c3e77f84c0314b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga50b557a4d968611b4cb9370a9762c6f2</anchor>
      <arglist>(std::ostream &amp;o, const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga8db26505fc7081063e9e5b00cd7498d1</anchor>
      <arglist>(const std::string &amp;filename, const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga16f89457b51f1dffce2a7c77e1bae958</anchor>
      <arglist>(const std::string &amp;filename, const RoadmapPtr_t &amp;roadmap, const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::path</name>
    <filename>a00220.html</filename>
    <class kind="class">hpp::core::path::Hermite</class>
    <class kind="class">hpp::core::path::Spline</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Hermite &gt;</type>
      <name>HermitePtr_t</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a1465749a78a76c5d84ad75bc4039e89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Hermite &gt;</type>
      <name>HermiteConstPtr_t</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a49b833070d72a55abcf4bb9f63e22776</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PolynomeBasisType</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga18289218cbc246c9fb909ab171496799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CanonicalPolynomeBasis</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gga18289218cbc246c9fb909ab171496799a937ab195a8b21e3bdbcec4e8a09bf7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BernsteinBasis</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gga18289218cbc246c9fb909ab171496799a0c8ba89811b44840450fdc1df6210fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a176c5548590a9582a6acec4f584ca6bf</anchor>
      <arglist>(Hermite)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::pathOptimization</name>
    <filename>a00221.html</filename>
    <class kind="class">hpp::core::pathOptimization::ConfigOptimization</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimizationTraits</class>
    <class kind="class">hpp::core::pathOptimization::Cost</class>
    <class kind="class">hpp::core::pathOptimization::GradientBased</class>
    <class kind="struct">hpp::core::pathOptimization::LinearConstraint</class>
    <class kind="class">hpp::core::pathOptimization::PartialShortcut</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcutTraits</class>
    <class kind="struct">hpp::core::pathOptimization::QuadraticProgram</class>
    <class kind="class">hpp::core::pathOptimization::RandomShortcut</class>
    <class kind="class">hpp::core::pathOptimization::SimpleShortcut</class>
    <class kind="class">hpp::core::pathOptimization::SimpleTimeParameterization</class>
    <class kind="class">hpp::core::pathOptimization::SplineGradientBased</class>
    <class kind="class">hpp::core::pathOptimization::SplineGradientBasedAbstract</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RandomShortcut &gt;</type>
      <name>RandomShortcutPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>abebe808b0236a0746df981b62053da9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SimpleShortcut &gt;</type>
      <name>SimpleShortcutPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a38aa29a11c7bdfaf55250b4cbb770bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cost &gt;</type>
      <name>CostPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a1961dfc4ae6e548f711040c98c235193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GradientBased &gt;</type>
      <name>GradientBasedPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a8ad66c731b9ab5ccebb460697280b672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathLength &gt;</type>
      <name>PathLengthPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ae74e4b9a49bb45f7f2316d5343252ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PartialShortcut &gt;</type>
      <name>PartialShortcutPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>abb8daefc2c1a8cd02da36f78d5eaeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SimpleTimeParameterization &gt;</type>
      <name>SimpleTimeParameterizationPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ada76a8948742877c6da40401579b685c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigOptimization &gt;</type>
      <name>ConfigOptimizationPtr_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a52c52eb468b4bae87aec69b6c4b8fc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionConstraintsResult &gt;</type>
      <name>CollisionConstraintsResults_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8ec3de1032309ec7c79adf9edfc48c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointConstPtr_t &gt;</type>
      <name>JointStdVector_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a63304c9f128b9e89ddaf0af5af189896</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a3aff81be25b6380476682ddf6dd0411c</anchor>
      <arglist>(RandomShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a8514bb104fcb58753c2c67b114316dee</anchor>
      <arglist>(SimpleShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ae1ba543a90f5ca6ea36cfb8137c30e8a</anchor>
      <arglist>(Cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a9eba7cc09d8f17930205c119db2af35f</anchor>
      <arglist>(GradientBased)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a68d3425720b126c08f04dce21022ad1d</anchor>
      <arglist>(PathLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a7ca6a13378a55ecd651a8100efb0469e</anchor>
      <arglist>(PartialShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ab407232e5e936832102da8596b18402c</anchor>
      <arglist>(SimpleTimeParameterization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a152fb63bebb1a1d38de541d5515b519b</anchor>
      <arglist>(ConfigOptimization)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::pathPlanner</name>
    <filename>a00222.html</filename>
    <class kind="class">hpp::core::pathPlanner::kPrmStar</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; kPrmStar &gt;</type>
      <name>kPrmStarPtr_t</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad273d262a9fb917f046372dd25da9812</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a19fe9565cd97dcc770293f56893be057</anchor>
      <arglist>(kPrmStar)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::pathProjector</name>
    <filename>a00223.html</filename>
    <class kind="class">hpp::core::pathProjector::Dichotomy</class>
    <class kind="class">hpp::core::pathProjector::Global</class>
    <class kind="class">hpp::core::pathProjector::Progressive</class>
    <class kind="class">hpp::core::pathProjector::RecursiveHermite</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Global &gt;</type>
      <name>GlobalPtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a46ec3eb85b8743ea4c8d456dc9bfcaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a8e49bd7ae5008b130b160cd7d81fbdfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a0db46ea53ddfbc8d643b454ecdf42aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RecursiveHermite &gt;</type>
      <name>RecursiveHermitePtr_t</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a80d52ae1e901e0c51bc9db53d9cbb6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac49d62d9c9f730b9a30049d0f84a6b59</anchor>
      <arglist>(Global)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a6bdc47dcf6ef337fcc5a746318af82bf</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a294ce2fadb99b3eab085eea2b8aece1c</anchor>
      <arglist>(Progressive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a058d705cc8ac83216093d033ac386370</anchor>
      <arglist>(RecursiveHermite)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::pathValidation</name>
    <filename>a00224.html</filename>
    <class kind="class">hpp::core::pathValidation::Discretized</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Discretized &gt;</type>
      <name>DiscretizedPtr_t</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>aa5db11ab040deb58489ac29bbbf80d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ad264ba9ab61b88d2b9a7e8dd97c9ec4a</anchor>
      <arglist>(Discretized)</arglist>
    </member>
    <member kind="function">
      <type>DiscretizedPtr_t</type>
      <name>createDiscretizedCollisionChecking</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga2fcabfd40f8c7b422c1247223bdb9490</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="function">
      <type>DiscretizedPtr_t</type>
      <name>createDiscretizedJointBound</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga94717ccf260a93ce48dd4affe06189df</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::plugin</name>
    <filename>a00225.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>findPluginLibrary</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a7711647922b72d413a033f28f05a97e0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadPlugin</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a2d8ac542501d81f04a7fb87ff5ee7813</anchor>
      <arglist>(const std::string &amp;lib, ProblemSolver *ps)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::problemTarget</name>
    <filename>a00226.html</filename>
    <class kind="class">hpp::core::problemTarget::GoalConfigurations</class>
    <class kind="class">hpp::core::problemTarget::TaskTarget</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GoalConfigurations &gt;</type>
      <name>GoalConfigurationsPtr_t</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a5b199c94158433428667eb1e970247d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TaskTarget &gt;</type>
      <name>TaskTargetPtr_t</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a08b6f9043e55d79e3302d3600f73c67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac3948e11644a9eac9cc22011a5ef588d</anchor>
      <arglist>(GoalConfigurations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ad7d34b357f6c12e02f4dc5d992c58985</anchor>
      <arglist>(TaskTarget)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::steeringMethod</name>
    <filename>a00227.html</filename>
    <class kind="class">hpp::core::steeringMethod::CarLike</class>
    <class kind="class">hpp::core::steeringMethod::ConstantCurvature</class>
    <class kind="class">hpp::core::steeringMethod::Dubins</class>
    <class kind="class">hpp::core::steeringMethod::Hermite</class>
    <class kind="class">hpp::core::steeringMethod::Interpolated</class>
    <class kind="class">hpp::core::steeringMethod::Kinodynamic</class>
    <class kind="class">hpp::core::steeringMethod::ReedsShepp</class>
    <class kind="class">hpp::core::steeringMethod::Snibud</class>
    <class kind="class">hpp::core::steeringMethod::Spline</class>
    <class kind="class">hpp::core::steeringMethod::Straight</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a28fd447b06fd457e3e2507aedfeecdf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsShepp &gt;</type>
      <name>ReedsSheppPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>adad48913eb05b8094d86fee32a0d6d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Kinodynamic &gt;</type>
      <name>KinodynamicPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a90a6d122f99010463d2bc066f5fb6e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Straight &gt;</type>
      <name>StraightPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a8c21b499462268d5f86d4c1236702a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CarLike &gt;</type>
      <name>CarLikePtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a9e5e636878a078b58a630603155274a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstantCurvature &gt;</type>
      <name>ConstantCurvaturePtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aed0ff2b8e0829404089c25ac69540e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dubins &gt;</type>
      <name>DubinsPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a141060540d133bdc8e166951f41ac082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Snibud &gt;</type>
      <name>SnibudPtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a08035abe804c2a6ba625ac26291ef152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Hermite &gt;</type>
      <name>HermitePtr_t</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7e3ad20e33fadd6e20a000f8fed4cd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a1c058c3ad817364b1f76cce6a0ac3429</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af4072cd5a7aaefdd07ea766d786b678a</anchor>
      <arglist>(Interpolated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a8211ae4089cdc6043bbadfbfff797d22</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad2466e9e551707e2a21029224ea69e9f</anchor>
      <arglist>(Kinodynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>abd8ee730c6eec2a352b45d171107b2ba</anchor>
      <arglist>(Straight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a266c2e1534869077bf698d55f13c7317</anchor>
      <arglist>(CarLike)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4fb1ce0b39b1f0b087422bf40709f308</anchor>
      <arglist>(ConstantCurvature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac2e4b00252653b58088019b3eba368b1</anchor>
      <arglist>(Dubins)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af6efa9108ba052712a74b11d47e516f6</anchor>
      <arglist>(Snibud)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a42ad6ae26e3c97f7e71a3396915ea67e</anchor>
      <arglist>(Hermite)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::timeParameterization</name>
    <filename>a00228.html</filename>
    <class kind="class">hpp::core::timeParameterization::Polynomial</class>
  </compound>
  <compound kind="group">
    <name>configuration_sampling</name>
    <title>Configuration Sampling</title>
    <filename>a00230.html</filename>
    <class kind="class">hpp::core::configurationShooter::Gaussian</class>
    <class kind="class">hpp::core::configurationShooter::Uniform</class>
    <class kind="class">hpp::core::ConfigurationShooter</class>
    <member kind="typedef">
      <type>configurationShooter::Uniform</type>
      <name>BasicConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga1bb8ebc0355ebdd8e05eacb5973e904b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>configurationShooter::UniformPtr_t</type>
      <name>BasicConfigurationShooterPtr_t</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga30d41482c8e1399b305e10ed88f52191</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConfigurationPtr_t</type>
      <name>shoot</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>gae2b19921d4a0384ff48bad1e88b2ef77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shoot</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga0f78af14dfa23638a442e619423182e9</anchor>
      <arglist>(Configuration_t &amp;q) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga86b5b11fccd07ccbe0fe68479d8d1d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigurationShooter</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ga6d4743d6735b50ad4868d58222be365a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>gad7e9a66c680fd8ba7395fe5b048da84a</anchor>
      <arglist>(const ConfigurationShooterWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>path_planning</name>
    <title>Path planning algorithms</title>
    <filename>a00231.html</filename>
    <class kind="class">hpp::core::BiRRTPlanner</class>
    <class kind="class">hpp::core::DiffusingPlanner</class>
    <class kind="class">hpp::core::PathPlanner</class>
    <class kind="class">hpp::core::PlanAndOptimize</class>
    <class kind="class">hpp::core::problemTarget::GoalConfigurations</class>
    <class kind="class">hpp::core::problemTarget::TaskTarget</class>
    <class kind="class">hpp::core::ProblemTarget</class>
    <class kind="class">hpp::core::Problem</class>
    <class kind="class">hpp::core::VisibilityPrmPlanner</class>
  </compound>
  <compound kind="group">
    <name>path_optimization</name>
    <title>Path Optimization</title>
    <filename>a00232.html</filename>
    <namespace>hpp::core::pathOptimization</namespace>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimizationTraits</class>
    <class kind="class">hpp::core::pathOptimization::ConfigOptimization</class>
    <class kind="class">hpp::core::pathOptimization::GradientBased</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcutTraits</class>
    <class kind="class">hpp::core::pathOptimization::PartialShortcut</class>
    <class kind="struct">hpp::core::pathOptimization::QuadraticProgram</class>
    <class kind="class">hpp::core::pathOptimization::RandomShortcut</class>
    <class kind="class">hpp::core::pathOptimization::SimpleShortcut</class>
    <class kind="class">hpp::core::pathOptimization::SimpleTimeParameterization</class>
    <class kind="struct">hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData</class>
    <class kind="class">hpp::core::pathOptimization::SplineGradientBasedAbstract</class>
    <class kind="class">hpp::core::pathOptimization::SplineGradientBased</class>
    <class kind="class">hpp::core::PathOptimizer</class>
    <member kind="typedef">
      <type>std::vector&lt; CollisionConstraintsResult &gt;</type>
      <name>CollisionConstraintsResults_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8ec3de1032309ec7c79adf9edfc48c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiSVD&lt; matrix_t &gt;</type>
      <name>Decomposition_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gac06dce338d44e4a5c249e9b0c9698768</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::LLT&lt; matrix_t, Eigen::Lower &gt;</type>
      <name>LLT_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga34d7dae38d1726583e32d29da1f9fda4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>path::Spline&lt; PolynomeBasis, SplineOrder &gt;</type>
      <name>Spline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7d1e911c161fc650701ebb12380234fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline::Ptr_t</type>
      <name>SplinePtr_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae6483158f52d16317efc9af6fcf83432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SplinePtr_t &gt;</type>
      <name>Splines_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7b791d1140f1697080f818fd58126aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineGradientBasedAbstract&lt; _PolynomeBasis, _SplineOrder &gt;</type>
      <name>Base</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaf07b1f6a1efe400edce57a0132ef980d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SplineGradientBased &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae44de55487524b7ab6f8dd9cc52975c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3acf673f4401cd742b99e6ea82e8618665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3a534f487e1fdd513b83e49ec3bce85d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4ba5168e76eaee71986304d9d0845058fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4baaa0359ed771fd30baa08b8335a2765c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3acf673f4401cd742b99e6ea82e8618665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ggabf68a730e5445693cb1dbbe27e5334a3a534f487e1fdd513b83e49ec3bce85d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PolynomeBasis</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4ba5168e76eaee71986304d9d0845058fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SplineOrder</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gga951d78fc1fde1ccc264e36b7108f8a4baaa0359ed771fd30baa08b8335a2765c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GradientBasedPtr_t</type>
      <name>create</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3395c68307cad504abcf8cac8ea725fa</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga333c9ed253e1901223f3ab95ce2bc970</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientBased</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga53fdf87420e173ddc6ddee85a4f2eaf9</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa3c8a9ed38e00ccc5270cf99963955aa</anchor>
      <arglist>(size_type inputSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga94012fe4980e935094e3bbd3ea4ac2b5</anchor>
      <arglist>(const QuadraticProgram &amp;QP, const LinearConstraint &amp;lc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga87fa98ba7c876fede139c4c9a4061762</anchor>
      <arglist>(const QuadraticProgram &amp;QP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QuadraticProgram</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa16d9c48ee70e6b5d8c1d502ea4770e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRows</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae38d270ddc4c8f7f48af6e56bf6328a4</anchor>
      <arglist>(const std::size_t &amp;nbRows)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SplineGradientBasedAbstract</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga1334932f5adc317c6830cc5d819ce12c</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineOptimizationData</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gabce3427d6b8ebb46692eb1ba2dd4c458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineOptimizationData</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab1359f5ceb480f031b4d422beed001b9</anchor>
      <arglist>(size_type rDof)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathVectorPtr_t</type>
      <name>buildPathVector</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga81a8fdfbf9a44736327180c95eba8d38</anchor>
      <arglist>(const Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga55fd1d5ef934062c666b9d3dfabe9645</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0f3fcb900ba0e6a99849bd6b6721df90</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SplineGradientBased</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab198df2dd7e22ce0c96fcb8ca7387ce9</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathOptimizer</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaba321189c08102d5cbf7181c23c7488c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga9d07d63edbc71df565164e70cb807057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga04d8e315addf200833541c8bb01ef360</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga945c65ca497efd7c4098cd99dd26c413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathOptimizer</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga1dbe27ed7b7e7706778be064443061e1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga1fe4d818491c40aa735dbdafab2353e9</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="variable">
      <type>ConstraintSetPtr_t</type>
      <name>set</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga66c84d20a3e6bcdf30f1f84d049a7a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; constraints::ExplicitConstraintSet &gt;</type>
      <name>es</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gad86ff7f9858a5e441a2f13c635e1c54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowBlockIndices</type>
      <name>activeParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaf1eb41569ba45624728f446b3cfca5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae9fe98ae8d16357b0e44a0e99776a690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checkOptimum_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa411fd04af461526f9631802d02fe503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>interrupt_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8ada4f7cabc118faaac5d3f48ac4c56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduced</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga7ffd4dbcd5bb448ee47f8d079566b68b</anchor>
      <arglist>(const LinearConstraint &amp;lc, QuadraticProgram &amp;QPr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga67ee163c3c35c4fa2fb95724769906b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0bc3d9a2f736dc4c3332a08e4821e01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLLT</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga6e45821d1161199a8d8cd583723b9d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>solve</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5158814cc80cec955e25215296c8a588</anchor>
      <arglist>(const LinearConstraint &amp;ce, const LinearConstraint &amp;ci)</arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>H</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae84e3e0239e366627df706ca4469ab99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>b</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gacfedf11f20288509ae16a160b4bc1dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bIsZero</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5f38e782312552c5bb255cdea14bba8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LLT_t</type>
      <name>llt</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaebee63495249a47719b152659d6ba1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>trace</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga60c06d0c87d64a52e0f1788effd12de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXi</type>
      <name>activeConstraint</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga75e792b0fd16f63b3471f8b131d5944b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>activeSetSize</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gae90925e3da34cfbc50911525507d3780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Decomposition_t</type>
      <name>dec</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa00e92533b986fa49f17cf2c23ba8a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>xStar</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga0c5592712fbc6720ae6e2caafde290bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gac860589bf2bc9b49d572ecc8802eac78</anchor>
      <arglist>(const Splines_t &amp;in, Splines_t &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSplines</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5e4595e61ea8312879f6229c50fe3a86</anchor>
      <arglist>(Splines_t &amp;spline, const vector_t &amp;param) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga37a1c231cc744c46a0deceaef9881c32</anchor>
      <arglist>(vector_t &amp;param, const Splines_t &amp;spline) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interpolate</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga4915ada97b7f5db2926044422d266d15</anchor>
      <arglist>(const Splines_t &amp;a, const Splines_t &amp;b, const value_type &amp;alpha, Splines_t &amp;res)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>steeringMethod::Spline&lt; PolynomeBasis, SplineOrder &gt;</type>
      <name>SSM_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaca3fd6ec0371757a6025f6da00d338c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SSM_t::Ptr_t</type>
      <name>steeringMethod_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga967a141b92dce2d5981f976fab569c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>cleanInput</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga149c53678137270d8bcf568e507fc118</anchor>
      <arglist>(const PathVectorPtr_t &amp;input)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendEquivalentSpline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga094020303d44df3d81267bd2a8e21804</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendEquivalentSpline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3f800b59d36f40b666167da72e36d628</anchor>
      <arglist>(const InterpolatedPathPtr_t &amp;path, Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendEquivalentSpline</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8da8342769531d20cba8464b4acbfeda</anchor>
      <arglist>(const PathVectorPtr_t &amp;path, Splines_t &amp;splines) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::pair&lt; PathValidationReportPtr_t, std::size_t &gt; &gt;</type>
      <name>Reports_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga58f41044b3dacd041ce25a70f69d1ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PathValidationPtr_t &gt;</type>
      <name>validations_</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga89e1dab1036585aa80be1c5d3d4d4d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePathValidation</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gad4cfd42d5f0fb64975e3e729c8d920e0</anchor>
      <arglist>(const Splines_t &amp;splines)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Reports_t</type>
      <name>validatePath</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga8d2c8833bbd2ead3dd776b379e14a240</anchor>
      <arglist>(const Splines_t &amp;splines, std::vector&lt; std::size_t &gt; &amp;reordering, bool stopAtFirst, bool reorder) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab6fd581843397ec4c2ada24cc27d1eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>Bools_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga15f721896fc3c1e4114484c50ca6bbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; size_type &gt;</type>
      <name>Indices_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gad989bed1d9367c7be3e11628b9999b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; SplineOptimizationData &gt;</type>
      <name>SplineOptimizationDatas_t</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gab2f08e85a140533ca1b1299b2236e595</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>jointBoundConstraint</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga4db2d57603f1e30939813757ecfe793e</anchor>
      <arglist>(const Splines_t &amp;splines, LinearConstraint &amp;lc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>addBoundConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga4187212fc7501a4a7b071ae718f52e6e</anchor>
      <arglist>(const Indices_t &amp;bci, const LinearConstraint &amp;bc, Bools_t &amp;activeConstraint, LinearConstraint &amp;constraint) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Indices_t</type>
      <name>validateBounds</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gaa58dcf247ea28123582cca4a857734ef</anchor>
      <arglist>(const Splines_t &amp;splines, const LinearConstraint &amp;lc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addContinuityConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga5385d29459c330d48821324e32c92fa5</anchor>
      <arglist>(const Splines_t &amp;splines, const size_type maxOrder, const SplineOptimizationDatas_t &amp;ess, LinearConstraint &amp;continuity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addProblemConstraints</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga041a7de312634005b269e68a9c7593ae</anchor>
      <arglist>(const PathVectorPtr_t &amp;init, const Splines_t &amp;splines, LinearConstraint &amp;lc, SplineOptimizationDatas_t &amp;sods) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addProblemConstraintOnPath</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>gabad5a01bb7b7b997ba5f01ec1918fc79</anchor>
      <arglist>(const PathPtr_t &amp;path, const size_type &amp;idxSpline, const SplinePtr_t &amp;spline, LinearConstraint &amp;lc, SplineOptimizationData &amp;sod) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>computeActiveParameters</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ga3c11dd21e01d2b38732d30fb830577f1</anchor>
      <arglist>(const PathPtr_t &amp;path, const constraints::solver::BySubstitution &amp;hs, const value_type &amp;guessThr=-1, const bool &amp;useExplicitInput=false) const </arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>steering_method</name>
    <title>Steering method and distance functions</title>
    <filename>a00233.html</filename>
    <class kind="class">hpp::core::distance::ReedsShepp</class>
    <class kind="class">hpp::core::Distance</class>
    <class kind="class">hpp::core::KinodynamicDistance</class>
    <class kind="class">hpp::core::steeringMethod::CarLike</class>
    <class kind="class">hpp::core::steeringMethod::Dubins</class>
    <class kind="class">hpp::core::steeringMethod::Hermite</class>
    <class kind="class">hpp::core::steeringMethod::Interpolated</class>
    <class kind="class">hpp::core::steeringMethod::ReedsShepp</class>
    <class kind="class">hpp::core::steeringMethod::Snibud</class>
    <class kind="class">hpp::core::steeringMethod::Spline</class>
    <class kind="class">hpp::core::steeringMethod::Kinodynamic</class>
    <class kind="class">hpp::core::steeringMethod::Straight</class>
    <class kind="class">hpp::core::SteeringMethod</class>
    <class kind="class">hpp::core::WeighedDistance</class>
    <member kind="function" static="yes">
      <type>static StraightPtr_t</type>
      <name>create</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ga4e19325ce22cffc20ff600c4d65b4a24</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gaa14e75273d94f72c4d7f5a177644e709</anchor>
      <arglist>(const StraightPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gacf8a20bddd555cbd195199b3bf73b61f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ga3d78f75cb1027e8b8ea024c884af442f</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Straight</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gaf7fdc313898160a5fcf7bfd29f521430</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Straight</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>gab7176799b67f8820bb88ddfdfbded81b</anchor>
      <arglist>(const Straight &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ga5e0db5b11c6e6ec6314cbc4ceb354510</anchor>
      <arglist>(StraightWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>validation</name>
    <title>Validation of configurations and paths</title>
    <filename>a00234.html</filename>
    <class kind="struct">hpp::core::CollisionPathValidationReport</class>
    <class kind="struct">hpp::core::CollisionValidationReport</class>
    <class kind="struct">hpp::core::AllCollisionsValidationReport</class>
    <class kind="class">hpp::core::CollisionValidation</class>
    <class kind="class">hpp::core::ConfigValidation</class>
    <class kind="class">hpp::core::ConfigValidations</class>
    <class kind="class">hpp::core::continuousValidation::Dichotomy</class>
    <class kind="class">hpp::core::continuousValidation::Initializer</class>
    <class kind="class">hpp::core::continuousValidation::Progressive</class>
    <class kind="class">hpp::core::ContinuousValidation</class>
    <class kind="class">hpp::core::JointBoundValidationReport</class>
    <class kind="class">hpp::core::JointBoundValidation</class>
    <class kind="class">hpp::core::pathValidation::Discretized</class>
    <class kind="struct">hpp::core::PathValidationReport</class>
    <class kind="class">hpp::core::PathValidation</class>
    <class kind="class">hpp::core::PathValidations</class>
    <class kind="class">hpp::core::ValidationReport</class>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga1e1cbbaf63b2578d9b478256b84b5fda</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dichotomy</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gae37786e33010961a02753d8a4429abcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dichotomy</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gad606aaf62cbf056e9fb44d698dd09a88</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gaff093eacd98246cf36b55fce0973bc8d</anchor>
      <arglist>(const DichotomyWkPtr_t weak)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga893f43ef71ef8f5b348b90f0c0d4ae7c</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Progressive</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gac32201994f1f059750b9b2f033f064b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Progressive</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gafffe07f4a15909e051da70a989d2fbb4</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>gab70034bcc41d42ba9b721f254ae48228</anchor>
      <arglist>(const ProgressiveWkPtr_t weak)</arglist>
    </member>
    <member kind="function">
      <type>DiscretizedPtr_t</type>
      <name>createDiscretizedCollisionChecking</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga2fcabfd40f8c7b422c1247223bdb9490</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="function">
      <type>DiscretizedPtr_t</type>
      <name>createDiscretizedJointBound</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga94717ccf260a93ce48dd4affe06189df</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ga656195c66d722769e89c7a8af48181a2</anchor>
      <arglist>(std::ostream &amp;os, const ValidationReport &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>roadmap</name>
    <title>Roadmap</title>
    <filename>a00235.html</filename>
    <class kind="class">hpp::core::Edge</class>
    <class kind="class">hpp::core::Node</class>
    <class kind="class">hpp::core::Roadmap</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ga1947b6d9b37f1a315e596b194adc6159</anchor>
      <arglist>(std::ostream &amp;os, const Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ga8ae1800d63fa0035ab3281311e873193</anchor>
      <arglist>(std::ostream &amp;os, const Roadmap &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>constraints</name>
    <title>Constraints</title>
    <filename>a00236.html</filename>
    <class kind="class">hpp::core::ConfigProjector</class>
    <class kind="class">hpp::core::ConstraintSet</class>
    <class kind="class">hpp::core::Constraint</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac19b1e5c7ce1ad90ee52aa3491bd2e9f</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;constraint)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>path</name>
    <title>Path</title>
    <filename>a00237.html</filename>
    <class kind="class">hpp::core::DubinsPath</class>
    <class kind="class">hpp::core::InterpolatedPath</class>
    <class kind="class">hpp::core::KinodynamicPath</class>
    <class kind="class">hpp::core::path::Hermite</class>
    <class kind="class">hpp::core::path::Spline</class>
    <class kind="class">hpp::core::PathVector</class>
    <class kind="class">hpp::core::Path</class>
    <class kind="class">hpp::core::ReedsSheppPath</class>
    <class kind="class">hpp::core::StraightPath</class>
    <class kind="class">hpp::core::SubchainPath</class>
    <member kind="enumeration">
      <type></type>
      <name>PolynomeBasisType</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga18289218cbc246c9fb909ab171496799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CanonicalPolynomeBasis</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gga18289218cbc246c9fb909ab171496799a937ab195a8b21e3bdbcec4e8a09bf7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BernsteinBasis</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gga18289218cbc246c9fb909ab171496799a0c8ba89811b44840450fdc1df6210fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gac90e244c2dcfbdf7f95f0b59d825ac51</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>parser</name>
    <title>Parser</title>
    <filename>a00238.html</filename>
    <class kind="class">hpp::core::parser::RoadmapFactory</class>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; std::string &gt;</type>
      <name>StringSequence</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga6a93d581ac8f3ae38e05cedf2d8e3bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; double &gt;</type>
      <name>ConfigurationFactory</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>gaddac3c470d5ddef6a2dbbdd69ee46327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; unsigned int &gt;</type>
      <name>IdSequence</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga3dabee6e928569a6a1c3e77f84c0314b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga50b557a4d968611b4cb9370a9762c6f2</anchor>
      <arglist>(std::ostream &amp;o, const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga8db26505fc7081063e9e5b00cd7498d1</anchor>
      <arglist>(const std::string &amp;filename, const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ga16f89457b51f1dffce2a7c77e1bae958</anchor>
      <arglist>(const std::string &amp;filename, const RoadmapPtr_t &amp;roadmap, const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>hpp_core_plugin</name>
    <title>Plugins</title>
    <filename>a00239.html</filename>
    <namespace>hpp::core::plugin</namespace>
    <class kind="class">hpp::core::ProblemSolverPlugin</class>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CORE_DEFINE_PLUGIN</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>gab3cdfd76b4852eb48df559321c9ab2cf</anchor>
      <arglist>(PluginClassName)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>hpp_core_porting_notes</name>
    <title>Porting notes</title>
    <filename>a00004</filename>
    <docanchor file="a00004" title="Porting from version 3.1 to version 3.2">hpp_core_porting_3_1_to_3_2</docanchor>
    <docanchor file="a00004" title="Modification in validation reports">hpp_core_porting_3_1_to_3_2_report</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>hpp-core documentation</title>
    <filename>index</filename>
    <docanchor file="index">hpp_core_documentation</docanchor>
    <docanchor file="index" title="Introduction">hpp_pinocchio_intro</docanchor>
    <docanchor file="index" title="What is Pinocchio?">OverviewIntro</docanchor>
    <docanchor file="index" title="How to install Pinocchio?">OverviewInstall</docanchor>
    <docanchor file="index" title="Simplest example with compilation command">OverviewSimple</docanchor>
    <docanchor file="index" title="Compiling and running your program">OverviewSimpleCompile</docanchor>
    <docanchor file="index" title="Explanation of the program">OverviewSimpleExplain</docanchor>
    <docanchor file="index" title="More complex example with C++ and Python">OverviewComplex</docanchor>
    <docanchor file="index" title="Compiling and running your program">OverviewComplexCompile</docanchor>
    <docanchor file="index" title="Explanation of the program">OverviewComplexExplain</docanchor>
    <docanchor file="index" title="About Python wrappings">OverviewPython</docanchor>
    <docanchor file="index" title="How to cite Pinocchio">OverviewCite</docanchor>
    <docanchor file="index" title="Where to go from here?">OverviewConclu</docanchor>
    <docanchor file="index">hpp_constraints_documentation</docanchor>
  </compound>
</tagfile>
