<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AABB.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00114</filename>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00146" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">hpp::fcl::AABB</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function" static="yes">
      <type>static AABB</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4157e8dae53fc58ac6f0cad82a9625f1</anchor>
      <arglist>(const AABB &amp;aabb, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AABB</type>
      <name>rotate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afde48140dfd4c9cec4586943cc7e1093</anchor>
      <arglist>(const AABB &amp;aabb, const Matrix3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa55dc0aa22483464ca86d19593cfd425</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac46865af0d6227385e8e9ad84f33f7e1</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assimp.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/mesh_loader/</path>
    <filename>a00115</filename>
    <includes id="a00150" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <includes id="a00122" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <class kind="struct">hpp::fcl::TriangleAndVertices</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>unsigned</type>
      <name>buildMesh</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3e3237e7a85dff5582f415243a6a5591</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, const aiNode *node, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>meshFromAssimpScene</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9594728658fc60120cd9d35b4a735f0e</anchor>
      <arglist>(const std::string &amp;name, const fcl::Vec3f &amp;scale, const aiScene *scene, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPolyhedronFromResource</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6f4dd9e9c902262cc1750186ac08a5fe</anchor>
      <arglist>(const std::string &amp;resource_path, const fcl::Vec3f &amp;scale, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;polyhedron)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00116</filename>
    <includes id="a00142" name="kDOP.h" local="no" imported="no">hpp/fcl/BV/kDOP.h</includes>
    <includes id="a00114" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00148" name="include/hpp/fcl/BV/OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="a00153" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <includes id="a00150" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <includes id="a00143" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="a00155" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertBV</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3861944f9a1a8ca6faf55693b8d6a48a</anchor>
      <arglist>(const BV1 &amp;bv1, const Transform3f &amp;tf1, BV2 &amp;bv2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_fitter.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00117</filename>
    <includes id="a00121" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="a00143" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="a00150" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <class kind="class">hpp::fcl::BVFitterBase</class>
    <class kind="class">hpp::fcl::BVFitter</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBB &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; RSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; kIOS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBBRSS &gt;</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6ed2b8b3e3552c6d2c50b1cd18d0eb25</anchor>
      <arglist>(Vec3f *ps, int n, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBB &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a47023cdf59d58acd42c8e61956d1656c</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; RSS &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abc1822cad419fa4a51eec74a50ec8dd2</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; kIOS &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a104b61e67c94287f693cc837284ddd77</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBBRSS &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0dcecfe497127679f97a56516d91fefd</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_node.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00118</filename>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00146" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <includes id="a00116" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <class kind="struct">hpp::fcl::BVNodeBase</class>
    <class kind="struct">hpp::fcl::BVNode</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BV_splitter.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00119</filename>
    <includes id="a00121" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="a00143" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="a00150" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <class kind="class">hpp::fcl::BVSplitterBase</class>
    <class kind="class">hpp::fcl::BVSplitter</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SplitMethodType</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEAN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a41984460d51b7a959a8dc725e48f3804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEDIAN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a48f7486082fdbb59501f0b5683fed99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_BV_CENTER</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096af22470b4ca15070ae44678e8b39bcbd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_front.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00120</filename>
    <class kind="struct">hpp::fcl::BVHFrontNode</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>std::list&lt; BVHFrontNode &gt;</type>
      <name>BVHFrontList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8c20ec44e3a418af3dc5c65703874616</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFrontList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0046ac4155cea8a2c752fe897de122fb</anchor>
      <arglist>(BVHFrontList *front_list, int b1, int b2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_internal.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00121</filename>
    <includes id="a00130" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BVHBuildState</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_EMPTY</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a599291b2358a576bb29ed6bc3f771b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_BEGUN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34acbb3fd1a056ebe10e707a4e9d90ed679</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_PROCESSED</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34ac31973785f46a7236953db39831aa2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATE_BEGUN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34afd113a7a9f4f107f391973f10be2f7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATED</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34af2efe60e4f29aa2f2196ce63d70898d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_REPLACE_BEGUN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a26bfcd09168f3f2c6e37ec8996dd257b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHReturnCode</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_OK</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a5bb79400f0c1491a91e1714255ac2197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_MODEL_OUT_OF_MEMORY</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a6e8d204d67fd86da296cf5df8df6988f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_OUT_OF_SEQUENCE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a92aab1ee2362a2544e9d2d01fcfb22d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_MODEL</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aba9e47646636d73494e193503de1275b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_PREVIOUS_FRAME</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aaf8daf2fa25e777017147da4ef285aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNSUPPORTED_FUNCTION</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a69fc64d3283b0d6c981fc4d7359537e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNUPDATED_MODEL</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a20ce868149503262e668936ae788fbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_INCORRECT_DATA</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448afa43ae63ca78c626a5b48b2af22d4034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a101d30d34324deb868539c5397892e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHModelType</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aac715e3d1c0ca1f507696344d223fb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_TRIANGLES</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4ae43bfff9c3dba9c5be72504b905f716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_POINTCLOUD</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aa8e8c3edd6807b005bd21f6d42e66e5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_model.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00122</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00121" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="a00118" name="BV_node.h" local="no" imported="no">hpp/fcl/BV/BV_node.h</includes>
    <includes id="a00119" name="BV_splitter.h" local="no" imported="no">hpp/fcl/BVH/BV_splitter.h</includes>
    <includes id="a00117" name="BV_fitter.h" local="no" imported="no">hpp/fcl/BVH/BV_fitter.h</includes>
    <class kind="class">hpp::fcl::BVHModel</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BVH_utility.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00123</filename>
    <includes id="a00122" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8d59b847973f205049e26bd4960254b1</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad0e66b8aefd76eeb2ad20f0f1972f3bd</anchor>
      <arglist>(BVHModel&lt; OBB &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a30d98fb40dd186ace51beae395f975f3</anchor>
      <arglist>(BVHModel&lt; RSS &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>BVHModel&lt; BV &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a50d3dace9fb2165f7f7cac2f96d872c1</anchor>
      <arglist>(const BVHModel&lt; BV &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCovariance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af00bb05ed8ae1410da7e268c26b8ed8b</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adaceec24c8bd00c1f36af97e8e0f9127</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Matrix3f &amp;axes, Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5b66ef2a6abbd25f89ebcd5f1e9d7ff5</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;axes, Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circumCircleComputation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6e0aec22c4b80b3a60c442936c6db613</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a14232ec52eedd35670d6665df301f6d1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00124</filename>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a92c6bbd26ada192d5a17fd054de5aed2</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad6d6761718327dee06a19e069ada4854</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_data.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00125</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="struct">hpp::fcl::Contact</class>
    <class kind="struct">hpp::fcl::CollisionRequest</class>
    <class kind="struct">hpp::fcl::CollisionResult</class>
    <class kind="struct">hpp::fcl::DistanceRequest</class>
    <class kind="struct">hpp::fcl::DistanceResult</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>GJKSolverType</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac3af2670aca610715906987d9be25013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GST_INDEP</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac3af2670aca610715906987d9be25013a3680f5794bfdc7a07a521ecbb6856bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CollisionRequestFlag</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a6c6a81beb93df33ef631fb1c5f85b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTANCE_LOWER_BOUND</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a5748b82aa4907305d88b544f1a0d6782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REQUEST</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a51c6f10acf2a00d6364f494c59b19c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator~</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a56fef7e1565be433b2d4bda02d9b40f5</anchor>
      <arglist>(CollisionRequestFlag a)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator|</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad3a2e46341378309e16d1cbdc49681e9</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator&amp;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a01b2d93d4e2832cadb6f898d7d3bfc6f</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator^</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9865727c7e01efebdad7c69e38f0efe6</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afdc036f7a9abdd49bbc520055bd197dc</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a45cdaea65b84b32c82928ea0b1f88337</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a046f64624a803a4738c273a9a075a488</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_func_matrix.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00126</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <class kind="struct">hpp::fcl::CollisionFunctionMatrix</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>collision_node.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00127</filename>
    <includes id="a00157" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00159" name="traversal_node_bvhs.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvhs.h</includes>
    <includes id="a00120" name="BVH_front.h" local="no" imported="no">hpp/fcl/BVH/BVH_front.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa3a2d8d36188e5bd301bb9abe185ff39</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;request, CollisionResult &amp;result, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a24d847e12d6faf3cd5b0aec8e9c6b525</anchor>
      <arglist>(DistanceTraversalNodeBase *node, BVHFrontList *front_list=NULL, int qsize=2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_object.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00128</filename>
    <includes id="a00114" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00155" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="class">hpp::fcl::CollisionGeometry</class>
    <class kind="class">hpp::fcl::CollisionObject</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OBJECT_TYPE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743ab97b195154ce66bcde999b96955c34b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a891e2acf8e8a0f7d09161116763e7786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a055e29c6c327db3317981d6e10ea483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a07875801169d528106cdc18050d34b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a8f0daf652a81850f41b7a5f9edd0973a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NODE_TYPE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a09499bc968015e70c88abd0ac49ec576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a6b8b72b2bc94c4cdaf0f8bdfe2f57d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a97792a9e5b54a66e35d622fc451ae228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629ac6537c6f46eb315caa62e958d6a01ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a2bba1b5c0c32a60d102d873a87af3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a7cc7aacb5f760c03eecf10e777ab43a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a82f9a72132fc3ac2129e850eb3f587a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a5b262aadde08387b5024851aefd24f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629aa5ada6139dd3dfd92b42ca868e22de5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a968d76f0f0e986116eeb66a8c5625e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629abaafdecaefcd7cc77bb222507c8ed5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a1b92d87b25a7b37c0165dc748e87f0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629ad8b2f221e96d4115afcb432f566b91aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629ab8222ab78f5e34873e47ff38a4a60990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629aaf3f4f6aff7014652bc616023608f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a60419a2711acdcd7f0cec275b690204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a8177e508ab379d8adf9ac8ec6f6b00cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a165fed59837736b3cf419c9371b10ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629aeed5451597a2217f56d409fbd501476b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a28eadc00e07b871426473f77fd298654</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_utility.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00129</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>CollisionGeometry *</type>
      <name>extract</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae90d115db6fbc782ba03e0a7698ab309</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>data_types.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00130</filename>
    <class kind="class">hpp::fcl::Triangle</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>double</type>
      <name>FCL_REAL</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adea4a7b8739d4b402df24c8f813f9167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint64_t</type>
      <name>FCL_INT64</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2692612ad5b645d6d2b11ec2cb47b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int64_t</type>
      <name>FCL_UINT64</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af6906da3f4af5538293b15c789b7eae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint32_t</type>
      <name>FCL_UINT32</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a17af3f19f8e8cf54e668f110b33a4db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int32_t</type>
      <name>FCL_INT32</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a146cb79ce3546457f63484d8653f1aff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>details.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/src/narrowphase/</path>
    <filename>a00131</filename>
    <includes id="a00127" name="collision_node.h" local="no" imported="no">hpp/fcl/collision_node.h</includes>
    <includes id="a00161" name="traversal_node_setup.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_setup.h</includes>
    <includes id="a00147" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <class kind="struct">hpp::fcl::details::ContactPoint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lineSegmentPointClosestToPoint</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad74448ba245f84e92964415430e9e6fc</anchor>
      <arglist>(const Vec3f &amp;p, const Vec3f &amp;s1, const Vec3f &amp;s2, Vec3f &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>abdf4dd5bf43fc5faa6232f86bf882602</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aaa3ad7e0e3f64b2e5913d59d046e7ff3</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCylinderDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a46ae4abaa69cb073fa56a6cc10ad170d</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a53409ec0d0f056087174bf70fccc7939</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4bcaa999947f69643c67c4b026aac9d6</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>segmentSqrDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae64dcb74833601930e65f5cf340e9d6c</anchor>
      <arglist>(const Vec3f &amp;from, const Vec3f &amp;to, const Vec3f &amp;p, Vec3f &amp;nearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>projectInTriangle</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ada136020ea9fc32c579a6151ca14bc57</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3, const Vec3f &amp;normal, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a77e864eced1982f43af542c16f1ee6a0</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab436f5e0ee56e7272a76991b08ea4dd6</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a5f23a98f33621802770322311114ca12</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a71c3b63fad5224fe749c0674da68df07</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lineClosestApproach</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a01ad1bf75ebac5d6b5182b9d6b635155</anchor>
      <arglist>(const Vec3f &amp;pa, const Vec3f &amp;ua, const Vec3f &amp;pb, const Vec3f &amp;ub, FCL_REAL *alpha, FCL_REAL *beta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>intersectRectQuad2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1b2be54c2293b4fd0c821fa9cb458a80</anchor>
      <arglist>(FCL_REAL h[2], FCL_REAL p[8], FCL_REAL ret[16])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cullPoints2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2f9f7834b25c98253d1eee37a9bff748</anchor>
      <arglist>(int n, FCL_REAL p[], int m, int i0, int iret[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boxBox2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3efed42afa53e10d6cb12c8aee45495e</anchor>
      <arglist>(const Vec3f &amp;side1, const Matrix3f &amp;R1, const Vec3f &amp;T1, const Vec3f &amp;side2, const Matrix3f &amp;R2, const Vec3f &amp;T2, Vec3f &amp;normal, FCL_REAL *depth, int *return_code, int maxc, std::vector&lt; ContactPoint &gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareContactPoints</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6b8e614972a9ab4b2411cd5f6a50c6d2</anchor>
      <arglist>(const ContactPoint &amp;c1, const ContactPoint &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxBoxIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a0ae72137615ad019d628eaf9663988ea</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth_, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>acdbc4ec76f14d4042d0ca323a842d058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a736ba2a729606d34af9fcbf5feb628ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a04d86f59357581007b4ab079cf50f7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae9028aa6f9e5f68f5844f488cbeae004</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa73c0bc0cce29f5855671b5fe59a9535</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab33117e360755821af52cfe1556e9f27</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsuleHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7aef1441d0e624780c5849a2ec406a39</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>acc72e6011e602fb1701093ae43117763</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coneHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1e1c570de4b6d603ea687863f1992154</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1ed782af7b4ca1ab28f20f89076fd8b0</anchor>
      <arglist>(const Convex &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceTriangleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab07d68942b42396f9d647fd87d943e7a</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a281a49255faae461198ecaed5cbe2e41</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3ecbf7e7887298b43b3c39cd1a17d11e</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f &amp;p, Vec3f &amp;d, Halfspace &amp;s, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>planeIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac1f5bbb96e2e88210d952146a534ad67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>planeIntersectTolerance&lt; double &gt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aaf9f0a709957b7dd69b619a70a6d7a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>planeIntersectTolerance&lt; float &gt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afa2cf3bbce6cf362400ce60faf2e9fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>spherePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a81638ad0d66c1948c768e8fb23a21fdb</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxPlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a04f0fbf51a9254bedc663b9d87ca33d8</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxSphereDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad006a11ba7ff9fad2f6260ebb4256477</anchor>
      <arglist>(const Box &amp;b, const Transform3f &amp;tfb, const Sphere &amp;s, const Transform3f &amp;tfs, FCL_REAL &amp;dist, Vec3f &amp;pb, Vec3f &amp;ps, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsulePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a487edd7d0f258f8e8ae2bf51e9e91cdb</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderPlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a94610ecd0149efb25f77098fb679caa0</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2ad015b80e0f60421c943c5e64d70423</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexPlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aeddc3e91476f8ce70adefbc54c3fa2fc</anchor>
      <arglist>(const Convex &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeTriangleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1f2623fa152f2a71df6a7dfeb00510b2</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspacePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a43ef9cfbc30cc714ecf94e2158f09c3b</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4b7ed102cb562e7366f5914ae9e30928</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *, FCL_REAL *, Vec3f *)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computePenetration</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1e5b67c1c8d8fd6b3f459eda8ed61e29</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, const Transform3f &amp;tf1, const Transform3f &amp;tf2, Vec3f &amp;normal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00132</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a555bf285d1673306077fafed69baa66d</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a96bdf3a7cb8e472cfecfb2b55013ca50</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>include/hpp/fcl/distance_func_matrix.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00133</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <class kind="struct">hpp::fcl::DistanceFunctionMatrix</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>src/distance_func_matrix.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/src/</path>
    <filename>a00134</filename>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aaf49e7d06c8c0c59b1375f01202afa09</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a93c6c90392dd705df05b2f565017194b</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doc.hh</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00135</filename>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00136</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionObject &gt;</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8d2a9681dce6546ad22ba34efc9ac53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionObject &gt;</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae73445793afcbbbaf947f1c640402d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>CollisionGeometryPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af3eb23736874699d672c2ba38fabfd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>CollisionGeometryConstPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8a3b79c97987777b6bb50177f5a710c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_shape_to_BVH_model.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>a00137</filename>
    <includes id="a00138" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00122" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4159e5bd7fcd0d21a577e28973f2a3df</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Box &amp;shape, const Transform3f &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2efddca1e728c2facad8bcf136293bee</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int seg, unsigned int ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a082ba3c2464b887cc0c0d07da0a3e69c</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int n_faces_for_unit_sphere)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9ed3aec072ce9b1504575ae48b2bbbb1</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae7eda2b0400534a4888ba1d157f51f6a</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cylinder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a848be7c97311c9ba344e6cb2152c33b0</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab0d67e9fb0ca5af3d416774645673be3</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cone)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_shapes.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>a00138</filename>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">hpp::fcl::ShapeBase</class>
    <class kind="class">hpp::fcl::TriangleP</class>
    <class kind="class">hpp::fcl::Box</class>
    <class kind="class">hpp::fcl::Sphere</class>
    <class kind="class">hpp::fcl::Capsule</class>
    <class kind="class">hpp::fcl::Cone</class>
    <class kind="class">hpp::fcl::Cylinder</class>
    <class kind="class">hpp::fcl::Convex</class>
    <class kind="struct">hpp::fcl::Convex::Edge</class>
    <class kind="class">hpp::fcl::Halfspace</class>
    <class kind="class">hpp::fcl::Plane</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>geometric_shapes_utility.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>a00139</filename>
    <includes id="a00138" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00116" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeBV</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2be1ed3cb5e10908c58ac49834bcf24c</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7e5dccd855b2e03164a861085d1bcc8c</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac439854fc5c0f54d6d05dd476ca8adf8</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af63a3acef6a1a961a5563bdd4368e421</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac2741e82aa45d5e668a5f6beb9e575ea</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7d057bcd0bc931161aaf2cada8cba84b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Convex &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a11c5ec4ef5af6e5e980808c16005d888</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a65b9ffe994ef10c0a8417220cf8128bb</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aff6072402df5dfaf645a0787c61f5ea7</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa756e64cb895761eda9bf6b84c367267</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a62e8682fcab146b16376d0ee164897a8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acc29531b43787c3d787eee2f205d1e5d</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5e589885b7ce8302c967a8ee0bb48b90</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab7a78234dab23157bc13285d5ec1c34e</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae75f48642949abe72cf0a8536af4594b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Convex &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7553598b40ac9cec73b021aeb06b36fa</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac19cf4bd5ddd03c43ad644a53a12766f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7c78518896db821ae4c252e9fa8584a2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a165618e6cd44517690b96b02d519d5ef</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae1dac581028f8a93e212767864f8091c</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af0ed4dad068cbc17368e6e0003da8bf8</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6119093dd05229ed0bbafb783b92416d</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a37581778c3f4d7a8c6aab74a0794fe4a</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a31a5196a276ce91cde2269144d96144b</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa592de4ec63a8446b7e5faa7aaaa4a7a</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7f62d309b3eb540b231afd61400f11eb</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac832310f3d393d3fa459a4e89b04accd</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a285046016d23c6a9243ec1648fa1ee03</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a134493346e13d41a50f58c8c3b703805</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab3e987c7055c59c6c909d2eafc086ad5</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2f4d9e15c1e1b0473d9ba1b60a0999ce</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad2ece30036a4f85e7c94c83cbc375440</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a389ea0f82667a14b50e3d06f73ddf65c</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a277ffcdbeb26ebc55199e6a406855dd6</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acc71a7af4b6e2e263856268cff862017</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1e0ae109d229233ad501f0ca44c0d83a</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a881ce55ecba092ac28c3e50dc9d251ac</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab8fc7100a8f801232d6edc17318ff4fd</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab73ba0d67fdb919b39b46212afadda5e</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7f7c58989901ce4833565fbad1e941cc</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1d181bb550651b697fe967c65589bd20</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a60c2357a25853e76cee3c90c8fcfdb08</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac11f0f1e774f49eef7ce62cdf76e406b</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0a77f5fb3a5542a8894e703734674548</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a437d93b4db8e66f1eb3efb7240c39eea</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a223238cae76563da8fb18c186a74b2c3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Halfspace</type>
      <name>transform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acea5b7360b35ca7d2f645cbe265b846b</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Plane</type>
      <name>transform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a869df3c83544b794997edf4221483f59</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gjk.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>a00140</filename>
    <includes id="a00138" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00155" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="struct">hpp::fcl::details::MinkowskiDiff</class>
    <class kind="struct">hpp::fcl::details::GJK</class>
    <class kind="struct">hpp::fcl::details::GJK::SimplexV</class>
    <class kind="struct">hpp::fcl::details::GJK::Simplex</class>
    <class kind="struct">hpp::fcl::details::EPA</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4903b02725b90c095e6549de6ba0699a</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_FACES</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad78b55709e00c61c0b42aae0acdc7bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_VERTICES</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a11676867b3c3184af0cbc1a4642e0a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const FCL_REAL</type>
      <name>EPA_EPS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4332243b7ea08b8ca8faf567004f25b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_ITERATIONS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a9546f6bbceffa14865ce4106e7e9e9de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>intersect.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00141</filename>
    <includes id="a00155" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="class">hpp::fcl::PolySolver</class>
    <class kind="class">hpp::fcl::Intersect</class>
    <class kind="class">hpp::fcl::Project</class>
    <class kind="struct">hpp::fcl::Project::ProjectResult</class>
    <class kind="class">hpp::fcl::TriangleDistance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>kDOP.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00142</filename>
    <includes id="a00146" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">hpp::fcl::KDOP</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae6cf593751a5ec4b8cacff23f263f2c3</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aef074fbede0ec91572f6aaf1c46cf0f1</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;, const CollisionRequest &amp;, FCL_REAL &amp;)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afe749059cefb3ccebe110119b5cce25e</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kIOS.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00143</filename>
    <includes id="a00148" name="include/hpp/fcl/BV/OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <class kind="class">hpp::fcl::kIOS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>kIOS</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6dbc1a1b53e4356bbd3762121b7d4b5f</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5d66db04e136e5499d38f20dc1f56cf5</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afd7f666001d3e5993a56cc78387c362e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a45fc6ec1ea00a75cd3d683f171b258a7</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/mesh_loader/</path>
    <filename>a00145</filename>
    <includes id="a00136" name="fwd.hh" local="no" imported="no">hpp/fcl/fwd.hh</includes>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <class kind="class">hpp::fcl::MeshLoader</class>
    <class kind="class">hpp::fcl::CachedMeshLoader</class>
    <class kind="struct">hpp::fcl::CachedMeshLoader::Key</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>matrix_3f.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00146</filename>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">hpp::fcl::Variance3f</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0290ba47d50e32cb9ec7fe9919b34dc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>narrowphase.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>a00147</filename>
    <includes id="a00140" name="gjk.h" local="no" imported="no">hpp/fcl/narrowphase/gjk.h</includes>
    <class kind="struct">hpp::fcl::GJKSolver_indep</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>include/hpp/fcl/BV/OBB.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00148</filename>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00146" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">hpp::fcl::OBB</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>OBB</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0e3572df8542d6e55a90b9ab19af8692</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9a82cf29771a725e3f2051c1f4aacc1c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0708248161a09bc67781974a45b126db</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjoint</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>src/BV/OBB.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/src/BV/</path>
    <filename>a00149</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a438b1c5b6b980188beb2ee3cc62f4d06</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const CollisionRequest &amp;request, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjoint</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBBRSS.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00150</filename>
    <includes id="a00148" name="include/hpp/fcl/BV/OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="a00153" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <class kind="class">hpp::fcl::OBBRSS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>OBBRSS</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a03fc5c77aaee689b2a042aecb92c5a77</anchor>
      <arglist>(const OBBRSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9e3192731b5c60626d90aac2516965fe</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac655c5e454b1b7ac43a4d536860e8965</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adb886982090fe15f5d0364f7423a76a6</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>octree.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00151</filename>
    <includes id="a00114" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00128" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <class kind="class">hpp::fcl::OcTree</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeChildBV</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1fdb438f1be04349f1001f66f2fae272</anchor>
      <arglist>(const AABB &amp;root_bv, unsigned int i, AABB &amp;child_bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>profile.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00152</filename>
    <class kind="class">hpp::fcl::tools::Profiler</class>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedBlock</class>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedStart</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::time</namespace>
    <namespace>hpp::fcl::tools</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_PROFILING</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a7b3827d1a940d40b5a44fa34d7f42254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>point</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac4a863e49926d2acd048cf75d4888c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>duration</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a09f5cee278621a2800b3cd6b7f5c8229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8ac8c48fdfd1731eda6a534e174527a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1cbdfd430bc6cf66673fb9ebc07a9cad</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aafa8547e25fbd027e5ac032328b46465</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSS.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00153</filename>
    <includes id="a00164" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00146" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">hpp::fcl::RSS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>RSS</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adb206c2b8c711593bb718185089d8680</anchor>
      <arglist>(const RSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a41b0545fd5f94baddd4af374018230ab</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0b55e1136e154a2aa39e85cdbbcc271b</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aee05b7707469f40cb749f0e89d827b9a</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tools.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00154</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function" static="yes">
      <type>static Derived::Scalar</type>
      <name>triple</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab05999d3462650135de37611357cca42</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;x, const Eigen::MatrixBase&lt; Derived &gt; &amp;y, const Eigen::MatrixBase&lt; Derived &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af70bf2c011f5bfc4d826b1ad5aa8d198</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;_w, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;_u, const Eigen::MatrixBase&lt; Derived3 &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hat</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abe0492146d84f67916431a7d972cd1ce</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;mat, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad8854d299d07f45639813469b850e697</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R1, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t1, const Eigen::MatrixBase&lt; Derived &gt; &amp;R2, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t2, const Eigen::MatrixBase&lt; Derived &gt; &amp;R, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a11fdb8bba107aa378d0b4144a9067e5d</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, typename Derived::Scalar dout[3], Vector *vout)</arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>quadraticForm</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a27831557d7197ee7d53a5a5074d55c44</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7673db13abffc3ce36aeacc7a8476467</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;lhs, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;rhs, const FCL_REAL tol=std::numeric_limits&lt; FCL_REAL &gt;::epsilon()*100)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setEulerZYX</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a550dc5c142d4d82193b2b00d9eda531b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R, FCL_REAL eulerX, FCL_REAL eulerY, FCL_REAL eulerZ)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setEulerYPR</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aade623336ae8887df843ad73251d54d5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R, FCL_REAL yaw, FCL_REAL pitch, FCL_REAL roll)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transform.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00155</filename>
    <includes id="a00146" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">hpp::fcl::Transform3f</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; FCL_REAL &gt;</type>
      <name>Quaternion3f</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9e6a031efadd2b45d9e6a710a4db8b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a064fdd482bd14204f4cb7961b0439221</anchor>
      <arglist>(std::ostream &amp;o, const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuatIdentity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a14ac5cbd4fdc04b67044bbc095f60378</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areQuatEquals</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0a21b6e12798f336f2008780dca4c21a</anchor>
      <arglist>(const Quaternion3f &amp;q1, const Quaternion3f &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aba763c548a5f4a9856d166f68c10169a</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a99df9bdbfcae0833e73be287400791fa</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6dd7021712377c3c830116d8f56dc6be</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/details/</path>
    <filename>a00156</filename>
    <class kind="struct">hpp::fcl::details::RelativeTransformation</class>
    <class kind="struct">hpp::fcl::details::RelativeTransformation&lt; false &gt;</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="enumvalue">
      <name>RelativeTransformationIsIdentity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab7ac5002865d9470908ac08965c8fb3fac27e3f89d015b348f5380571c3dbaed0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_base.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00157</filename>
    <includes id="a00130" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00155" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <class kind="class">hpp::fcl::TraversalNodeBase</class>
    <class kind="class">hpp::fcl::CollisionTraversalNodeBase</class>
    <class kind="class">hpp::fcl::DistanceTraversalNodeBase</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_node_bvh_shape.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00158</filename>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00138" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00139" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="a00157" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00156" name="traversal.h" local="no" imported="no">hpp/fcl/traversal/details/traversal.h</includes>
    <includes id="a00122" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <class kind="class">hpp::fcl::BVHShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeBVHCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodeOBB</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodeOBB</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::BVHShapeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeBVHDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNodeOBBRSS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_node_bvhs.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00159</filename>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00157" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00118" name="BV_node.h" local="no" imported="no">hpp/fcl/BV/BV_node.h</includes>
    <includes id="a00116" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="a00122" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <includes id="a00141" name="intersect.h" local="no" imported="no">hpp/fcl/intersect.h</includes>
    <includes id="a00138" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00147" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="a00156" name="traversal.h" local="no" imported="no">hpp/fcl/traversal/details/traversal.h</includes>
    <class kind="class">hpp::fcl::BVHCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshCollisionTraversalNode</class>
    <class kind="struct">hpp::fcl::details::DistanceTraversalBVTesting_impl</class>
    <class kind="struct">hpp::fcl::details::DistanceTraversalBVTesting_impl&lt; OBB &gt;</class>
    <class kind="class">hpp::fcl::BVHDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNodeOBBRSS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; OBB, 0 &gt;</type>
      <name>MeshCollisionTraversalNodeOBB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a726b3678ab95b6278e39ac64d17551cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; RSS, 0 &gt;</type>
      <name>MeshCollisionTraversalNodeRSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a49b6fcb2ebd68fe0888701b64f634b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; kIOS, 0 &gt;</type>
      <name>MeshCollisionTraversalNodekIOS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a690ebaee0e25f28d92e0a28937948273</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; OBBRSS, 0 &gt;</type>
      <name>MeshCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5e5a5ee4bf9689305016cf82b8758bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getBVAxes</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3516105f086bde515b62c3470992a88a</anchor>
      <arglist>(const BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getBVAxes&lt; OBBRSS &gt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a60d0f4a34a6ac223d659ea21300bcae9</anchor>
      <arglist>(const OBBRSS &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_octree.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00160</filename>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00157" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00147" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="a00139" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="a00151" name="octree.h" local="no" imported="no">hpp/fcl/octree.h</includes>
    <includes id="a00122" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <class kind="class">hpp::fcl::OcTreeSolver</class>
    <class kind="class">hpp::fcl::OcTreeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeOcTreeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeOcTreeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeShapeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshOcTreeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeMeshCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshOcTreeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeMeshDistanceTraversalNode</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_node_setup.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00161</filename>
    <includes id="a00159" name="traversal_node_bvhs.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvhs.h</includes>
    <includes id="a00162" name="traversal_node_shapes.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_shapes.h</includes>
    <includes id="a00158" name="traversal_node_bvh_shape.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvh_shape.h</includes>
    <includes id="a00123" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a15f87e0645d24279eea615474f487ea2</anchor>
      <arglist>(ShapeCollisionTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a40a15d7a08da7bf388b5e6662f843170</anchor>
      <arglist>(MeshShapeCollisionTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab829995f2ac5e7fca9727b3c4cfa760a</anchor>
      <arglist>(ShapeMeshCollisionTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a76177c54a87a7d0e83359e9f31fc16ef</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac758ce4662fb8364bf7e5bd9c3365d50</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a63e351f2bf1e9b768169f678358c9e6e</anchor>
      <arglist>(MeshShapeCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aaffeba23ec17f345de8f1d65d9817cbf</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a33c055390acac1666f48afa7384360e8</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a522eb4cc3a55a9d9d5038433265a8452</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a45db6776afcb61d69a933b72cd6f6caf</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a03606351a7c41043007a25e1e47658c3</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a08cdecb8d9d2075073ce190a554e44c2</anchor>
      <arglist>(MeshCollisionTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84b88de47509b9c313b105c2da8dff2c</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4a7f812d639694fa6dbe11bfe9714192</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a05174836b82ea15bc277146d75497816</anchor>
      <arglist>(MeshCollisionTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad46a88ef06a6a02062ab16ab09b70dab</anchor>
      <arglist>(MeshCollisionTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad949bfdcee9741981a4c7ed8b8c1c9a5</anchor>
      <arglist>(ShapeDistanceTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2078670bca24b2979c0eb6bf8837cab4</anchor>
      <arglist>(MeshDistanceTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a20cd04c45435db3ce27b681825478b74</anchor>
      <arglist>(MeshDistanceTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af8567469de1932c375b904d482630fdc</anchor>
      <arglist>(MeshDistanceTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7053de0f57a197081254d43c7bdea599</anchor>
      <arglist>(MeshDistanceTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af050284fcc6e54d1308309efbdd020cd</anchor>
      <arglist>(MeshShapeDistanceTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae359db8caee004d125ece3aebb118b25</anchor>
      <arglist>(ShapeMeshDistanceTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a676f8d12f5e37e1385f2a3fecaa7c0d3</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2c0ded2c4101bfd44d9a0a4c18732749</anchor>
      <arglist>(MeshShapeDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af4c98516479a14bf6744c4ffa3067189</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setupShapeMeshDistanceOrientedNode</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a42c6b2343f269625bd042b9ea3f1cc50</anchor>
      <arglist>(OrientedNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a330a76c89cce5ceb77f8336f48280160</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af66410d5dff99760cf28b549726808c0</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7fd5d0c921f4d55c5ae480b6f5e8bf8e</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_shapes.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00162</filename>
    <includes id="a00125" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00157" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00147" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="a00139" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="a00116" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <class kind="class">hpp::fcl::ShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeDistanceTraversalNode</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_recurse.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00163</filename>
    <includes id="a00157" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00159" name="traversal_node_bvhs.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvhs.h</includes>
    <includes id="a00120" name="BVH_front.h" local="no" imported="no">hpp/fcl/BVH/BVH_front.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a67bb215a85d574ba182029ca8528fde7</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2ea3bd6d99e974bed8ac998d548c64e4</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8fc4927bd1f83d66bbb3cf8f69e079de</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa845c64b800a6c5b227fc7cd02909e2e</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceQueueRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2f6425035a5938182ff54571d684a79d</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagateBVHFrontListCollisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abbfaae9cba880d8433279f402b62455a</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;request, CollisionResult &amp;result, BVHFrontList *front_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vec_3f.h</name>
    <path>/local/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00164</filename>
    <includes id="a00130" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00154" name="tools.h" local="no" imported="no">hpp/fcl/math/tools.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 1 &gt;</type>
      <name>Vec3f</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2c54f23d974b75093503b78c52ebf26c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::AABB</name>
    <filename>a00004.html</filename>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab9b9351f304ecd9abbaeeec65807f546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0d0974d696d1dc02d0b35429d7701106</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a7c168540fedc8f401997b80477f17b76</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a62c00a30c6e0702f713c436a6d793567</anchor>
      <arglist>(const AABB &amp;core, const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ad102754f94c9c2c461faedad14da0546</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a782b161ac52d30a0bc4f9797711df783</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a250c3d036c55c754ce205562be7a1c29</anchor>
      <arglist>(const AABB &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a3eb53c0c8e268db257a433194c591758</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>axisOverlap</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aaadffb2e2b4ddc20b92cc313d3483d9c</anchor>
      <arglist>(const AABB &amp;other, int axis_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>af792956e6cbb55fc54b86b8d16abf5f2</anchor>
      <arglist>(const AABB &amp;other, AABB &amp;overlap_part) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a6eb438028568c82a5043b2c56e6a7896</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a7c13494e2b7353de97f6d92a2a30d1e6</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a10681d706f476e22c0d7b4bdfddfab96</anchor>
      <arglist>(const AABB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>operator+</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a665ee59b3c00e0bb2bd26bfc7593ebcd</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a725269ad83996dba4473e8eab0faa377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>abf882547c23f06ffd3c423360032a92d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a17b72c320440c9998528e97347bf6ecb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aa8f447e633b5893ed9229f8c1d0de9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>adf091e1210ed27add02489159edb3bc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a67f45cc6c52741ea5ac1973fe15d8644</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab4b9d4785303c4e1a958592066e5c216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>acb1e7a9232b6342ab80614c64f37df01</anchor>
      <arglist>(const AABB &amp;other, Vec3f *P, Vec3f *Q) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>af7edc7a1708d843ed4285ed2207fa25f</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>afa21b890d2e2d686accbfdd11d744be1</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ade72189539494c995941d034bd212b8c</anchor>
      <arglist>(const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aca6805cee7755a8b90feac79df3cc437</anchor>
      <arglist>(const AABB &amp;core, FCL_REAL ratio)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>min_</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a8c9104bd2301ea2c59dfc655ba0eb42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>max_</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a023ee7b9a78804c86f0a98aee5834b68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Box</name>
    <filename>a00005.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2cce20c67069f8ea9903f1a4acee9f5d</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a649acee9891aedf1cc76a52447d92b5c</anchor>
      <arglist>(const Vec3f &amp;side_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aadb5563a59b8fcbcd2027ae9810d37e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a06530eb0fade074c2dc56eb367b4f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae45db43db6fb67e3877dc35064cb3957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a50e6e2c689f011f580c656273b5ce349</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a0d773e6b2f9fa4bccdc219562afea5ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>side</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad887e328aea413b62d997d4d3cd44ff1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter</name>
    <filename>a00006.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::BVFitterBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitter</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a52bbc0f2b45eeb0f13056a5c56aeb2e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aae543fda3dea34496eef93478d3dfb33</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a6d3bdbff3269f2f2e504120680e94f87</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>BV</type>
      <name>fit</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a8569d76bdf7390678bd725953c9afa12</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a219859cb66ade41fafce45b217c39169</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; kIOS &gt;</name>
    <filename>a00007.html</filename>
    <base>BVFitterBase&lt; kIOS &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad5d3ef110d69c73407c357198fe70779</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a5bbfd45f0be5a6489da4ccec40c3ea8d</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>fit</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a874d96e7ff3b7ed5fd46f629729488e6</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a5a2090bc2324bf3cdf79ebecf6038a2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; OBB &gt;</name>
    <filename>a00008.html</filename>
    <base>BVFitterBase&lt; OBB &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a57de27a1d12f402fb928b4490c1a2f40</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac26033f47130e1ca77da1d75b92b9c80</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>fit</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afbe380fac71c8057bd54b090dd134452</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a296e8c9ccd5660f832f492e7ab098383</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; OBBRSS &gt;</name>
    <filename>a00009.html</filename>
    <base>BVFitterBase&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a9b135abe617250f6e527a7bfb3d6bd7c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a2893ae694872a5a268bc576a1fac6f0d</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>fit</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a72f3f61e00301abcb4721bd47ecd771a</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>abae414eb4bc8156f4cb21068aaf52b2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; RSS &gt;</name>
    <filename>a00010.html</filename>
    <base>BVFitterBase&lt; RSS &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac267d11b3f9efdb99eaa3b3db6ec8531</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ae6fb4b637ce7212b888a2a1ad80148d5</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>fit</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a58efba308cf646fc072311eaf1fb319f</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a19da9da2fbfd0b822126411ad7fb73a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitterBase</name>
    <filename>a00011.html</filename>
    <templarg>BV</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a676abcc713e7191f86a272ef46689c43</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a954d1dfddcb66326e4e4f8620a9e1cb0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BV</type>
      <name>fit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa95116388881819d4c999167247c7b87</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a708761430813b78f2550906f574a9b49</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; kIOS &gt;</name>
    <filename>a00011.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a676abcc713e7191f86a272ef46689c43</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a954d1dfddcb66326e4e4f8620a9e1cb0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual kIOS</type>
      <name>fit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa95116388881819d4c999167247c7b87</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a708761430813b78f2550906f574a9b49</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; OBB &gt;</name>
    <filename>a00011.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a676abcc713e7191f86a272ef46689c43</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a954d1dfddcb66326e4e4f8620a9e1cb0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBB</type>
      <name>fit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa95116388881819d4c999167247c7b87</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a708761430813b78f2550906f574a9b49</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; OBBRSS &gt;</name>
    <filename>a00011.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a676abcc713e7191f86a272ef46689c43</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a954d1dfddcb66326e4e4f8620a9e1cb0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBBRSS</type>
      <name>fit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa95116388881819d4c999167247c7b87</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a708761430813b78f2550906f574a9b49</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; RSS &gt;</name>
    <filename>a00011.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a676abcc713e7191f86a272ef46689c43</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a954d1dfddcb66326e4e4f8620a9e1cb0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RSS</type>
      <name>fit</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa95116388881819d4c999167247c7b87</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a708761430813b78f2550906f574a9b49</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHCollisionTraversalNode</name>
    <filename>a00012.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHCollisionTraversalNode</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad035ee240e7493b1ac06b9048d58386c</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a66b65589da3b710d1149df087130fca1</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aca9be6a4a4ec3084228a1efe9aa84469</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2438b1209a22fc5e0a5c71ecc0725b12</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a079a85770e9d48ed0daa0acd72d4f67d</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a058d608e8332e10c751d7806cd675c89</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a99c366775b047fd34e4eb8ce2df9a163</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa01f9ffa867cb35b07c92d976c85db95</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac61c07d68a2091f3142951407c3dc826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa9769bd131be707fddf53de819f8f944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a5ede1c6b90d5a26d4ab21179d3be359d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>acbad78d764c51bf500f8c98c2d693940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae8b5ddc7fdf8fc092594e58fe019ca6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHDistanceTraversalNode</name>
    <filename>a00013.html</filename>
    <templarg>BV</templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a82f3472a11e798520fcc465737ce593c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>af51ee8350443cb0295be41f5ba444ca3</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a477effaac8ec6ff751fce647ecd770b8</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aba796feab34b51c7c72be47716810bba</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8b7ea34d8ae5e85d75906eece8271683</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a725d37a12a1f612fccb84382bf0ffcc9</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa5d402a1c02cb758732d31e5fc40285d</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a382dc4aba9613e86f964a1d33bed6a61</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae635ad221c92360a66c14df54a498430</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7e258cf302336e24d1591d53e2df7dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>addfe36bc3caeb690539ae67223f3838e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a973242ff6a51b68616e3b7b24dfcb43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8226e16e24a5b7b4ca4bf1a5157f1107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a833ec248a79f62697e188c2bcdf1e60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHDistanceTraversalNode&lt; kIOS &gt;</name>
    <filename>a00013.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a82f3472a11e798520fcc465737ce593c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>af51ee8350443cb0295be41f5ba444ca3</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a477effaac8ec6ff751fce647ecd770b8</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aba796feab34b51c7c72be47716810bba</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8b7ea34d8ae5e85d75906eece8271683</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a725d37a12a1f612fccb84382bf0ffcc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa5d402a1c02cb758732d31e5fc40285d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a382dc4aba9613e86f964a1d33bed6a61</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae635ad221c92360a66c14df54a498430</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7e258cf302336e24d1591d53e2df7dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>addfe36bc3caeb690539ae67223f3838e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a973242ff6a51b68616e3b7b24dfcb43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8226e16e24a5b7b4ca4bf1a5157f1107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a833ec248a79f62697e188c2bcdf1e60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHDistanceTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00013.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a82f3472a11e798520fcc465737ce593c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>af51ee8350443cb0295be41f5ba444ca3</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a477effaac8ec6ff751fce647ecd770b8</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aba796feab34b51c7c72be47716810bba</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8b7ea34d8ae5e85d75906eece8271683</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a725d37a12a1f612fccb84382bf0ffcc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa5d402a1c02cb758732d31e5fc40285d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a382dc4aba9613e86f964a1d33bed6a61</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae635ad221c92360a66c14df54a498430</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7e258cf302336e24d1591d53e2df7dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>addfe36bc3caeb690539ae67223f3838e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a973242ff6a51b68616e3b7b24dfcb43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8226e16e24a5b7b4ca4bf1a5157f1107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a833ec248a79f62697e188c2bcdf1e60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHDistanceTraversalNode&lt; RSS &gt;</name>
    <filename>a00013.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a82f3472a11e798520fcc465737ce593c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>af51ee8350443cb0295be41f5ba444ca3</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a477effaac8ec6ff751fce647ecd770b8</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aba796feab34b51c7c72be47716810bba</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8b7ea34d8ae5e85d75906eece8271683</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a725d37a12a1f612fccb84382bf0ffcc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa5d402a1c02cb758732d31e5fc40285d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a382dc4aba9613e86f964a1d33bed6a61</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae635ad221c92360a66c14df54a498430</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7e258cf302336e24d1591d53e2df7dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>addfe36bc3caeb690539ae67223f3838e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a973242ff6a51b68616e3b7b24dfcb43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8226e16e24a5b7b4ca4bf1a5157f1107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a833ec248a79f62697e188c2bcdf1e60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHFrontNode</name>
    <filename>a00014.html</filename>
    <member kind="function">
      <type></type>
      <name>BVHFrontNode</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>af30e6d75ac2aacb932cd25f224100958</anchor>
      <arglist>(int left_, int right_)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>left</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad487c132dd304975e7b72c82af33f153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>right</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ab8b0001a51c00688e48329df2924c288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a9d6c0081889bda1b5c19575fbf872faf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHModel</name>
    <filename>a00015.html</filename>
    <templarg>BV</templarg>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3fc29e353fd7e196c1cddeb33e9ae9cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab72162dc80813b966ab06d174390ccab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a27d3b9e5ea9bd353fd7dad5b1dea227d</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0f43c0c69f6885a89db68313062e6d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; BV &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a309bba5a398b2a4d5a2780e7586b8c18</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; BV &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef79759db10fdc8b5d48dfc41cb68131</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ff225bf66b7326d1b2374f74ffdec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aee0a62ad2bed6ed3865bd18834582764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4a8bcd58981ef16aa62552b76013b4be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac7799ce174ab6ee1213a4895c32757a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a33e263d95cb13c09badbe02724d847a1</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5313a176ea4ba2e25c7138c6970f3e64</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3e8bef675210837ba134fb9c54b2b611</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d175bfd1e9bf5acb38d068ab4d4bf4c</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa09ba5bc2717ea117892d5f516b126e6</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a71373723546e1bc6b5d0d1868267f967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ccd674fa69f03fe135de9d2aeddab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a11d9c4ba4216b078a1414557e7ae337a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acf61d969164c1a5ba17841ea63184b62</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adbeda4ca690ea8d58f89708e76016c9b</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2ce18b8ffbec97fe1874c79014724e74</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab64d6918d1c1bff51cbc58071800b5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5b7c25a8d290fd391440109ef6bd0dbb</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79dc00e57662c3b7ff63815b087dbfd9</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acfacd8c99ad617620420e642cae7c3fb</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaaa4204b27a1c1b0007a636955265f36</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeebd87afec21fc0fe8e44e818d4929df</anchor>
      <arglist>(int msg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3dd71ab415f89f0593bff51cc5e70dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79fa978d821fb26eaa1f88488fb90a9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1b253211c750abc4df83adb221299e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a38d2a99d3197e7e093b93eb82d4c52d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2bbd2814e5db7b8b3a2dfd6f14bc056c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af942c35ed86ff36c5193d5cfa4dad3fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad6f937d8b68c604381d2cc1da66b55c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad3697069455c85f3c593983ef12f3540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5bcac84047414f54a3bd1a0f6cbd3a74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a731c8479bf332fcf319d7aa4d7fa7d59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8796fc5d132c1b0fc14e17524f4c0d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a7bda9ee16a754d9816d8d69f171cce39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af7c6a651107d6c654f78d72634152202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac0b48e3beb1e95b4a327764cb58ecaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a2315ccae30d53ca9094a07b3459ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8397ef42695d23b89026dd0866b729ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3c44988848da2bc7eaa8f2af70071372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaa3cb4c8422658413c91e285182a0e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; BV &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a980ff8fb47f4ce3030f3a2600d7feaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; BV &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeb8e0cd700e8c354bcc5bab26ffc8c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; kIOS &gt;</name>
    <filename>a00015.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3fc29e353fd7e196c1cddeb33e9ae9cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab72162dc80813b966ab06d174390ccab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a27d3b9e5ea9bd353fd7dad5b1dea227d</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0f43c0c69f6885a89db68313062e6d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; kIOS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a309bba5a398b2a4d5a2780e7586b8c18</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; kIOS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef79759db10fdc8b5d48dfc41cb68131</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ff225bf66b7326d1b2374f74ffdec3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aee0a62ad2bed6ed3865bd18834582764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4a8bcd58981ef16aa62552b76013b4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac7799ce174ab6ee1213a4895c32757a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a33e263d95cb13c09badbe02724d847a1</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5313a176ea4ba2e25c7138c6970f3e64</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3e8bef675210837ba134fb9c54b2b611</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d175bfd1e9bf5acb38d068ab4d4bf4c</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa09ba5bc2717ea117892d5f516b126e6</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a71373723546e1bc6b5d0d1868267f967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ccd674fa69f03fe135de9d2aeddab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a11d9c4ba4216b078a1414557e7ae337a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acf61d969164c1a5ba17841ea63184b62</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adbeda4ca690ea8d58f89708e76016c9b</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2ce18b8ffbec97fe1874c79014724e74</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab64d6918d1c1bff51cbc58071800b5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5b7c25a8d290fd391440109ef6bd0dbb</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79dc00e57662c3b7ff63815b087dbfd9</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acfacd8c99ad617620420e642cae7c3fb</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaaa4204b27a1c1b0007a636955265f36</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeebd87afec21fc0fe8e44e818d4929df</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3dd71ab415f89f0593bff51cc5e70dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79fa978d821fb26eaa1f88488fb90a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1b253211c750abc4df83adb221299e37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a38d2a99d3197e7e093b93eb82d4c52d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af7c6a651107d6c654f78d72634152202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac0b48e3beb1e95b4a327764cb58ecaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a2315ccae30d53ca9094a07b3459ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8397ef42695d23b89026dd0866b729ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3c44988848da2bc7eaa8f2af70071372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaa3cb4c8422658413c91e285182a0e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; kIOS &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a980ff8fb47f4ce3030f3a2600d7feaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; kIOS &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeb8e0cd700e8c354bcc5bab26ffc8c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; OBB &gt;</name>
    <filename>a00015.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3fc29e353fd7e196c1cddeb33e9ae9cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab72162dc80813b966ab06d174390ccab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a27d3b9e5ea9bd353fd7dad5b1dea227d</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0f43c0c69f6885a89db68313062e6d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; OBB &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a309bba5a398b2a4d5a2780e7586b8c18</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; OBB &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef79759db10fdc8b5d48dfc41cb68131</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ff225bf66b7326d1b2374f74ffdec3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aee0a62ad2bed6ed3865bd18834582764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4a8bcd58981ef16aa62552b76013b4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac7799ce174ab6ee1213a4895c32757a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a33e263d95cb13c09badbe02724d847a1</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5313a176ea4ba2e25c7138c6970f3e64</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3e8bef675210837ba134fb9c54b2b611</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d175bfd1e9bf5acb38d068ab4d4bf4c</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa09ba5bc2717ea117892d5f516b126e6</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a71373723546e1bc6b5d0d1868267f967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ccd674fa69f03fe135de9d2aeddab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a11d9c4ba4216b078a1414557e7ae337a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acf61d969164c1a5ba17841ea63184b62</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adbeda4ca690ea8d58f89708e76016c9b</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2ce18b8ffbec97fe1874c79014724e74</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab64d6918d1c1bff51cbc58071800b5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5b7c25a8d290fd391440109ef6bd0dbb</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79dc00e57662c3b7ff63815b087dbfd9</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acfacd8c99ad617620420e642cae7c3fb</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaaa4204b27a1c1b0007a636955265f36</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeebd87afec21fc0fe8e44e818d4929df</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3dd71ab415f89f0593bff51cc5e70dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79fa978d821fb26eaa1f88488fb90a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1b253211c750abc4df83adb221299e37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a38d2a99d3197e7e093b93eb82d4c52d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af7c6a651107d6c654f78d72634152202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac0b48e3beb1e95b4a327764cb58ecaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a2315ccae30d53ca9094a07b3459ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8397ef42695d23b89026dd0866b729ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3c44988848da2bc7eaa8f2af70071372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaa3cb4c8422658413c91e285182a0e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; OBB &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a980ff8fb47f4ce3030f3a2600d7feaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; OBB &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeb8e0cd700e8c354bcc5bab26ffc8c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; OBBRSS &gt;</name>
    <filename>a00015.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3fc29e353fd7e196c1cddeb33e9ae9cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab72162dc80813b966ab06d174390ccab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a27d3b9e5ea9bd353fd7dad5b1dea227d</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0f43c0c69f6885a89db68313062e6d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; OBBRSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a309bba5a398b2a4d5a2780e7586b8c18</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; OBBRSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef79759db10fdc8b5d48dfc41cb68131</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ff225bf66b7326d1b2374f74ffdec3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aee0a62ad2bed6ed3865bd18834582764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4a8bcd58981ef16aa62552b76013b4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac7799ce174ab6ee1213a4895c32757a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a33e263d95cb13c09badbe02724d847a1</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5313a176ea4ba2e25c7138c6970f3e64</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3e8bef675210837ba134fb9c54b2b611</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d175bfd1e9bf5acb38d068ab4d4bf4c</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa09ba5bc2717ea117892d5f516b126e6</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a71373723546e1bc6b5d0d1868267f967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ccd674fa69f03fe135de9d2aeddab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a11d9c4ba4216b078a1414557e7ae337a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acf61d969164c1a5ba17841ea63184b62</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adbeda4ca690ea8d58f89708e76016c9b</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2ce18b8ffbec97fe1874c79014724e74</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab64d6918d1c1bff51cbc58071800b5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5b7c25a8d290fd391440109ef6bd0dbb</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79dc00e57662c3b7ff63815b087dbfd9</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acfacd8c99ad617620420e642cae7c3fb</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaaa4204b27a1c1b0007a636955265f36</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeebd87afec21fc0fe8e44e818d4929df</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3dd71ab415f89f0593bff51cc5e70dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79fa978d821fb26eaa1f88488fb90a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1b253211c750abc4df83adb221299e37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a38d2a99d3197e7e093b93eb82d4c52d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af7c6a651107d6c654f78d72634152202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac0b48e3beb1e95b4a327764cb58ecaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a2315ccae30d53ca9094a07b3459ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8397ef42695d23b89026dd0866b729ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3c44988848da2bc7eaa8f2af70071372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaa3cb4c8422658413c91e285182a0e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; OBBRSS &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a980ff8fb47f4ce3030f3a2600d7feaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; OBBRSS &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeb8e0cd700e8c354bcc5bab26ffc8c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; RSS &gt;</name>
    <filename>a00015.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3fc29e353fd7e196c1cddeb33e9ae9cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab72162dc80813b966ab06d174390ccab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a27d3b9e5ea9bd353fd7dad5b1dea227d</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0f43c0c69f6885a89db68313062e6d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; RSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a309bba5a398b2a4d5a2780e7586b8c18</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; RSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef79759db10fdc8b5d48dfc41cb68131</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ff225bf66b7326d1b2374f74ffdec3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aee0a62ad2bed6ed3865bd18834582764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4a8bcd58981ef16aa62552b76013b4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac7799ce174ab6ee1213a4895c32757a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a33e263d95cb13c09badbe02724d847a1</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5313a176ea4ba2e25c7138c6970f3e64</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3e8bef675210837ba134fb9c54b2b611</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d175bfd1e9bf5acb38d068ab4d4bf4c</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa09ba5bc2717ea117892d5f516b126e6</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a71373723546e1bc6b5d0d1868267f967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a72ccd674fa69f03fe135de9d2aeddab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a11d9c4ba4216b078a1414557e7ae337a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acf61d969164c1a5ba17841ea63184b62</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adbeda4ca690ea8d58f89708e76016c9b</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2ce18b8ffbec97fe1874c79014724e74</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab64d6918d1c1bff51cbc58071800b5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5b7c25a8d290fd391440109ef6bd0dbb</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79dc00e57662c3b7ff63815b087dbfd9</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acfacd8c99ad617620420e642cae7c3fb</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaaa4204b27a1c1b0007a636955265f36</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeebd87afec21fc0fe8e44e818d4929df</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3dd71ab415f89f0593bff51cc5e70dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a79fa978d821fb26eaa1f88488fb90a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1b253211c750abc4df83adb221299e37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a38d2a99d3197e7e093b93eb82d4c52d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af7c6a651107d6c654f78d72634152202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac0b48e3beb1e95b4a327764cb58ecaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1a2315ccae30d53ca9094a07b3459ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8397ef42695d23b89026dd0866b729ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3c44988848da2bc7eaa8f2af70071372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaa3cb4c8422658413c91e285182a0e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; RSS &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a980ff8fb47f4ce3030f3a2600d7feaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; RSS &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeb8e0cd700e8c354bcc5bab26ffc8c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHShapeCollisionTraversalNode</name>
    <filename>a00016.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5d7b1efa6f93b08f80a293e4c833012a</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4d9828aed9aaac054e14dd3c13befc76</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7d43834e9eca9f7d96ce4c4a1e7743cc</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac2582ecd374f5d2bca73e8a2ead10e2b</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1a5f2a7cf12fb283df6c2fb1384db37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4e57f6b71af538d7cc1c47715929fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model2_bv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafd6b0063a6c65edb297e511c2c79e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae6205e40a3b1de33c200e3d27736e002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0391598dc62a6afccaf4462e21ee4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acbc8e455c388da7fc96e2e9de0244428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; kIOS, S &gt;</name>
    <filename>a00016.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5d7b1efa6f93b08f80a293e4c833012a</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4d9828aed9aaac054e14dd3c13befc76</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7d43834e9eca9f7d96ce4c4a1e7743cc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac2582ecd374f5d2bca73e8a2ead10e2b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1a5f2a7cf12fb283df6c2fb1384db37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4e57f6b71af538d7cc1c47715929fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model2_bv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafd6b0063a6c65edb297e511c2c79e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae6205e40a3b1de33c200e3d27736e002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0391598dc62a6afccaf4462e21ee4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acbc8e455c388da7fc96e2e9de0244428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; OBB, S &gt;</name>
    <filename>a00016.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5d7b1efa6f93b08f80a293e4c833012a</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4d9828aed9aaac054e14dd3c13befc76</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7d43834e9eca9f7d96ce4c4a1e7743cc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac2582ecd374f5d2bca73e8a2ead10e2b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBB &gt; *</type>
      <name>model1</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1a5f2a7cf12fb283df6c2fb1384db37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4e57f6b71af538d7cc1c47715929fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>model2_bv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafd6b0063a6c65edb297e511c2c79e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae6205e40a3b1de33c200e3d27736e002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0391598dc62a6afccaf4462e21ee4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acbc8e455c388da7fc96e2e9de0244428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; OBBRSS, S &gt;</name>
    <filename>a00016.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5d7b1efa6f93b08f80a293e4c833012a</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4d9828aed9aaac054e14dd3c13befc76</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7d43834e9eca9f7d96ce4c4a1e7743cc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac2582ecd374f5d2bca73e8a2ead10e2b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1a5f2a7cf12fb283df6c2fb1384db37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4e57f6b71af538d7cc1c47715929fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model2_bv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafd6b0063a6c65edb297e511c2c79e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae6205e40a3b1de33c200e3d27736e002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0391598dc62a6afccaf4462e21ee4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acbc8e455c388da7fc96e2e9de0244428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; RSS, S &gt;</name>
    <filename>a00016.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5d7b1efa6f93b08f80a293e4c833012a</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4d9828aed9aaac054e14dd3c13befc76</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7d43834e9eca9f7d96ce4c4a1e7743cc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac2582ecd374f5d2bca73e8a2ead10e2b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1a5f2a7cf12fb283df6c2fb1384db37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4e57f6b71af538d7cc1c47715929fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model2_bv</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafd6b0063a6c65edb297e511c2c79e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae6205e40a3b1de33c200e3d27736e002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0391598dc62a6afccaf4462e21ee4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>acbc8e455c388da7fc96e2e9de0244428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHShapeDistanceTraversalNode</name>
    <filename>a00017.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>adca48cac07bae21874033ed185d8bfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9022a261f7f600ba65b14228273b6ff7</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a06572181bb20b0aaaa9102de9e05eeb1</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae9c2624388840cc9a13fecd39a003ae6</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1e4d024b96bd922936adf25b51be4b01</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a050481f85e59ec88e36e5ce6efdc09e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac625f10334f03f47efe5e156b2095451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model2_bv</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a11a744eaf292b2364d37104c0c13fde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4008bec4161550c911870d29996555ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac8f4371a9e8eb3cb06d060c2c0e15667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abae00cdf8d603938a907ae430ce9028b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeDistanceTraversalNode&lt; kIOS, S &gt;</name>
    <filename>a00017.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>adca48cac07bae21874033ed185d8bfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9022a261f7f600ba65b14228273b6ff7</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a06572181bb20b0aaaa9102de9e05eeb1</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae9c2624388840cc9a13fecd39a003ae6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1e4d024b96bd922936adf25b51be4b01</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a050481f85e59ec88e36e5ce6efdc09e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac625f10334f03f47efe5e156b2095451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model2_bv</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a11a744eaf292b2364d37104c0c13fde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4008bec4161550c911870d29996555ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac8f4371a9e8eb3cb06d060c2c0e15667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abae00cdf8d603938a907ae430ce9028b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeDistanceTraversalNode&lt; OBBRSS, S &gt;</name>
    <filename>a00017.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>adca48cac07bae21874033ed185d8bfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9022a261f7f600ba65b14228273b6ff7</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a06572181bb20b0aaaa9102de9e05eeb1</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae9c2624388840cc9a13fecd39a003ae6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1e4d024b96bd922936adf25b51be4b01</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a050481f85e59ec88e36e5ce6efdc09e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac625f10334f03f47efe5e156b2095451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model2_bv</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a11a744eaf292b2364d37104c0c13fde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4008bec4161550c911870d29996555ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac8f4371a9e8eb3cb06d060c2c0e15667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abae00cdf8d603938a907ae430ce9028b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeDistanceTraversalNode&lt; RSS, S &gt;</name>
    <filename>a00017.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>adca48cac07bae21874033ed185d8bfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9022a261f7f600ba65b14228273b6ff7</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a06572181bb20b0aaaa9102de9e05eeb1</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae9c2624388840cc9a13fecd39a003ae6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1e4d024b96bd922936adf25b51be4b01</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a050481f85e59ec88e36e5ce6efdc09e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac625f10334f03f47efe5e156b2095451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model2_bv</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a11a744eaf292b2364d37104c0c13fde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4008bec4161550c911870d29996555ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac8f4371a9e8eb3cb06d060c2c0e15667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abae00cdf8d603938a907ae430ce9028b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVNode</name>
    <filename>a00018.html</filename>
    <templarg>BV</templarg>
    <base>hpp::fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a78d9c652cd22f30d84e3ad96b523446a</anchor>
      <arglist>(const BVNode &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1969d88ce9f4f0cff5774fd9a3ba4229</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9a519ba321370491025af718407a22d3</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9ac68fde63aaa1ad1c6aabd95b2aa18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a60eb20d9e1e277467aefe613359ee721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a56a5db5f84550d229d0ea8d7d1fe8145</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a043f26a64daf0bf7e1d2c21b9d3a6436</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aabf49819f67e70e7b10daf3492750501</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; kIOS &gt;</name>
    <filename>a00018.html</filename>
    <base>hpp::fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a78d9c652cd22f30d84e3ad96b523446a</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1969d88ce9f4f0cff5774fd9a3ba4229</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9a519ba321370491025af718407a22d3</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9ac68fde63aaa1ad1c6aabd95b2aa18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a60eb20d9e1e277467aefe613359ee721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>bv</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; OBB &gt;</name>
    <filename>a00018.html</filename>
    <base>hpp::fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a78d9c652cd22f30d84e3ad96b523446a</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1969d88ce9f4f0cff5774fd9a3ba4229</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9a519ba321370491025af718407a22d3</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9ac68fde63aaa1ad1c6aabd95b2aa18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a60eb20d9e1e277467aefe613359ee721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>bv</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; OBBRSS &gt;</name>
    <filename>a00018.html</filename>
    <base>hpp::fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a78d9c652cd22f30d84e3ad96b523446a</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1969d88ce9f4f0cff5774fd9a3ba4229</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9a519ba321370491025af718407a22d3</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9ac68fde63aaa1ad1c6aabd95b2aa18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a60eb20d9e1e277467aefe613359ee721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>bv</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; RSS &gt;</name>
    <filename>a00018.html</filename>
    <base>hpp::fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a78d9c652cd22f30d84e3ad96b523446a</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1969d88ce9f4f0cff5774fd9a3ba4229</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9a519ba321370491025af718407a22d3</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9ac68fde63aaa1ad1c6aabd95b2aa18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a60eb20d9e1e277467aefe613359ee721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>bv</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVNodeBase</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abed3f11bffa30011c08041ad8aec37e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>primitiveId</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a73bfadf70783c34c1be9d5a20a07764f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>leftChild</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a5717b95964f3ba4e3e18372bc685dab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rightChild</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a5eed4d3ee707726ddc545a184c26ecf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_child</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a07267c52a1c2dd1a6d2ab775514acf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_primitive</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a413489df45a14c2b04148db5dfb1669b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_primitives</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a3c3f18494e34d445da2448e924c2c60c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVSplitter</name>
    <filename>a00020.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::BVSplitterBase</base>
    <member kind="function">
      <type></type>
      <name>BVSplitter</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4c23f348343cde3387ba9740b9107350</anchor>
      <arglist>(SplitMethodType method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVSplitter</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1b5160ef77546bc5a738dd05fcb857c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6753553731dd23a21d4b44e3873dd5dc</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRule</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a02ffe587ccc032fe8f637786c1b39eac</anchor>
      <arglist>(const BV &amp;bv, unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a07286cdcad38c475be1f26c0a231eb58</anchor>
      <arglist>(const Vec3f &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa9646e044a1c32db5981aeb7cc69de23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a8b9d2fed0d8f6a7bc0caa78a9aeec543</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5ca45aa63c53ed74aea0c06e856e6772</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad22ba6598a979d399ffcfa7bcbdb512e</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a79b696f32f11dcbe93b3ecc47116c565</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVSplitterBase</name>
    <filename>a00021.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5d1f97b8308d22b33ef90264cf53e64d</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeRule</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a60709de656b53089b53d8a2ed5db32ab</anchor>
      <arglist>(const BV &amp;bv, unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>apply</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ad87c2a2f256f35c381ddbb975ad96541</anchor>
      <arglist>(const Vec3f &amp;q) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aceb8d076a5cb468e9966a82133c7f74a</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CachedMeshLoader</name>
    <filename>a00022.html</filename>
    <base>hpp::fcl::MeshLoader</base>
    <class kind="struct">hpp::fcl::CachedMeshLoader::Key</class>
    <member kind="typedef">
      <type>std::map&lt; Key, CollisionGeometryPtr_t &gt;</type>
      <name>Cache_t</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2210b6e1ad77e7c4311b3e5b3c00c490</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CachedMeshLoader</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8a6a1de1b77e06f515701dc6f6fb279d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedMeshLoader</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab0d59668ed5214c97443bd872826c04c</anchor>
      <arglist>(const NODE_TYPE &amp;bvType=BV_OBBRSS)</arglist>
    </member>
    <member kind="function">
      <type>CollisionGeometryPtr_t</type>
      <name>load</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a255b6cf3246e708c8c43152b4db2a84b</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale, const NODE_TYPE &amp;bvType) HPP_FCL_DEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionGeometryPtr_t</type>
      <name>load</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5b660675b9f98cbfcbea7f504705adb6</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>const Cache_t</type>
      <name>cache</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2f2900f3ef5baedc55b474ab1ca2fe1e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Capsule</name>
    <filename>a00023.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Capsule</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad7a6f6f01af5a0aa5cabdd0d1c34da05</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a822f6ab334f174d78b446b0090af0feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a58e87a04fd9c13f0f26a4d2e7e4cac17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac2767883cd58312259a43023de72a845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab6dc53389ee2583d96268c107d756e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a580f94067308b5d96e4080b849176155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>lz</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>af9151777695223a3328cc3325f1a39c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CollisionFunctionMatrix</name>
    <filename>a00024.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t(*</type>
      <name>CollisionFunc</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4e5e53f93590a57b0499ab90e62796f6</anchor>
      <arglist>)(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionFunctionMatrix</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a193b3bf92908a0ecec90045c05804307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CollisionFunc</type>
      <name>collision_matrix</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5866f219a3e4cbdc9cb477514ee80bb9</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CollisionGeometry</name>
    <filename>a00025.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionGeometry</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ace98e04016492413de122f457de81270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionGeometry</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a9916ac5633d3a6f1ea35766130bfc534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a9fdc9d2cf1563c4d1ca59630d3066042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad25d6f18995f9c68e9f5ffe2a02b8882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad5e184908cb836fc1ca631947a4caaf0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a936b8d2c211ab79d7a0c6b91b20dfecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acc43b1da621d59d6f391ab170f87c1d2</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccupied</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>abca079fe0fd66a0563d46f5a22e58389</anchor>
      <arglist>() const HPP_FCL_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFree</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af447798df04ebfdf6b085127c37e5c38</anchor>
      <arglist>() const HPP_FCL_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncertain</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4f8c9ca7857288529372b7cef931a47d</anchor>
      <arglist>() const HPP_FCL_DEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ab5eadf351f1f1d23772c0ede498d2e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0ab9a6cc993cadc0e7810325f70a4c9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a705f8c7ce99d1e63d208b2d538e5a983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertiaRelatedToCOM</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a761cf6ab910584f287b215252cd05654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>aabb_center</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>abce28e50b4bdf8b4ae5171f3ba54cbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>aabb_radius</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5fef2c57c9056c189a6642fd3caa2805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AABB</type>
      <name>aabb_local</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a365b825a84d3455e2dd921d716ba9fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a774ceb428b7ade4a21e9366b6db7c503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a337b0a467ef877ffa91a53953f7665b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_occupied</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5c4e44d08f6c56ee9d3df994ae936588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_free</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a78ea34df55426f19b7fecf0576e24a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CollisionObject</name>
    <filename>a00026.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6b435bb536f60c253e1d50d38d1f37f6</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9e534a28a6f1423b318b048e887f6cae</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>abe1900848c471e4696745cdbbb9c98e8</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CollisionObject</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af013adb130aab42bdb84c2814f109e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab0e12e46e77e2182174ef4d62d804932</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af501dcb8ee2a49ff2612b605d2d0b721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AABB &amp;</type>
      <name>getAABB</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8bda76c59697c0509962dd1abee43db7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aaa574c2e5842f27a9e6fa994a85b45b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1151b38208339446ee98e83181b8149d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a36e428721566adb87e7070bfad78d59d</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4f6aa9c65b07a332afeaf3f720d39940</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa7d44b75477dc8c60311ed340f1337cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>getQuatRotation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa27a8f8f3146c671b1a0884d2e9bebb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>getTransform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4a8ff19fab7928ca874e11161d20cb13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>addf13c77f0ccea6ab0cf926433c3ed29</anchor>
      <arglist>(const Matrix3f &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8328ce08a3803cf6dbcd99bc20c4ce71</anchor>
      <arglist>(const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuatRotation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ac519fda740ad1c0d4432ffdf58a943e9</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8779cd6f3c17e8368413a3cf5b680d79</anchor>
      <arglist>(const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4179c6c44b533b7cf3105e291770a031</anchor>
      <arglist>(const Quaternion3f &amp;q, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6af8b793a0a68da0d650918381b911e4</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentityTransform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a488160dc532e43a59a8c143a9fc69b73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentityTransform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>abc58df8d6ec5adaf9b0dfcc637edd56b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DEPRECATED const CollisionGeometry *</type>
      <name>getCollisionGeometry</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aac7272333b1df125f3c37bd0b21fb923</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; const CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a150b224cf214de8771ad2f44025274b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9266229d30eacbb09c2134021350d9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>cgeom</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a24181814d7b46f9121ec1ae3a75f9b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>cgeom_const</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aab38391f887ca8afe702eff7175c075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>t</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>afcd3641c6c9864516c9a7c51d0b6dfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AABB</type>
      <name>aabb</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af322bc0695eeca5db4e7502e76f004ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a91b60d341dc91213222ced8272e317e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CollisionRequest</name>
    <filename>a00027.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad26cd8844b1a103501ed253ac7cd9431</anchor>
      <arglist>(size_t num_max_contacts_, bool enable_contact_=false, bool enable_distance_lower_bound_=false, size_t num_max_cost_sources_=1, bool enable_cost_=false, bool use_approximate_cost_=true, GJKSolverType gjk_solver_type_=GST_INDEP) HPP_FCL_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>acb5d4f38ce60f8dfd325d03e09f90e58</anchor>
      <arglist>(const CollisionRequestFlag flag, size_t num_max_contacts_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>adef8ff1994cca1ed62f3d8f492eba383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2586f8ff4d9984f28d8e36ca785d87d0</anchor>
      <arglist>(const CollisionResult &amp;result) const </arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>num_max_contacts</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a1edd2fe4d5eba88c1e01387d282893e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_contact</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>acc5306791907c0d3afe4e40ae6febd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_distance_lower_bound</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a47a5bea6501d2e6cb624c93a93183e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJKSolverType</type>
      <name>gjk_solver_type</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a3d12e13f45cc7f846f9cb5372b88d2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cached_gjk_guess</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aeeca637b7d1a70158143be6a734ed1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_gjk_guess</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ae73082d6175c64e8de92072ddf40e975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>security_margin</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>acc1c187d850a8a9e76d0ca9a56320963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>break_distance</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aec442e21a1066f449dd8f638203bd3bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CollisionResult</name>
    <filename>a00028.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionResult</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae8b43abc95c4b37674babb4123839f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContact</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a4cb5a20016c97dc1cb3d825b06a6034b</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab4b5bf1a31d54ef86857c3eb6471ea78</anchor>
      <arglist>(const CollisionResult &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollision</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>adc912280bd17ea80d2d4660ce67b0fc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numContacts</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ab006eb3794295cc47bbd87510b4d8728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>getContact</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a96ba58cd1dde26d3952036c82aff0506</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContacts</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>abd09fd379ecf9301cbf64dce841c3e13</anchor>
      <arglist>(std::vector&lt; Contact &gt; &amp;contacts_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a0dee942b5c3437d2202ad63b4fda4a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_gjk_guess</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a93c41751c70e07f5df5bfb675f435eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance_lower_bound</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a739e73375184642aa873bf83eb43ef5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>invertResults</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac194dfff179a5026c233c9d4489ca6d4</anchor>
      <arglist>(CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CollisionTraversalNodeBase</name>
    <filename>a00029.html</filename>
    <base>hpp::fcl::TraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>CollisionTraversalNodeBase</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a32d8a014260ce29258e588909e1b8c10</anchor>
      <arglist>(const CollisionRequest &amp;request_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionTraversalNodeBase</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aefb518603102753cb012acc8ee21e3e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BVTesting</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a752d98371eef5c9226a4aba359f02b35</anchor>
      <arglist>(int b1, int b2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BVTesting</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af200110afb2aa1877991401ab351efbe</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>leafTesting</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad4f1cfe0c314db356aab692378ab02fe</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStop</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a19d5f6a9dc23bd87e864c053e9d08706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStatistics</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8cfb6af760ad243ee89ff16403629bd6</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>const CollisionRequest &amp;</type>
      <name>request</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a71804c1ecc412b3c6f22305440c18f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionResult *</type>
      <name>result</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a82cc7260ceaa6be692b96fd8dae7a101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_statistics</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab7a880df9afd4cd7d543659047b5cd57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Cone</name>
    <filename>a00030.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad365b76a69da25cd767741ca72039c4b</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a94e951be4411c10d45696bf43207a716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a2424dc3ae1c2f3602d45ca59d3b4ef0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>adfb4372d2b19802ffcb7cc5a3bb6c1b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a08306609b399823fec05724cdec6ca0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a041e7b2ef7df9f2e6390a71536d2f41c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a9b7cff69c31230235da6edae78afe0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>lz</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aabd10380c3285bdb6fd0ddfc44529175</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::Contact</name>
    <filename>a00031.html</filename>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a1164f84783a6ac9831302c6d291f270b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>af2bd33820f619ad77893430bf0608295</anchor>
      <arglist>(const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a5dbdb0c6703f0c660a17331b15b10666</anchor>
      <arglist>(const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_, const Vec3f &amp;pos_, const Vec3f &amp;normal_, FCL_REAL depth_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ad44ac6da856b04a1c088beb2f8f78fa2</anchor>
      <arglist>(const Contact &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a79d2eee64a070138e9822f6c55aecc78</anchor>
      <arglist>(const Contact &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o1</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ab7f868ffd3be1efb63194569aa0ed475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o2</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ab305f6b0d9ee515660ebd5da4490e414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a471b7111086a75be10354b5d2fd1b9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a6897f1d3f59f34bc63d15b535b737885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ac566d8eeb0cf18a5d4717f3481ef11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>pos</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a3338540008175b7b0cce5f14d508e087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>penetration_depth</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a00139072f90f5f5b937258e320c7372e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONE</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aca21844ff1cdbb2c9c0a9b062ba64728</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::ContactPoint</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactPoint</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7e7337a7a20f1be724383e546d3c6246</anchor>
      <arglist>(const Vec3f &amp;n, const Vec3f &amp;p, FCL_REAL d)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6b13ef2e40a5cf64955c551e7702891e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>point</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>adb5d5774e7d4bf81a3b6a76f60a0edc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a316d17bdbc4d5d165ed9ef92c7059cfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Convex</name>
    <filename>a00033.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <class kind="struct">hpp::fcl::Convex::Edge</class>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>af1b6b72105b0cb26520e95ac33648bcb</anchor>
      <arglist>(Vec3f *points_, int num_points_, int *polygons_, int num_polygons_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6452e07b2048ce4cd920804c75b66961</anchor>
      <arglist>(const Convex &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Convex</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a239e12ee89058047129ff92c0e9b1b07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a1e69c294e7e126eeb7c7e1d73413319b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab3a9aec4d6585457bb007fa93e27b861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>add703277ffb266b5681b2cb2e4ffb95c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a66eb22d26e6e0d7a9b7e55cf50095289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4cba5cbd7c20c828f09d14da6598e255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>polygons</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3a51692af4ec3a6f1824e649c740144d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>points</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a330c5afd8c1e6f16e5a0f80ae2bce5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_points</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a5b07455670a7c672eb8b47acefba3893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_edges</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ad1d5fb84a71c60992e8f58d91947aa68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_polygons</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4ff73f4b3ff63a663309a143acaae4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Edge *</type>
      <name>edges</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7d2c1d342f6374f21825c7a14e912c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a1a5dc36d01ff4d367e4ebc99db9f4b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillEdges</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a69a1395fcaef4e8d6f0d57a9c9e661ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Cylinder</name>
    <filename>a00034.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a729305aad6a4a6b57bc94e644299c8d2</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a34cc22903117ab6451d0517ec5e1bb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aff2ed610298896b37fdf306e295bcac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a40adcc342f62881baa395ea201dfd536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ab6bd21c2946094aa82e0663eeab117f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aa95961a6c6f693e6f47836ebeaa00f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>lz</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a17f5a2c88f25c5cfa74f4bfa3a06bba2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::DistanceFunctionMatrix</name>
    <filename>a00035.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FCL_REAL(*</type>
      <name>DistanceFunc</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a12d017e6df1663ae459a12fc1371a30e</anchor>
      <arglist>)(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceFunctionMatrix</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a53abbbcada5ac07a34b6f592e9e73ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>DistanceFunc</type>
      <name>distance_matrix</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a40e0f3710155ce9fad93bfb50b473386</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::DistanceRequest</name>
    <filename>a00036.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceRequest</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a2685975ae106a372a6770f3bbef8c802</anchor>
      <arglist>(bool enable_nearest_points_=false, FCL_REAL rel_err_=0.0, FCL_REAL abs_err_=0.0, GJKSolverType gjk_solver_type_=GST_INDEP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a9b507ac0d0dab29239a88cd0f2807336</anchor>
      <arglist>(const DistanceResult &amp;result) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_nearest_points</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a02515582aa27450292fefba6f95ea1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a6604655924b2aa73b6bfa30801688248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aeb1fa6ee9ffadfc80b0daeb6917ea02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJKSolverType</type>
      <name>gjk_solver_type</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab57d360ea74129a21e7549a6f0f1e4b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::DistanceResult</name>
    <filename>a00037.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceResult</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aa8c7e3106c4ebacfc26a963e502a2ff2</anchor>
      <arglist>(FCL_REAL min_distance_=std::numeric_limits&lt; FCL_REAL &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a69d8767a4cfa06fcef88433ef16760c2</anchor>
      <arglist>(FCL_REAL distance, const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>abbfc238653a015c3832976e400edeb5a</anchor>
      <arglist>(FCL_REAL distance, const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_, const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;normal_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a7c86f83a625aa9800a9261966b1ee04a</anchor>
      <arglist>(const DistanceResult &amp;other_result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae9dadb7c397ce684cc83eaeecae28165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8cdf52ddc11dc8e74d8d0e22873b80a0</anchor>
      <arglist>(const DistanceResult &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aec001270b9251f01739a35587371fc77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>nearest_points</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad9178afb9ba5dd0aae0b3126046ce8f4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a9fa0a9d94af11af6c1c796691273e653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o1</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aba33eb26c274d814e1185a7a88ea3e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o2</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a10d2d5aa2204fca89f82fdeef92b5564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae4f2498e4268faf92f718b4238f79a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad2761de0c143dcfd8dd15293fcac263b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONE</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a29aa3bfa022b602823bd2179497adbc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::DistanceTraversalBVTesting_impl</name>
    <filename>a00038.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>run</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a8ef8eae863ca5e4967b054ad514ee0d7</anchor>
      <arglist>(const BVNode&lt; BV &gt; &amp;b1, const BVNode&lt; BV &gt; &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::DistanceTraversalBVTesting_impl&lt; OBB &gt;</name>
    <filename>a00039.html</filename>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>run</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab7127dda03bd1f046dd40c598447b63f</anchor>
      <arglist>(const BVNode&lt; OBB &gt; &amp;b1, const BVNode&lt; OBB &gt; &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::DistanceTraversalNodeBase</name>
    <filename>a00040.html</filename>
    <base>hpp::fcl::TraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>DistanceTraversalNodeBase</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a19ad60147df94d1d982630a5aaeaa88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceTraversalNodeBase</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a20c16383352490b4b9f1abedf7166290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afc1f4b0f95383b7d3133ab344437737b</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>leafTesting</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a791d403727c4e43ebed19fec709a9be1</anchor>
      <arglist>(int b1, int b2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStop</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a65376a17eb71a5e392eb61d6bca67a73</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStatistics</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a15c37998146fbdeb875391c72d25449f</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceRequest</type>
      <name>request</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aeb69197a0baa20aa921da336bb4ed149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceResult *</type>
      <name>result</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>adba3e73c9c231b44e427f076ba9467c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_statistics</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7b6f3ae7222b016bfc14b4011d57d50f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::Convex::Edge</name>
    <filename>a00041.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>first</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a97be4aacaeb44cb3cd6dc19a293d0ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>second</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ae6027723a79e47ba8066ce49aaefe20d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::EPA</name>
    <filename>a00042.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa2d5f994081378b8ba5bc97a3c7ede8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Touching</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa4bc14701cead41a99892f104cd44e758</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degenerated</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa25d7f717a9ce54c177f3ed12dd445374</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NonConvex</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa1215b0ed3813d72d868fe30deda55f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidHull</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faea477dc4785adb6286610756d47bd2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfFaces</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf41f44d2dfdfadd62a82adf6bb45c8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfVertices</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf2bb2378a219754a9929b7331715171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AccuracyReached</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fae56ae92cd3b80c33903cb1576bb72f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FallBack</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2facc45d09a0d780a71fc23e0bba4d3ee38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fadc7b3a302a7f625922682401b6744547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa2d5f994081378b8ba5bc97a3c7ede8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Touching</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa4bc14701cead41a99892f104cd44e758</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degenerated</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa25d7f717a9ce54c177f3ed12dd445374</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NonConvex</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa1215b0ed3813d72d868fe30deda55f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidHull</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faea477dc4785adb6286610756d47bd2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfFaces</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf41f44d2dfdfadd62a82adf6bb45c8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfVertices</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf2bb2378a219754a9929b7331715171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AccuracyReached</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fae56ae92cd3b80c33903cb1576bb72f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FallBack</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2facc45d09a0d780a71fc23e0bba4d3ee38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fadc7b3a302a7f625922682401b6744547</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EPA</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7fb5a489bf152c9f0f008725cc6a40ad</anchor>
      <arglist>(unsigned int max_face_num_, unsigned int max_vertex_num_, unsigned int max_iterations_, FCL_REAL tolerance_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EPA</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a99274e9fc77b745211a7b3b968344d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab54a49a9c1c6a060d3363700cea41af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEdgeDist</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7d6226750079753f8cde1be21bafff95</anchor>
      <arglist>(SimplexF *face, SimplexV *a, SimplexV *b, FCL_REAL &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>SimplexF *</type>
      <name>newFace</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac03ce082404db1ada3c1c071588442b1</anchor>
      <arglist>(SimplexV *a, SimplexV *b, SimplexV *vertex, bool forced)</arglist>
    </member>
    <member kind="function">
      <type>SimplexF *</type>
      <name>findBest</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aca0b2388b2656aff2540da5793544e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>evaluate</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab57b57ad51bd5caf95aa0d54aba07999</anchor>
      <arglist>(GJK &amp;gjk, const Vec3f &amp;guess)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expand</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad0b764bc214ccc7e2f3b0e988c911973</anchor>
      <arglist>(size_t pass, SimplexV *w, SimplexF *f, size_t e, SimplexHorizon &amp;horizon)</arglist>
    </member>
    <member kind="variable">
      <type>Status</type>
      <name>status</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a1a2a8e3afc520cecec69bfa18ab13766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJK::Simplex</type>
      <name>result</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>afb3e242be0245f407595ff13122e161f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a54ca0576ba75aaf289a8417533e790fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad1de44e76acc040d164518eea4e19b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>sv_store</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>afe85ee366f63017d4b7f5de82da2165c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>fc_store</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a3f4f0046d2ccddcbc00b132062d4c210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nextsv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa245442817fd3be44d9c56331d5cb5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexList</type>
      <name>hull</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>adae4ef77e2b67b7fb4b0700b03d5fbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexList</type>
      <name>stock</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa7ff0d3e0c25b2cea5d514d8790c0223</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::GJK</name>
    <filename>a00043.html</filename>
    <class kind="struct">hpp::fcl::details::GJK::Simplex</class>
    <class kind="struct">hpp::fcl::details::GJK::SimplexV</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca27d91e1c60615a65d97ad096a74aabea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inside</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73caa8e4aaef15985f9ba848d16e44c55d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca7c7fadc8c714369a0693bdae90ad41f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca27d91e1c60615a65d97ad096a74aabea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inside</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73caa8e4aaef15985f9ba848d16e44c55d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca7c7fadc8c714369a0693bdae90ad41f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJK</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a9f1bcff460876bba28f6d314a2e81674</anchor>
      <arglist>(unsigned int max_iterations_, FCL_REAL tolerance_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>adb3509bbe171c676b5bbf705145cb297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>evaluate</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a994e217b69e0504e05f9e8f6abc1a8a6</anchor>
      <arglist>(const MinkowskiDiff &amp;shape_, const Vec3f &amp;guess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupport</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a88754fdd2bf9e81542cb4654e9af1eba</anchor>
      <arglist>(const Vec3f &amp;d, SimplexV &amp;sv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVertex</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a80cdfd4348267c30d3e74e2bdeb89750</anchor>
      <arglist>(Simplex &amp;simplex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertex</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a46ae296028b30d87778454137cee770e</anchor>
      <arglist>(Simplex &amp;simplex, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>encloseOrigin</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aeb5a3be24d0a2da2eb1f27aad7dfd9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Simplex *</type>
      <name>getSimplex</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a77993dac716a21f012058870ebdefe6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getGuessFromSimplex</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>acd6fa344255f30c3fc2bea7266c41b1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>MinkowskiDiff</type>
      <name>shape</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a8169f0b95d5dfd9f3078f1f73f7c99d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>ray</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa2f5572c36d4bd6c935e8cb507ee6dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a9f7db3d3c530f90e2dc701d3e89bc79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex</type>
      <name>simplices</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ab526fc18d46cff5359ded835811ed8e7</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::GJKSolver_indep</name>
    <filename>a00044.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aaf9fc7578b911edca138a61dc6c58217</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a908b1a76bc9e6dc6080fce8f2ec5f5d0</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aaef9f40b60842130f583765cb8624328</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJKSolver_indep</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aac3b5cd8e41d5e66656ebb9ec6c6a6c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCachedGuess</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a303390998e2878fe1b9ae2ae47e91ffc</anchor>
      <arglist>(bool if_enable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCachedGuess</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5928f6e3e79db1475cdb53d539cb0dae</anchor>
      <arglist>(const Vec3f &amp;guess) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCachedGuess</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a24c01bc668083e7a36cabf9dba6345a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>abf9086b966a2612bf6c2807da6cbd914</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a40ff55db3c5235fc28277c609f6ae612</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a0da18abadb0d8f19e0ae017dc6a5b904</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9b3fdda4772ad31350b3c7dfe8fcfcb5</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a345fb13dc3684fbc41d90c5414ca9e33</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acfeb1186806b89b2b09d5fc5055f3775</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a15d990476bb14e688d4ed0e41055581c</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a986252c2dd38cc136e176b3be4b1758a</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa9c6f61576704b0a6227956c22f037af</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ada22812e054d6dcdbdcb4931b0bf5053</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a0bd301127dbde094e27aae1125158e32</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a999a6ba135405c9ba46a57a90d626b04</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9e02132be01f67a4cb00e05f04423df4</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5dcfd0977967fd36bc146e3f135dd2e2</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Cone &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2820d0bfe4e79492c1d880965f0545c6</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1aae141604781356fc7d54fc482b6fc8</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ace767f5a1343319565f13bafb6aa3d04</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a4f7f1b54fc0ce8e14cb73c461a527ee2</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a165c6c43d7e376f46c3928fa2dcad678</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad4e53e2bf32bff9fcbc1ba394d13287b</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad64148fdb5936a825422a5b3025aebc3</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a578862ae97e0c6533cdb7113a60f01c2</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aafdacbbcf2acec93b7f4857ea979dd5d</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a590b52305f0bf66f63a6bef74076d9f2</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a85cd8a05a4812d1e3bba4e027904b85e</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7277453680d2f25a16cee14844f35286</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>abb78ddbdfbc783be0729b839d071bee3</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Cone &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>add406442d822fffb47d8d98abe7356e5</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa0c95674b358f6ded75be48bdcdd0f3f</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a509db014e29a6aa0818899f319964047</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1547b2234d45b382e748991ee14c5cc7</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>adceab36643cad60f5937bada27c7470a</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af9e2df358d4ac767f346fd1c951e259e</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa93181a02a894408642871965c3edd67</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a843f00ffed3e66d7dc0c7884b7d9944f</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac07cc183281bfdc5425d42dd9dafab1d</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aee47aa4f29dc35f2c93b6d80e1b19b18</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a899f784429e5a8e660fed7d7e3c087a6</anchor>
      <arglist>(const TriangleP &amp;s1, const Transform3f &amp;tf1, const TriangleP &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_face_num</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5c1b9d4a2dc5dba44665dc9f7abc55a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_vertex_num</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad1f7a090c988e0279a018ad9ae3dcd9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_iterations</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9fab53f64ef9a957d84f9fc622a1c016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>epa_tolerance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac725b5c74404ccfffa772e367289870d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>gjk_tolerance</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a471d71d6353262375903af895fea8604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>gjk_max_iterations</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad2a3ee30fbab40cc1af2b36cd6835153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cached_guess</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad3fb87ba1b8f5f0ebce983de708def4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_guess</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a102cdb212ccd5acaea257986f0d0c8f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Halfspace</name>
    <filename>a00045.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3323c48cb15d98f832c553fd28263946</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a1ac2e3dd24a4d7a681738ea9b565940b</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a22dfa44f758dd9e109ea1449ddc285e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a29ddaeb18f196e623d166384c0fff53b</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3fba6859301eda72483391a81eff23b5</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a4aa476a1ef4200a730463c0666374202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3db02d9c960074d412b86232d73b49f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a744d4f1e8dd1a812370eb098d6dbb292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>afc8222ad029bb97beab8f5b7553daadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a2902ef935ab7289ceccbca3f32262c1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Intersect</name>
    <filename>a00046.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>buildTrianglePlane</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a9ca0cd0ff1fc48ef86e9d46a6667e6ec</anchor>
      <arglist>(const Vec3f &amp;v1, const Vec3f &amp;v2, const Vec3f &amp;v3, Vec3f *n, FCL_REAL *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::KDOP</name>
    <filename>a00047.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a85657a36dee75d211dcbfa3eb9e7a105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a02d789ec14798ee290cb92a8b299ae83</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aeeaf5ff05f20cc5f337dda5434ccded3</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad4021acd53c3a152778df0e09b33dcff</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a60607518b26a5641db4190bcabc76099</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a982804cbb44d228d4932104f7a81194a</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ab15e51ea752b534236c34b1c392adce7</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a2f7d6b7859cedf46ae173064d6e58d8c</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>operator+</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a1e31d27f9839964c6029cf6a2f08097f</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a97fb8b37b4ff31c74d1f0f1ba37728bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5230292b0235c7aa946cf20e711cad21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a42f0fb7021359fb35eced9ff0029bd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ab8ae54f36bea798b687d8df53ad6603a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a44a1a7e35967c62ace646966c4f41891</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8fd56e4d54db643fba2bf0f302860fdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ac6c61f5ef274dafe9b11af9eb4ec7ef8</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dist</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a62a4eb3694bb7fc479ad4dba2e7df2d3</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>dist</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a06a42acdeec8fd6d97e63331cbb5b310</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CachedMeshLoader::Key</name>
    <filename>a00048.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a815aad775281c58ade890a611ac2492c</anchor>
      <arglist>(const std::string &amp;f, const Vec3f &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aebdd9f0b74c257c0152c00432385e138</anchor>
      <arglist>(const CachedMeshLoader::Key &amp;b) const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a8ea54b053225a467daff07d7e7d3c972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>scale</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a586cea937c17d24815e7c139dc70431b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::kIOS</name>
    <filename>a00049.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a540cf9e689590703690db3558544b3ec</anchor>
      <arglist>(const kIOS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a9d6bce5cb42f36f79cfa44d8c725c400</anchor>
      <arglist>(const kIOS &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a019633e939107e6ff16f2d07502367f8</anchor>
      <arglist>(const kIOS &amp;other, kIOS &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad2b3232de2a1232764af2d491c6b851d</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a287fe9285808eb368e75cda21d8da46f</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a33142f705508c96867c8ec9728c70ce2</anchor>
      <arglist>(const kIOS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>operator+</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>af0fb18831b763a650e4a8abb00175fb2</anchor>
      <arglist>(const kIOS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a044764850d92fd124ac436c8605cb35e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a78f63ff1d7f83773355fe85e1cbcb820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ae44740023471a5998ceab5dabf1d9ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a194ee98c527ba48c0d150e284f22ab5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>af3935989959225253df1050e3284c008</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a90f2a65c2190202e0b184a60fa157298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1614b9233b5d4a59afef6b029a19c53a</anchor>
      <arglist>(const kIOS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>kIOS_Sphere</type>
      <name>spheres</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a2959f92c45b91119c0a943d8e212f146</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>num_spheres</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ac1facc5493466760dc766461acb22bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ac393672dd1afa4d7447e9e3768e38013</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshCollisionTraversalNode</name>
    <filename>a00050.html</filename>
    <templarg>BV</templarg>
    <templarg>_Options</templarg>
    <base>hpp::fcl::BVHCollisionTraversalNode</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a99b2d9b4848f6ced9a17c7fb10ab2187ad5297481718bc6e1750f23fe7c07b358</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a99b2d9b4848f6ced9a17c7fb10ab2187a7feaa8ddd7b90f03b0d11efc15536eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a99b2d9b4848f6ced9a17c7fb10ab2187ad5297481718bc6e1750f23fe7c07b358</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a99b2d9b4848f6ced9a17c7fb10ab2187a7feaa8ddd7b90f03b0d11efc15536eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNode</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a62f6d7d74562aba7eaad0a028b393d25</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>adb5a7f65201a31d5fc1cd3262a5fb6bb</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a7df88b9d6973eee3126b3cac715e3d90</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab4456b29564e8fbd37069bcee7132cdf</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a9c24415995971131fe80a1405d725e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a1689b7d0eb37b830beec67d2aa96c525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aae4efd2d2fd205807652604afa96bb18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8d21ea8cb9642d7377757ddd75ae9a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a7e488ed993288857a806d152bfbc23cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>details::RelativeTransformation&lt;!bool(RTIsIdentity)&gt;</type>
      <name>RT</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a74513e5f41f4f65afafc4abe307db90b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshDistanceTraversalNode</name>
    <filename>a00051.html</filename>
    <templarg>BV</templarg>
    <base>hpp::fcl::BVHDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a70d7dac4b8bbdcee82235802dd09ef94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab1cf50c45a19f7d1d699fac5206e83e9</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>afe2d93f1afb6a4e7ded49b4236f70de2</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3b4b6843c890280c73c5f06e47067712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a81f74736efcb05348cbb3cd786dd6043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abd850a98830543be712119e52bfa03b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abae226b100ee7d490af17de567bb5869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab10d397cec0ed41e8240835d44dca56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a24370e4cbd56d701bdb5150a6613dfad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshDistanceTraversalNode&lt; kIOS &gt;</name>
    <filename>a00051.html</filename>
    <base>BVHDistanceTraversalNode&lt; kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a70d7dac4b8bbdcee82235802dd09ef94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab1cf50c45a19f7d1d699fac5206e83e9</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>afe2d93f1afb6a4e7ded49b4236f70de2</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3b4b6843c890280c73c5f06e47067712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a81f74736efcb05348cbb3cd786dd6043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abd850a98830543be712119e52bfa03b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abae226b100ee7d490af17de567bb5869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab10d397cec0ed41e8240835d44dca56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a24370e4cbd56d701bdb5150a6613dfad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshDistanceTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00051.html</filename>
    <base>BVHDistanceTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a70d7dac4b8bbdcee82235802dd09ef94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab1cf50c45a19f7d1d699fac5206e83e9</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>afe2d93f1afb6a4e7ded49b4236f70de2</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3b4b6843c890280c73c5f06e47067712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a81f74736efcb05348cbb3cd786dd6043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abd850a98830543be712119e52bfa03b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abae226b100ee7d490af17de567bb5869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab10d397cec0ed41e8240835d44dca56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a24370e4cbd56d701bdb5150a6613dfad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshDistanceTraversalNode&lt; RSS &gt;</name>
    <filename>a00051.html</filename>
    <base>BVHDistanceTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a70d7dac4b8bbdcee82235802dd09ef94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab1cf50c45a19f7d1d699fac5206e83e9</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>afe2d93f1afb6a4e7ded49b4236f70de2</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3b4b6843c890280c73c5f06e47067712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a81f74736efcb05348cbb3cd786dd6043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abd850a98830543be712119e52bfa03b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abae226b100ee7d490af17de567bb5869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ab10d397cec0ed41e8240835d44dca56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a24370e4cbd56d701bdb5150a6613dfad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshDistanceTraversalNodekIOS</name>
    <filename>a00052.html</filename>
    <base>MeshDistanceTraversalNode&lt; kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNodekIOS</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ae8b231932cc66579cfc866f0b6536115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a13d7ead125c78252bc4404641afb4090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a155fb3e1a290f323fde65dde04d2ce02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0a478440f2cd0a5104f106925702a9ad</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a570b762a289e5f525ca481701dd5233c</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad514e3f6bd4e22ca89e3e73e570a6186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aab572288a1f45e096a66d283c0956415</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshDistanceTraversalNodeOBBRSS</name>
    <filename>a00053.html</filename>
    <base>MeshDistanceTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNodeOBBRSS</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a62c5dce5e4b2eeccc0b22c7dcdaf742d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aac27e41e78f105f0d709f74ac17a1bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ac9d85101e11bad30c8748ec3d1afcdd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a0d5fdb73a9b822cd3916ed0b8f9c5af2</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aeb388da71c8118c2104e3ca366ea9f8c</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a30a94afbd964fba84a0220c2ed9600d5</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a575090a3b75ab236ca4e362e89430690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aedc6f225a1723919176c6db3aebf596f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshDistanceTraversalNodeRSS</name>
    <filename>a00054.html</filename>
    <base>MeshDistanceTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNodeRSS</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aed7a8c44e2b8c3ddc31d5733b456e242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad908c504629b22657bfcb9c7e0064f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aff46c9139c71d9ffe6156d676df72c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af549c4a8c3af9f4313b9fc7c4ed3ba45</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>af6d46120d3f1b2f935e5a531edf94f80</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad121716c52264a7bd2ed9adcb7f3b96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ae527a51b4dbdc3e65d664cd9d5da769b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshLoader</name>
    <filename>a00055.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshLoader</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a47d600d417ce020d8176224e754da230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CollisionGeometryPtr_t</type>
      <name>load</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae950998ece96a47a527cca6a486032e3</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale, const NODE_TYPE &amp;bvType) HPP_FCL_DEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionGeometryPtr_t</type>
      <name>load</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a64b27c98f50b15c4f3396371e38793b9</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshLoader</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae1ad2b1692206519a1627e190727b71f</anchor>
      <arglist>(const NODE_TYPE &amp;bvType=BV_OBBRSS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshOcTreeCollisionTraversalNode</name>
    <filename>a00056.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>MeshOcTreeCollisionTraversalNode</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ae7a27a3eef0164b7ce3bd54b3d4fbf81</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a95fc13233db41d7872d9a5890793ff13</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>adb56ba6bbe26c44e9d2a0168e6992420</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ae9474ab9c8a9953bb98b08b651e87067</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a69ac36c835fd91d967a780f4723d4f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ae3e9e3f92b51cdef9a3d89bcb4933831</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a16a9ece9f2295a04bd75cce131323af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a06b5bf7424e6b926fd2557d8487d1e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ad8ddb41990aa8d64c2d3635995ded1be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshOcTreeDistanceTraversalNode</name>
    <filename>a00057.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>MeshOcTreeDistanceTraversalNode</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9b796cf88fb80420db032f97277331fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a0d936aa349ee98848b2d963b7f3d75c3</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a078d9c0652868ec1e5a2b3aa9529b21c</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>afd61e306628a827e45fd205367d79f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4d4276e3a6e9cf69ce76365d2c8f96cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ad1ee3f26c69a8f2f44c750babe9baa27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeCollisionTraversalNode</name>
    <filename>a00058.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <templarg>_Options</templarg>
    <base>hpp::fcl::BVHShapeCollisionTraversalNode</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a4152ecfd646d51c19c2457a3d865e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a68dec33ddae4749fc8518a0209951a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a4152ecfd646d51c19c2457a3d865e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a68dec33ddae4749fc8518a0209951a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad43fec3ece985f09566750ed0c93743d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aba5928d31f12a7b3c1b97fa18b3cc404</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af6867196ad9011a8e9aa5b29ca04d073</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa9a8a9de7769e20e2c3f25f181d5ac63</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a6d1b3241bda4d3cef1d71dd07333b7bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab7c63adcd7b016eafdee18ca98301d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9845f310d4550d5dffff1568b1dfecc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7cfdfaa42127d3a0833af9a1bf660ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; kIOS, S, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00058.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; kIOS, S &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a4152ecfd646d51c19c2457a3d865e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a68dec33ddae4749fc8518a0209951a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad43fec3ece985f09566750ed0c93743d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aba5928d31f12a7b3c1b97fa18b3cc404</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af6867196ad9011a8e9aa5b29ca04d073</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa9a8a9de7769e20e2c3f25f181d5ac63</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a6d1b3241bda4d3cef1d71dd07333b7bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab7c63adcd7b016eafdee18ca98301d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9845f310d4550d5dffff1568b1dfecc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7cfdfaa42127d3a0833af9a1bf660ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; OBB, S, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00058.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; OBB, S &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a4152ecfd646d51c19c2457a3d865e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a68dec33ddae4749fc8518a0209951a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad43fec3ece985f09566750ed0c93743d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aba5928d31f12a7b3c1b97fa18b3cc404</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af6867196ad9011a8e9aa5b29ca04d073</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa9a8a9de7769e20e2c3f25f181d5ac63</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a6d1b3241bda4d3cef1d71dd07333b7bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab7c63adcd7b016eafdee18ca98301d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9845f310d4550d5dffff1568b1dfecc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7cfdfaa42127d3a0833af9a1bf660ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00058.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; OBBRSS, S &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a4152ecfd646d51c19c2457a3d865e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a68dec33ddae4749fc8518a0209951a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad43fec3ece985f09566750ed0c93743d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aba5928d31f12a7b3c1b97fa18b3cc404</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af6867196ad9011a8e9aa5b29ca04d073</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa9a8a9de7769e20e2c3f25f181d5ac63</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a6d1b3241bda4d3cef1d71dd07333b7bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab7c63adcd7b016eafdee18ca98301d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9845f310d4550d5dffff1568b1dfecc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7cfdfaa42127d3a0833af9a1bf660ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; RSS, S, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00058.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; RSS, S &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a4152ecfd646d51c19c2457a3d865e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a448f34e785ef0b4bdd26fd96840a1af3a68dec33ddae4749fc8518a0209951a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad43fec3ece985f09566750ed0c93743d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aba5928d31f12a7b3c1b97fa18b3cc404</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af6867196ad9011a8e9aa5b29ca04d073</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aa9a8a9de7769e20e2c3f25f181d5ac63</anchor>
      <arglist>(int b1, int, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a6d1b3241bda4d3cef1d71dd07333b7bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab7c63adcd7b016eafdee18ca98301d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9845f310d4550d5dffff1568b1dfecc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7cfdfaa42127d3a0833af9a1bf660ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeCollisionTraversalNodekIOS</name>
    <filename>a00059.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; kIOS, S, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodekIOS</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a634a5d00e4eda71959e408a3b21b1db4</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeCollisionTraversalNodeOBB</name>
    <filename>a00060.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; OBB, S, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodeOBB</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a989b718b10811f7575c2154a50a1870d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeCollisionTraversalNodeOBBRSS</name>
    <filename>a00061.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab3cd7ce1c11e3b859300be7a9f7014c3</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeCollisionTraversalNodeRSS</name>
    <filename>a00062.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; RSS, S, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodeRSS</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a4889e5397e49678de88b7ee4c58ec16d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeDistanceTraversalNode</name>
    <filename>a00063.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>hpp::fcl::BVHShapeDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af06ed64b17670d177bfed7ccc5ffd101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa749ddcc7f1c0a1ba8cfe86299b61568</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a48b7161007eb92bced728b20a6c1cb55</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a4e1a07b27f8ffd59fcaae2c8598b377c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae66a806d725816813f56038ff6233c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a0cbcddb536d715f250a717d9e6e0fa9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae95ebaad0c89d2ffabc5c30a3ba37f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abc3aedd77bfa8c9f011676551b296375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNode&lt; kIOS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00063.html</filename>
    <base>BVHShapeDistanceTraversalNode&lt; kIOS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af06ed64b17670d177bfed7ccc5ffd101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa749ddcc7f1c0a1ba8cfe86299b61568</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a48b7161007eb92bced728b20a6c1cb55</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a4e1a07b27f8ffd59fcaae2c8598b377c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae66a806d725816813f56038ff6233c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a0cbcddb536d715f250a717d9e6e0fa9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae95ebaad0c89d2ffabc5c30a3ba37f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abc3aedd77bfa8c9f011676551b296375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00063.html</filename>
    <base>BVHShapeDistanceTraversalNode&lt; OBBRSS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af06ed64b17670d177bfed7ccc5ffd101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa749ddcc7f1c0a1ba8cfe86299b61568</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a48b7161007eb92bced728b20a6c1cb55</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a4e1a07b27f8ffd59fcaae2c8598b377c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae66a806d725816813f56038ff6233c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a0cbcddb536d715f250a717d9e6e0fa9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae95ebaad0c89d2ffabc5c30a3ba37f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abc3aedd77bfa8c9f011676551b296375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00063.html</filename>
    <base>BVHShapeDistanceTraversalNode&lt; RSS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af06ed64b17670d177bfed7ccc5ffd101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa749ddcc7f1c0a1ba8cfe86299b61568</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a48b7161007eb92bced728b20a6c1cb55</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a4e1a07b27f8ffd59fcaae2c8598b377c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae66a806d725816813f56038ff6233c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a0cbcddb536d715f250a717d9e6e0fa9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae95ebaad0c89d2ffabc5c30a3ba37f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abc3aedd77bfa8c9f011676551b296375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeDistanceTraversalNodekIOS</name>
    <filename>a00064.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeDistanceTraversalNode&lt; kIOS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodekIOS</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae167751ab0a691831f43047be51e3727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a87dcb5cc312069f66daaafa989e5447e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a1bacf97aa516cbdb7fb4e1ec5e2111bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a97fb526059da06df3ae14ae9618b7a03</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7f4385ad4bbe25a59451c59f33ddde16</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeDistanceTraversalNodeOBBRSS</name>
    <filename>a00065.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeDistanceTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodeOBBRSS</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aae38cf719d70b638dc21730c1096b1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a8d05823b8b0b7c0cdacf923c4a980337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af4cf951c53e49586a31eb40b4167a020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae88133ba012a4dc607131c8559ca5dcd</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>afcf39062c1ab8253de5469777b0fee7d</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshShapeDistanceTraversalNodeRSS</name>
    <filename>a00066.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeDistanceTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodeRSS</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a144532ae0e88ac787294ebbbce28c516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>afb348ab499b9833a223b88a4d6afbe0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aa7deca810291e7a5c90c273bae06aecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ac5953eb706d829ee63c4635046353e59</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2bb0ed3ea1dc990fdec7ef208303ecfd</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::MinkowskiDiff</name>
    <filename>a00067.html</filename>
    <member kind="function">
      <type></type>
      <name>MinkowskiDiff</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae03ab48058ec4e328acbb345814e6b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support0</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adb5ea93e7de983784373c719b938f573</anchor>
      <arglist>(const Vec3f &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support1</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a33b9acc9e6ed5c8d58f96e207b9ea978</anchor>
      <arglist>(const Vec3f &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3cb28541ffefae63005185f8802bad62</anchor>
      <arglist>(const Vec3f &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a394c76db05dc2c198d515d0f5b44f02e</anchor>
      <arglist>(const Vec3f &amp;d, size_t index) const </arglist>
    </member>
    <member kind="variable">
      <type>const ShapeBase *</type>
      <name>shapes</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aecf1514ff32ac049b36aa24c432b2ae6</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>toshape1</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4b486b351faaffa60ed44f92a869abd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>toshape0</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a33b65f4fe9a55ee3ae04b6c5d0ebdfc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OBB</name>
    <filename>a00068.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abc61735c6fbfb82267041aae81c939c8</anchor>
      <arglist>(const OBB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aedc76876524441977982f7bdb450b6bf</anchor>
      <arglist>(const OBB &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3ec62d769b6cff86713605c001ba8c86</anchor>
      <arglist>(const OBB &amp;other, OBB &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3d862fa746a325dd2c72e1f339a69c63</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a38717949edbe7574083cdcfa63d42252</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a559437d3b977205c6f031b24fe23a831</anchor>
      <arglist>(const OBB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>operator+</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adfd80a8074410b14de14dd80dac884a6</anchor>
      <arglist>(const OBB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7d4c1026180676f5ab5b219ee7d3a13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8cb9c9dd3e4bd286929cbfea6de01944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a9bcc433fa47704b47c565353b6b5c191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a31ae28b6f270dd2e6be7c36712946bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a62c764e92b99ac80ecc02860d3468cb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4e86766fb6b77df399cd828dd885bf9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a6a25d8768f34de8e37c9e9bc5c684c4b</anchor>
      <arglist>(const OBB &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>axes</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7fa65600df31c0b767aa573f2b1ece26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>To</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af022b399bacc51893532a7946f55300e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>extent</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a9a2cd0b2320a199b97e467f5b9be9dcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OBBRSS</name>
    <filename>a00069.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a21f42526d89570b6c26bf6949347f1cb</anchor>
      <arglist>(const OBBRSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac3dead2c9d90927aaaca67fe2fbad37f</anchor>
      <arglist>(const OBBRSS &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aaec10bd888ae1f9c35fec57870d07dce</anchor>
      <arglist>(const OBBRSS &amp;other, OBBRSS &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a256c34d0f98fce53d1a244a9a330a968</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ace676fcc244ae295b46f2194ad342c6f</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ab2494414e636eeb3ee91ff452fbbeac3</anchor>
      <arglist>(const OBBRSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>operator+</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a931ac3e89af99ac60993cde499fa3c17</anchor>
      <arglist>(const OBBRSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a610e8b8b89e1fde447df721c10f66c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a5acbed325c3f355578c3b748ea205970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac2ce0ad8ffcbaa75fc3ad0e915434bc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a03a95ed5bc7e1e76ce85911dad3e0cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ab04e0a6b05fc8cce5ab597433cc60130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a42894d02b6fd5efc1e43f7f284bc89ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae346cf41b208b3c5ac36cd3c9f11cb83</anchor>
      <arglist>(const OBBRSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a32d77538dc0d7ece2ce387a1f86bc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>rss</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ab2b45bed8104f9c5db2ce7e7171e49db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTree</name>
    <filename>a00070.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="typedef">
      <type>octomap::OcTreeNode</type>
      <name>OcTreeNode</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a577cfa02f5eec6d9d2c7a1e374b67b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcTree</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a22232a3580b97134f0ac5dca23077f1d</anchor>
      <arglist>(FCL_REAL resolution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcTree</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a11fe633a5b34cdadac289b2b29e97dab</anchor>
      <arglist>(const boost::shared_ptr&lt; const octomap::OcTree &gt; &amp;tree_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ac9ec7cc43f70ad89cd2a9bb347023e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>getRootBV</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a55305c246d8533c94e52c57a1aa3e402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OcTreeNode *</type>
      <name>getRoot</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a016df687386dc8b87bb9c36c9a38a801</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeOccupied</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a566e319e2c71f6218433776f1e4a951f</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeFree</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a813b118ca9795e79ddffa589bf5c799e</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeUncertain</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a1c42543635c3cbda7db0963628c2dd0f</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::array&lt; FCL_REAL, 6 &gt; &gt;</type>
      <name>toBoxes</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a2604217f201bcbc551347f1cf89d7039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getOccupancyThres</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae7af16366765abbbe5c5eb81a57969ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getFreeThres</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aab3244053d176cba45420704a7124e3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getDefaultOccupancy</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a09f60560e59af8e16881d32556c0679d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellDefaultOccupancy</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a5cbc293ffa544945754bc66c1a153e25</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOccupancyThres</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aaf30555708384fd9c1985f83edae1694</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeThres</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a95f4070517354c83280d0c0491e96b00</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>OcTreeNode *</type>
      <name>getNodeChild</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a5d326d22627d52bed7e840b0593153eb</anchor>
      <arglist>(OcTreeNode *node, unsigned int childIdx)</arglist>
    </member>
    <member kind="function">
      <type>const OcTreeNode *</type>
      <name>getNodeChild</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae8d70753c7ccb42283eb6935ea9f2f37</anchor>
      <arglist>(const OcTreeNode *node, unsigned int childIdx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nodeChildExists</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ab6731de43bd4440da320620b7e9367b4</anchor>
      <arglist>(const OcTreeNode *node, unsigned int childIdx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nodeHasChildren</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a56525405f3974f7dc6cefae69b90aac8</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ac848dc76f5e00052cab3ce295a29a3dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a78c0821486b27a5c65879d895aeb800f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeCollisionTraversalNode</name>
    <filename>a00071.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeCollisionTraversalNode</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a71175ab8ca12afa244b95f0f28cd3433</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>af1ca245783740e0b8d40bf55c26b2530</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8a80b556b01852d0bd08b98cf49ce036</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ace4372e92b9da5cd9dd6fecc5c993654</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab974ac9ff0e31a5b263a7faad10cc63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8ea5023f9695536a19955545d1df0251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a91f0cc994d5ddc2ea3194652455dc977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ab0f46763610a207a2a69ce0dcf31bd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a173f4f8b93f18de0a5325deb28b911a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeDistanceTraversalNode</name>
    <filename>a00072.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeDistanceTraversalNode</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a41c3e103147d67b41dfafee7a83fff3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1f2ef980e43d89bf76619c87b7a8a458</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afc27f9d6db078fab3c88ea951b0f7b0d</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2eef22ba093cc868e9c7eb89366a014c</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aba69f58103ad810b49ca72c38d3c98a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5b1d0c1adc9d6614a68b69897528f8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5bea068189e353d4c940cfe2a0774abd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeMeshCollisionTraversalNode</name>
    <filename>a00073.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeMeshCollisionTraversalNode</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a54887c2ce607c60983516b6fd56d2578</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a45599e1eac23159b74887d5de8afb398</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>aea031eefbc9ce12e5ee411c7c3ba7c59</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>afade14da5b3eac29238cac880e7c1312</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>acca4e916b68e63eba7d15143bbd5a586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a69fd53c26c7f8467c4329f3afce11e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a0e0468d4151aa6081a592ee60b0992cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ae28e9df1259f344172ae226232861f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a18fa46266919f1c34f856038e47c6547</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeMeshDistanceTraversalNode</name>
    <filename>a00074.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeMeshDistanceTraversalNode</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>abab9603b47886676d893fae3d21da2b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad9e5d0699d44a84e8afe02467832ac4c</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a10741c35120c6b6a9a55a40369f4562f</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a6035b62e700022936abdb5e49105e070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a52de6ef6381de97c6a4c25d6ba0e56f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af9e434445d87963367a4ca8ae494e48c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeShapeCollisionTraversalNode</name>
    <filename>a00075.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeShapeCollisionTraversalNode</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6e4310ae979cb9eedcd38d79fec0b013</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ab8cf1376554c01273dea0dca91a80436</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a297893d2d4cef4be55e2192fc5e2e72d</anchor>
      <arglist>(int, int, fcl::FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a98c095595b7daa1bfbc043593c137375</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7d7a2f0393b4999becdae68a07ac39ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2f6d9e7765f6ac7039ebaaff9e158a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a528e4e4f6441dd986ccdee1a298e4c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a9268c4c89d71feb87ebebb236c01c890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>afca8d7a0636e0c38fe418902e20cd314</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeShapeDistanceTraversalNode</name>
    <filename>a00076.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeShapeDistanceTraversalNode</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>abd2f951fea3d7b7e1d7ffb8723e51d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6bc3d1506d3068f8691a3d3545a3e598</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab0cac03e255e0415bbbeca978196237b</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a8300436f6b99362e7b47998ade273fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a93d96dce64c9204e9d0740627cea917c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a0c6e89a5d723aee60b51514cdaa39a52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTreeSolver</name>
    <filename>a00077.html</filename>
    <templarg>NarrowPhaseSolver</templarg>
    <member kind="function">
      <type></type>
      <name>OcTreeSolver</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a241659e290acca0756e7b784975a7436</anchor>
      <arglist>(const NarrowPhaseSolver *solver_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeIntersect</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a73a29d77ae26badb9cd5c8d99da155af</anchor>
      <arglist>(const OcTree *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeDistance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5dc1c060c1269ffeceed44127d25e922</anchor>
      <arglist>(const OcTree *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeMeshIntersect</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae8c3bcc5c27772921bcc957167e6a2ce</anchor>
      <arglist>(const OcTree *tree1, const BVHModel&lt; BV &gt; *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeMeshDistance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a623be4b775b8aa1f7237d38c125b0fc3</anchor>
      <arglist>(const OcTree *tree1, const BVHModel&lt; BV &gt; *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MeshOcTreeIntersect</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae39557c1893d2439b4220de06a5c44f2</anchor>
      <arglist>(const BVHModel&lt; BV &gt; *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MeshOcTreeDistance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad9250c07847cab55113df055be8d372f</anchor>
      <arglist>(const BVHModel&lt; BV &gt; *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeShapeIntersect</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a65aa1c128f2549843f6cf352783c69e0</anchor>
      <arglist>(const OcTree *tree, const S &amp;s, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShapeOcTreeIntersect</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4aa7243c02dfb9dfb2aa37c7369cc3a3</anchor>
      <arglist>(const S &amp;s, const OcTree *tree, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeShapeDistance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9f841193e5f1f43f916fcf0af21c296a</anchor>
      <arglist>(const OcTree *tree, const S &amp;s, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShapeOcTreeDistance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>afc138e1dcce2d1ff8e5aa00ca323a0ad</anchor>
      <arglist>(const S &amp;s, const OcTree *tree, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Plane</name>
    <filename>a00078.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a071d293316a977dcfdf55e536585dfb2</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a8fa292012cf3124a7f28d9643eec9126</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a74e9276bfffa9ccd05fc9285f005ffa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a4f1ae2442639272ea72e028c0e00a016</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a3651e1760c3bed21a1f5cbfbfdbdcca3</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a3a65c0da4d0c229e3288cbbeeae9f753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a46140e53d424b11159ff98b26b5aa289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a4a7540f85275f6bc834cff51e9b27fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a880b3c74f73b5487b7fadbef3dba2730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a4bcdeee3ba6fd7047081f399ea6dbff7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::PolySolver</name>
    <filename>a00079.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>solveLinear</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a15cc6eb9e3f879e5ea41c173656529c2</anchor>
      <arglist>(FCL_REAL c[2], FCL_REAL s[1])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>solveQuadric</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a756d9e349dcd2d91f927202fa6d2b8b1</anchor>
      <arglist>(FCL_REAL c[3], FCL_REAL s[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>solveCubic</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a379bdebabc9095887810964a94fc2a04</anchor>
      <arglist>(FCL_REAL c[4], FCL_REAL s[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::tools::Profiler</name>
    <filename>a00080.html</filename>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedBlock</class>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedStart</class>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab80f7466478c84d03cd5f0e6cb76d2c2</anchor>
      <arglist>(bool printOnDestroy=false, bool autoStart=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profiler</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a02cfda8b7dde7135a55596d5a2f45262</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a240c10988ef5407ffd57dcf93b1c2929</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3c38dda979b8794ef1acec6ad775a603</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a6e1bb240ad30ae37add14e3d3dd752a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a599e5f7e40c52fe7ad6ecf9d9edc4d21</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a1728360d6ec6eb041fb78843a73bbb7e</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8141a43867f6f2c8aa66946aadd410e8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2de91bf99c0d37f7addce570985232f3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a0fbc4c0568fb4510defa199524391f13</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2b39cdeadc84ff10ca74a3e12c12fcc5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Profiler &amp;</type>
      <name>Instance</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a55f2f61dd9aff34ac2524a78a67a2e43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Start</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab4f927795847322ee3259af2b905fcef</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Stop</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a67c78326b7024ba126a1fdd3836faed1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clear</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a5feac282db74ee7ae4b68c618963b41a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Event</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>afe4d6fe18c2cc89ab3d09660a0c8716a</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Average</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>abdc9dd43a906936b34c262c24ba69d08</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Begin</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab5a80f15afd8c5d2c0bcd949baad5c3d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>End</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a81b3a58fd39bed581e6aa40f9dfef5e4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Status</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>abb113a9ac7a81eeb0da097b5dca90028</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Running</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ad79e2f29c6cae207a215af70e9c07b35</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Project</name>
    <filename>a00081.html</filename>
    <class kind="struct">hpp::fcl::Project::ProjectResult</class>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectLine</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a1955235c89294bfdf5b4ab1d1a935a43</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTriangle</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aeefe0383d600cc67d465c5c73b1adcb0</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTetrahedra</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>acdb3d0ce8adc3246996a343f276dbe58</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, const Vec3f &amp;d, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectLineOrigin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>af2cd744c6f255a008be596721fa5276f</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTriangleOrigin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aeae5e5114ddac4e441a97fa0c8966e9c</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTetrahedraOrigin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a444f3d812bfc9a60e1cd1e49a2febc9a</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, const Vec3f &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::Project::ProjectResult</name>
    <filename>a00082.html</filename>
    <member kind="function">
      <type></type>
      <name>ProjectResult</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a58fce2a1bb52b7b17040d5377bd54bd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>parameterization</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a73fae502db3f2e315c60251147a3d7ee</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>sqr_distance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad29cc709b561fbc71114721a361748c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>encode</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a96789047912c3ec04d57f4f320b6902f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::RelativeTransformation</name>
    <filename>a00083.html</filename>
    <templarg>enabled</templarg>
    <member kind="function">
      <type></type>
      <name>RelativeTransformation</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0eadfc20eb1634a41c86b9167a29eb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>_R</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a4da992ebcf3bee5c34373b0bfaaf66bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>_T</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad7ff727251de50bc2266ffee3ebf6d8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a713c8abfe088815d2bea705bbacc1231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a1d63ba9d1e6003a833cbd3e4f9b0b4b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::RelativeTransformation&lt; false &gt;</name>
    <filename>a00084.html</filename>
    <member kind="function" static="yes">
      <type>static const Matrix3f &amp;</type>
      <name>_R</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aaec74cd70108985ea3e2fd7df399ab59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Vec3f &amp;</type>
      <name>_T</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a120f063bcfaf43ba4ed9fb81cef60fe8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RelativeTransformation&lt;!bool(RTIsIdentity)&gt;</name>
    <filename>a00083.html</filename>
    <member kind="function">
      <type></type>
      <name>RelativeTransformation</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0eadfc20eb1634a41c86b9167a29eb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>_R</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a4da992ebcf3bee5c34373b0bfaaf66bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>_T</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad7ff727251de50bc2266ffee3ebf6d8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a713c8abfe088815d2bea705bbacc1231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a1d63ba9d1e6003a833cbd3e4f9b0b4b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::RSS</name>
    <filename>a00085.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ab89ea7e9807109fb1f03d2df73785f8f</anchor>
      <arglist>(const RSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a987d46f33aaffaba53a16deb911d1a67</anchor>
      <arglist>(const RSS &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aaceec98b643fba8447b69b1ed20ddda3</anchor>
      <arglist>(const RSS &amp;other, RSS &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aae7fbb70df610835aff5ee6984be9ea3</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>af4f7f2c6359692121920df94c460c893</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ac934e99ef62e67afdbea8b06f97bda99</anchor>
      <arglist>(const RSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>operator+</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a873fb39c78cad427910c8a1296c27fb7</anchor>
      <arglist>(const RSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a92e7748a90c0c2b6982d5a0421d33687</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa9ae0bf35501fb7fd56873134f510beb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a22b607d78ced19fe96fd5babe757c538</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a59e57dc063f262334aa8416537a78ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>adf85aa42d9f52b81ea92b29c046659da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a207d611625ededf1d9657d2d992b77fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a42feebc3c3170fe4e597ec09b44822b1</anchor>
      <arglist>(const RSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>axes</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ac666fdacdfe7841033ffec0a32bebebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>Tr</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a35617e0c73eebcf3058f9a8816e5c940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>l</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ac143026feb5511355b2e59da11a76fd5</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>r</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>abfb8cbbfe59b26dc86d4110ac2525f4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::tools::Profiler::ScopedBlock</name>
    <filename>a00086.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedBlock</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a274003b2b26fb5217431e885f4c13008</anchor>
      <arglist>(const std::string &amp;name, Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedBlock</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a06ecde4a661f7aefc2ebe32aea826d90</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::tools::Profiler::ScopedStart</name>
    <filename>a00087.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedStart</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a0a872a5774b145a4b51cee1c2ab805ff</anchor>
      <arglist>(Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedStart</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af73047fea20369427b2da4c7d9d16c53</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeBase</name>
    <filename>a00088.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type></type>
      <name>ShapeBase</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a0ac2d822a6533c0f079d78eff4a7e597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>afd86e773e8491f14265825beee0733cf</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeBVHCollisionTraversalNode</name>
    <filename>a00089.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d360c7ce228166346fdb0c897ca2f2d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac075133a00d75069bf2a1085a5a96864</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a4ecc755be7abac7e6d37f9a8362811bc</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2535aff900ae9e275dfd3b6ad54084d9</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a45ef36661855add525da9561efe931c5</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae40de0ce49fcc4aacb1b737ead44c010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a61ac0c06d27e7ed19bde5df591c75c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model1_bv</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d060bd349bea3eab52d7576bd256730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa1bbaa3cf6aca8f3fd0296515d1589a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa57539f866c10e6ee9f598467ee74fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>af1fde6255a3fefb80c80ca8dc599a632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, kIOS &gt;</name>
    <filename>a00089.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d360c7ce228166346fdb0c897ca2f2d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac075133a00d75069bf2a1085a5a96864</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a4ecc755be7abac7e6d37f9a8362811bc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2535aff900ae9e275dfd3b6ad54084d9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a45ef36661855add525da9561efe931c5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae40de0ce49fcc4aacb1b737ead44c010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a61ac0c06d27e7ed19bde5df591c75c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model1_bv</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d060bd349bea3eab52d7576bd256730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa1bbaa3cf6aca8f3fd0296515d1589a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa57539f866c10e6ee9f598467ee74fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>af1fde6255a3fefb80c80ca8dc599a632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, OBB &gt;</name>
    <filename>a00089.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d360c7ce228166346fdb0c897ca2f2d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac075133a00d75069bf2a1085a5a96864</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a4ecc755be7abac7e6d37f9a8362811bc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2535aff900ae9e275dfd3b6ad54084d9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a45ef36661855add525da9561efe931c5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae40de0ce49fcc4aacb1b737ead44c010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBB &gt; *</type>
      <name>model2</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a61ac0c06d27e7ed19bde5df591c75c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>model1_bv</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d060bd349bea3eab52d7576bd256730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa1bbaa3cf6aca8f3fd0296515d1589a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa57539f866c10e6ee9f598467ee74fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>af1fde6255a3fefb80c80ca8dc599a632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, OBBRSS &gt;</name>
    <filename>a00089.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d360c7ce228166346fdb0c897ca2f2d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac075133a00d75069bf2a1085a5a96864</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a4ecc755be7abac7e6d37f9a8362811bc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2535aff900ae9e275dfd3b6ad54084d9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a45ef36661855add525da9561efe931c5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae40de0ce49fcc4aacb1b737ead44c010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a61ac0c06d27e7ed19bde5df591c75c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model1_bv</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d060bd349bea3eab52d7576bd256730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa1bbaa3cf6aca8f3fd0296515d1589a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa57539f866c10e6ee9f598467ee74fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>af1fde6255a3fefb80c80ca8dc599a632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, RSS &gt;</name>
    <filename>a00089.html</filename>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d360c7ce228166346fdb0c897ca2f2d</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac075133a00d75069bf2a1085a5a96864</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a4ecc755be7abac7e6d37f9a8362811bc</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2535aff900ae9e275dfd3b6ad54084d9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a45ef36661855add525da9561efe931c5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae40de0ce49fcc4aacb1b737ead44c010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a61ac0c06d27e7ed19bde5df591c75c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model1_bv</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1d060bd349bea3eab52d7576bd256730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa1bbaa3cf6aca8f3fd0296515d1589a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa57539f866c10e6ee9f598467ee74fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>af1fde6255a3fefb80c80ca8dc599a632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeBVHDistanceTraversalNode</name>
    <filename>a00090.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a41473a24122e280f754c014ee49e769d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6e382bcf0932f20045143cb640d0b92e</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6fa4e1dea93a1ece299ff1c510ba608f</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a582957ebe595f4883a56bf885e7fa96b</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>afdb746d531a25e15ba2fffb3d55b4962</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a0bdfa5c7f1d56af0152684b3f2be3ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7c9fd411a318de70d9fe7e6e42a73d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model1_bv</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a2487e795a2d4b584e15831b0944a9598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>abd59dd69d22f179c144494d847dd6dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ae3da25c729e44ad356a6ddff7b343e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad9d16fd08832f5cc1914aa0628cf2448</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHDistanceTraversalNode&lt; S, kIOS &gt;</name>
    <filename>a00090.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a41473a24122e280f754c014ee49e769d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6e382bcf0932f20045143cb640d0b92e</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6fa4e1dea93a1ece299ff1c510ba608f</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a582957ebe595f4883a56bf885e7fa96b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>afdb746d531a25e15ba2fffb3d55b4962</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a0bdfa5c7f1d56af0152684b3f2be3ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7c9fd411a318de70d9fe7e6e42a73d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model1_bv</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a2487e795a2d4b584e15831b0944a9598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>abd59dd69d22f179c144494d847dd6dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ae3da25c729e44ad356a6ddff7b343e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad9d16fd08832f5cc1914aa0628cf2448</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHDistanceTraversalNode&lt; S, OBBRSS &gt;</name>
    <filename>a00090.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a41473a24122e280f754c014ee49e769d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6e382bcf0932f20045143cb640d0b92e</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6fa4e1dea93a1ece299ff1c510ba608f</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a582957ebe595f4883a56bf885e7fa96b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>afdb746d531a25e15ba2fffb3d55b4962</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a0bdfa5c7f1d56af0152684b3f2be3ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7c9fd411a318de70d9fe7e6e42a73d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model1_bv</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a2487e795a2d4b584e15831b0944a9598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>abd59dd69d22f179c144494d847dd6dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ae3da25c729e44ad356a6ddff7b343e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad9d16fd08832f5cc1914aa0628cf2448</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHDistanceTraversalNode&lt; S, RSS &gt;</name>
    <filename>a00090.html</filename>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a41473a24122e280f754c014ee49e769d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6e382bcf0932f20045143cb640d0b92e</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6fa4e1dea93a1ece299ff1c510ba608f</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a582957ebe595f4883a56bf885e7fa96b</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>afdb746d531a25e15ba2fffb3d55b4962</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a0bdfa5c7f1d56af0152684b3f2be3ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7c9fd411a318de70d9fe7e6e42a73d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model1_bv</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a2487e795a2d4b584e15831b0944a9598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>abd59dd69d22f179c144494d847dd6dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ae3da25c729e44ad356a6ddff7b343e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad9d16fd08832f5cc1914aa0628cf2448</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeCollisionTraversalNode</name>
    <filename>a00091.html</filename>
    <templarg>S1</templarg>
    <templarg>S2</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeCollisionTraversalNode</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>aa7eda0862656e075576ed0123539d9e6</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a1f06aa733926ea816d7bf108cb11fcb2</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a7fe2c7eaa969e2e08fef367b71dd6f53</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a25118ea0e1d97d5c9d81720ab4285595</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const S1 *</type>
      <name>model1</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>abc29222a92832f28070ceed1a61734cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S2 *</type>
      <name>model2</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>aaaa233c9340b4daceec4203c9122a6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a4d2ef3be1b8007814a5aac351a0e5b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeDistanceTraversalNode</name>
    <filename>a00092.html</filename>
    <templarg>S1</templarg>
    <templarg>S2</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeDistanceTraversalNode</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a57a46b3c259d957cff4b4f5240ecd22d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a75eb55c72c624ec51ed2a0bbfa48bf16</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a66c6a73ce13b2ee5f20c8348114f7092</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const S1 *</type>
      <name>model1</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a31ecfcd4cdebc853a56f29830dd71b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S2 *</type>
      <name>model2</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ace0a8a01aa4c3664b95304068d361b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a0a335339e7a487c4d22b9b3c923a280b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshCollisionTraversalNode</name>
    <filename>a00093.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <templarg>_Options</templarg>
    <base>hpp::fcl::ShapeBVHCollisionTraversalNode</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a42e41f43a585eff4aa2d97af8e786aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a3c7f3078885c7da28d3dc7e64c403736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a42e41f43a585eff4aa2d97af8e786aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a3c7f3078885c7da28d3dc7e64c403736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0a329ba055732602081d7323a47720d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a80e41e534cff7a956652452e8abec6ef</anchor>
      <arglist>(int, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a42a5cfc3d645302a3e27aad364a4b6b8</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aca8368839db9f974bc9200c1014814f9</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3d968cac7282a27751e5bc70de6bedd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a50b4967829f48dbe3b4504e718be3a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2775b4ae38f38b98710ee1b05548da9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a70d47989308f802d72fea0de9419a556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, kIOS, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00093.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, kIOS &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a42e41f43a585eff4aa2d97af8e786aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a3c7f3078885c7da28d3dc7e64c403736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0a329ba055732602081d7323a47720d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a80e41e534cff7a956652452e8abec6ef</anchor>
      <arglist>(int, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a42a5cfc3d645302a3e27aad364a4b6b8</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aca8368839db9f974bc9200c1014814f9</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3d968cac7282a27751e5bc70de6bedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a50b4967829f48dbe3b4504e718be3a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2775b4ae38f38b98710ee1b05548da9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a70d47989308f802d72fea0de9419a556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, OBB, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00093.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, OBB &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a42e41f43a585eff4aa2d97af8e786aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a3c7f3078885c7da28d3dc7e64c403736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0a329ba055732602081d7323a47720d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a80e41e534cff7a956652452e8abec6ef</anchor>
      <arglist>(int, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a42a5cfc3d645302a3e27aad364a4b6b8</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aca8368839db9f974bc9200c1014814f9</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3d968cac7282a27751e5bc70de6bedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a50b4967829f48dbe3b4504e718be3a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2775b4ae38f38b98710ee1b05548da9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a70d47989308f802d72fea0de9419a556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00093.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, OBBRSS &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a42e41f43a585eff4aa2d97af8e786aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a3c7f3078885c7da28d3dc7e64c403736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0a329ba055732602081d7323a47720d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a80e41e534cff7a956652452e8abec6ef</anchor>
      <arglist>(int, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a42a5cfc3d645302a3e27aad364a4b6b8</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aca8368839db9f974bc9200c1014814f9</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3d968cac7282a27751e5bc70de6bedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a50b4967829f48dbe3b4504e718be3a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2775b4ae38f38b98710ee1b05548da9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a70d47989308f802d72fea0de9419a556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, RSS, NarrowPhaseSolver, 0 &gt;</name>
    <filename>a00093.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, RSS &gt;</base>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a42e41f43a585eff4aa2d97af8e786aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTIsIdentity</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a26bb181d4fa1d8c6245b0b48abc77fc6a3c7f3078885c7da28d3dc7e64c403736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a0a329ba055732602081d7323a47720d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a80e41e534cff7a956652452e8abec6ef</anchor>
      <arglist>(int, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a42a5cfc3d645302a3e27aad364a4b6b8</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aca8368839db9f974bc9200c1014814f9</anchor>
      <arglist>(int, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3d968cac7282a27751e5bc70de6bedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a50b4967829f48dbe3b4504e718be3a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a2775b4ae38f38b98710ee1b05548da9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a70d47989308f802d72fea0de9419a556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshCollisionTraversalNodekIOS</name>
    <filename>a00094.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, kIOS, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodekIOS</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aedd2245c1a59b539b98ed8e7c1f98591</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshCollisionTraversalNodeOBB</name>
    <filename>a00095.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, OBB, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodeOBB</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aab3cb10823945a3112cc9e08bd60add0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshCollisionTraversalNodeOBBRSS</name>
    <filename>a00096.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac7e7bf9da628037bff9d4a942d1e27e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshCollisionTraversalNodeRSS</name>
    <filename>a00097.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, RSS, NarrowPhaseSolver, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodeRSS</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a38fbb22e2d2c41f03bf3e1ca5ca683b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshDistanceTraversalNode</name>
    <filename>a00098.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>hpp::fcl::ShapeBVHDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a557012b9a4623bef303884a63a8a87f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17664e883991a9c748aec12832890ad5</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a6ef62e1b687367f7244d37a54277f653</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>adfe9cbbe188ba33ae1635ec32d47a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a42d89a7a0ae46e0d8b7f2dad7e5c7d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5e6db754549059a7c54445d35696d651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17a8c7e6d002defa694b0f08ed348a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad456efe4651ac7ccafa6960a84cb8e95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, kIOS, NarrowPhaseSolver &gt;</name>
    <filename>a00098.html</filename>
    <base>ShapeBVHDistanceTraversalNode&lt; S, kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a557012b9a4623bef303884a63a8a87f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17664e883991a9c748aec12832890ad5</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a6ef62e1b687367f7244d37a54277f653</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>adfe9cbbe188ba33ae1635ec32d47a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a42d89a7a0ae46e0d8b7f2dad7e5c7d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5e6db754549059a7c54445d35696d651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17a8c7e6d002defa694b0f08ed348a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad456efe4651ac7ccafa6960a84cb8e95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</name>
    <filename>a00098.html</filename>
    <base>ShapeBVHDistanceTraversalNode&lt; S, OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a557012b9a4623bef303884a63a8a87f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17664e883991a9c748aec12832890ad5</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a6ef62e1b687367f7244d37a54277f653</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>adfe9cbbe188ba33ae1635ec32d47a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a42d89a7a0ae46e0d8b7f2dad7e5c7d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5e6db754549059a7c54445d35696d651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17a8c7e6d002defa694b0f08ed348a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad456efe4651ac7ccafa6960a84cb8e95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</name>
    <filename>a00098.html</filename>
    <base>ShapeBVHDistanceTraversalNode&lt; S, RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a557012b9a4623bef303884a63a8a87f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17664e883991a9c748aec12832890ad5</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a6ef62e1b687367f7244d37a54277f653</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>adfe9cbbe188ba33ae1635ec32d47a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a42d89a7a0ae46e0d8b7f2dad7e5c7d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5e6db754549059a7c54445d35696d651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a17a8c7e6d002defa694b0f08ed348a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad456efe4651ac7ccafa6960a84cb8e95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshDistanceTraversalNodekIOS</name>
    <filename>a00099.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, kIOS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodekIOS</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ae815926369c1a159c3f129a4a2c56acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aabea636e21196c100e22f9e8870ac268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a2bf2276a952ee50f85ce2d39f07321d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a511d2f9e103018c223cbc8b48cf64072</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a7fe7f30549405a0485af5b5e2bec2ea8</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshDistanceTraversalNodeOBBRSS</name>
    <filename>a00100.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodeOBBRSS</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a8ea28e2dfa892f102e5eac6c94a1100f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad407074a5de45837d1cf033decd059f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>afa5698a043781276e39e976a4fb01b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>add521f1121e03cd3b56ec33ce2f4bd71</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>af01a53fcb46f537ed58121cc7dd6f4ad</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeMeshDistanceTraversalNodeRSS</name>
    <filename>a00101.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodeRSS</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad7cb4534ec83fe931178b591a0b1a66e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a091628afd65bb5cba262ef88278d7de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>acd0dccd414f687cf159e8dcf8a1d16c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae0c836a5dd2ac9db840d34cf34100212</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a7c5735a2e3e81401385d27f8c4ff2a57</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeOcTreeCollisionTraversalNode</name>
    <filename>a00102.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeOcTreeCollisionTraversalNode</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a66648ee4a70c6b2f70ef2d61e8a36c57</anchor>
      <arglist>(const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a6a4e464434418f567ca5d434bf239a34</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a68357597c8570d5524d2ee4eb80aa039</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a793c6d6ec468f18248abc7655175b06e</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>adb23f846a37e0c960fd6da0e4ef9ec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ad316e7d8dc98ca71dbab58a299741d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a6481ed5345c07f3a07f7a71bd594dcc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a7d89ebbaa2e3c15c97a39c0c4c23d550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ae07cccfdbfe49db67e970eaa5667bd3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeOcTreeDistanceTraversalNode</name>
    <filename>a00103.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>hpp::fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeOcTreeDistanceTraversalNode</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a605f3a1fec3359459c6e842aec7e4d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a60a1af3857a454042fedf6f5400392c7</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9b03a27502ececc1841e7670b4a93300</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a7d96a5cfe332bbd77ecd532e5f779689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac78eddbfca47b6af2dd08805dedb15e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a92d1411576c7c806bc0b3b25938c9352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::GJK::Simplex</name>
    <filename>a00104.html</filename>
    <member kind="function">
      <type></type>
      <name>Simplex</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad0d48c2bf9a89dfdf89277a3b7ed0b91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>vertex</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a168d07ffca58f1cfa0407718f689aa20</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>coefficient</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7e076d22b261ab7df16faaa3b544b82a</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>rank</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aa0f6260f03954c88f7ab2b4a2a171fcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::GJK::SimplexV</name>
    <filename>a00105.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexV</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a504defa36398d1897465d04566135fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>d</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a693e06b76afa51c8f96cb562a14b29f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>w</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aeb5af26265354b636335a3475807bd10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Sphere</name>
    <filename>a00106.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a983f044a63965f415d14ad13d1ca1054</anchor>
      <arglist>(FCL_REAL radius_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af406037d946c598a77f46b2b1d24f948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a867ef880bd20841db7f5edf7497af4bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a87d6aacc0e1fc2ac5468305821b11c34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7f4d0ad906223c05bab923eb7cbb908b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a896679c40f9188fdc70e0bab3f2a42d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Transform3f</name>
    <filename>a00107.html</filename>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aa17a6cbd7fd0c1eee4922b92af4900cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3baf550604f48b85f891ee2a4bc76089</anchor>
      <arglist>(const Matrix3f &amp;R_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9a744badfee71bb6fff2a5dd84a04b91</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae8875747b9df6f0beca9f5b410f075f0</anchor>
      <arglist>(const Matrix3f &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ab8e0b4e7dd4d5d04acd1d10c461e81be</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a08e86bf157be061fad44f361440163fc</anchor>
      <arglist>(const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a860ca5e5e145b9a9c1c50231bbb54da1</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>operator=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>acc06f35a779da2b82f8e1c6fe10ea485</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9577d0db2b5c5455feb582ff7311b83a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aa809ee7187ddcac6f2ba768c0d8cee6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>getQuatRotation</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3d23bef86c3d3a5fdb12be293f341df3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a4a655439b7c545a180f6afd3c2644b60</anchor>
      <arglist>(const Matrix3f &amp;R_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aeffb3a214f98129904faef347767ffdf</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad3ad4b332d90d67f12f9115cd14ee186</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aac0e59a2d14256251521afa01383e8f9</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuatRotation</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aef90e060827024567971614d9c93dc14</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>transform</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a05408f453406dba1965f6e7555f4f817</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>inverse</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>af79406519ddcfc7728871d06148ad8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverseTimes</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3ead83b2fc778e11b4defb359b8bba12</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a30e558b7da699146fe002560475580ef</anchor>
      <arglist>(const Transform3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>operator*</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a6cb61b61d7f1ddf618f42eff38820b90</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a400e08713893ddddc3abe23248b24f77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac7ead4b63b3dbcef03104b457007f9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9e628e95d2f314ca0e8b83a4ffeb012d</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3040a314847ab29804fa4c1e451d5e8c</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::TraversalNodeBase</name>
    <filename>a00108.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TraversalNodeBase</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9b9499c6a274e7dfdebb5aeb5885ab44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocess</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2176fb2b0cdd75cf7ba8e8751d695678</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocess</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a63610b94e604b957045a6fe420498bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aeb4a28a6c863f52e29a0c0657907c6cb</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a39046c96597f2a13fa27e16622d16e15</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2c76dd725a9f2b1b1d9601404315637f</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a11ac1143a9b8083fe51e131b65534d53</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a74fd9fb32840a6094cafb130bf1ee4bb</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af238b7a68214adf656fda02ce712eaf1</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af7998f708f59efc011299082d1be6ea4</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enableStatistics</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a6d2466a110a58c927f40c04890a9c197</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a5c7fd7f9997c86c5f60611748d2c8ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa909b99dec7d5b56fcd2f62468050de3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Triangle</name>
    <filename>a00109.html</filename>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac9b9bb513d080afe0bad14637d487f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af987fd577ae831a0d30ecc665d1ce99d</anchor>
      <arglist>(std::size_t p1, std::size_t p2, std::size_t p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a2641f4d1519b8dd8a33fb1249b994aa7</anchor>
      <arglist>(std::size_t p1, std::size_t p2, std::size_t p3)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator[]</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a382608fbe30f85495b964a42955a890a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a1e700ff0ba5c54dd736a8a5e4fc8f328</anchor>
      <arglist>(int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::TriangleAndVertices</name>
    <filename>a00110.html</filename>
    <member kind="variable">
      <type>std::vector&lt; fcl::Vec3f &gt;</type>
      <name>vertices_</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a31c7297a41801a2d2b066037dc37d0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; fcl::Triangle &gt;</type>
      <name>triangles_</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a98127f7a3a8c4e6e50c57aac8ac9c6e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::TriangleDistance</name>
    <filename>a00111.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>segPoints</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a9e3381297d6c3635928b2bcde6180b30</anchor>
      <arglist>(const Vec3f &amp;P, const Vec3f &amp;A, const Vec3f &amp;Q, const Vec3f &amp;B, Vec3f &amp;VEC, Vec3f &amp;X, Vec3f &amp;Y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a2300dbdfcf3c2fe7fcae2fc6a80e751b</anchor>
      <arglist>(const Vec3f S[3], const Vec3f T[3], Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a93d6470b777010de4ff53dde5c5941b7</anchor>
      <arglist>(const Vec3f &amp;S1, const Vec3f &amp;S2, const Vec3f &amp;S3, const Vec3f &amp;T1, const Vec3f &amp;T2, const Vec3f &amp;T3, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ae8c158afb3d1a9dfe722d65c2b18d769</anchor>
      <arglist>(const Vec3f S[3], const Vec3f T[3], const Matrix3f &amp;R, const Vec3f &amp;Tl, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ac7a9f7397971140a67e29c74505f3f85</anchor>
      <arglist>(const Vec3f S[3], const Vec3f T[3], const Transform3f &amp;tf, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aa5514852ed3935e88edc772ee1149041</anchor>
      <arglist>(const Vec3f &amp;S1, const Vec3f &amp;S2, const Vec3f &amp;S3, const Vec3f &amp;T1, const Vec3f &amp;T2, const Vec3f &amp;T3, const Matrix3f &amp;R, const Vec3f &amp;Tl, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aeccefc8098c5a1142d94c588f7b7729d</anchor>
      <arglist>(const Vec3f &amp;S1, const Vec3f &amp;S2, const Vec3f &amp;S3, const Vec3f &amp;T1, const Vec3f &amp;T2, const Vec3f &amp;T3, const Transform3f &amp;tf, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::TriangleP</name>
    <filename>a00112.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>TriangleP</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a329cac668c1753a418ae5903a51bc62c</anchor>
      <arglist>(const Vec3f &amp;a_, const Vec3f &amp;b_, const Vec3f &amp;c_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5ae36fc2aa0a64c4a38b1b4ade982473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae5a4a8f77e79ef06d523d59d987e2772</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>a</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a43af97d630230adb270449e9ce225b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>b</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad006b123bc4ac03a11b923503f45df9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>c</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a05b880a55dddd4a0eacfed3f2968bc5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Variance3f</name>
    <filename>a00113.html</filename>
    <member kind="function">
      <type></type>
      <name>Variance3f</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4858877791032403a1bf284c3be6f371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variance3f</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>adaf4ea006be50f1b8a3c41ff179dcd79</anchor>
      <arglist>(const Matrix3f &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a699d82c16f82f5394cd275943a2ea703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Variance3f &amp;</type>
      <name>sqrt</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a192a102c54c9133b9cc8075fe620b237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>Sigma</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>aae78c9f62dea00b689fda547102efdbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f::Scalar</type>
      <name>sigma</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a489ae1e4d568cfc041ad89b3673456b6</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>axis</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a3db64a43d4176db77e2207a6498e1e0c</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp</name>
    <filename>a00165.html</filename>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl</name>
    <filename>a00144.html</filename>
    <namespace>hpp::fcl::details</namespace>
    <namespace>hpp::fcl::time</namespace>
    <namespace>hpp::fcl::tools</namespace>
    <class kind="class">hpp::fcl::AABB</class>
    <class kind="class">hpp::fcl::Box</class>
    <class kind="class">hpp::fcl::BVFitter</class>
    <class kind="class">hpp::fcl::BVFitter&lt; kIOS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBB &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBBRSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; RSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitterBase</class>
    <class kind="class">hpp::fcl::BVHCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::BVHDistanceTraversalNode</class>
    <class kind="struct">hpp::fcl::BVHFrontNode</class>
    <class kind="class">hpp::fcl::BVHModel</class>
    <class kind="class">hpp::fcl::BVHShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::BVHShapeDistanceTraversalNode</class>
    <class kind="struct">hpp::fcl::BVNode</class>
    <class kind="struct">hpp::fcl::BVNodeBase</class>
    <class kind="class">hpp::fcl::BVSplitter</class>
    <class kind="class">hpp::fcl::BVSplitterBase</class>
    <class kind="class">hpp::fcl::CachedMeshLoader</class>
    <class kind="class">hpp::fcl::Capsule</class>
    <class kind="struct">hpp::fcl::CollisionFunctionMatrix</class>
    <class kind="class">hpp::fcl::CollisionGeometry</class>
    <class kind="class">hpp::fcl::CollisionObject</class>
    <class kind="struct">hpp::fcl::CollisionRequest</class>
    <class kind="struct">hpp::fcl::CollisionResult</class>
    <class kind="class">hpp::fcl::CollisionTraversalNodeBase</class>
    <class kind="class">hpp::fcl::Cone</class>
    <class kind="struct">hpp::fcl::Contact</class>
    <class kind="class">hpp::fcl::Convex</class>
    <class kind="class">hpp::fcl::Cylinder</class>
    <class kind="struct">hpp::fcl::DistanceFunctionMatrix</class>
    <class kind="struct">hpp::fcl::DistanceRequest</class>
    <class kind="struct">hpp::fcl::DistanceResult</class>
    <class kind="class">hpp::fcl::DistanceTraversalNodeBase</class>
    <class kind="struct">hpp::fcl::GJKSolver_indep</class>
    <class kind="class">hpp::fcl::Halfspace</class>
    <class kind="class">hpp::fcl::Intersect</class>
    <class kind="class">hpp::fcl::KDOP</class>
    <class kind="class">hpp::fcl::kIOS</class>
    <class kind="class">hpp::fcl::MeshCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::MeshDistanceTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::MeshLoader</class>
    <class kind="class">hpp::fcl::MeshOcTreeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshOcTreeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodeOBB</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::MeshShapeCollisionTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::MeshShapeDistanceTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::OBB</class>
    <class kind="class">hpp::fcl::OBBRSS</class>
    <class kind="class">hpp::fcl::OcTree</class>
    <class kind="class">hpp::fcl::OcTreeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeMeshCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeMeshDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeShapeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::OcTreeSolver</class>
    <class kind="class">hpp::fcl::Plane</class>
    <class kind="class">hpp::fcl::PolySolver</class>
    <class kind="class">hpp::fcl::Project</class>
    <class kind="class">hpp::fcl::RSS</class>
    <class kind="class">hpp::fcl::ShapeBase</class>
    <class kind="class">hpp::fcl::ShapeBVHCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeBVHDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodeOBB</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshCollisionTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNodekIOS</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNodeOBBRSS</class>
    <class kind="class">hpp::fcl::ShapeMeshDistanceTraversalNodeRSS</class>
    <class kind="class">hpp::fcl::ShapeOcTreeCollisionTraversalNode</class>
    <class kind="class">hpp::fcl::ShapeOcTreeDistanceTraversalNode</class>
    <class kind="class">hpp::fcl::Sphere</class>
    <class kind="class">hpp::fcl::Transform3f</class>
    <class kind="class">hpp::fcl::TraversalNodeBase</class>
    <class kind="class">hpp::fcl::Triangle</class>
    <class kind="struct">hpp::fcl::TriangleAndVertices</class>
    <class kind="class">hpp::fcl::TriangleDistance</class>
    <class kind="class">hpp::fcl::TriangleP</class>
    <class kind="class">hpp::fcl::Variance3f</class>
    <member kind="typedef">
      <type>std::list&lt; BVHFrontNode &gt;</type>
      <name>BVHFrontList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8c20ec44e3a418af3dc5c65703874616</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>FCL_REAL</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adea4a7b8739d4b402df24c8f813f9167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint64_t</type>
      <name>FCL_INT64</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2692612ad5b645d6d2b11ec2cb47b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int64_t</type>
      <name>FCL_UINT64</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af6906da3f4af5538293b15c789b7eae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint32_t</type>
      <name>FCL_UINT32</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a17af3f19f8e8cf54e668f110b33a4db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int32_t</type>
      <name>FCL_INT32</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a146cb79ce3546457f63484d8653f1aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionObject &gt;</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8d2a9681dce6546ad22ba34efc9ac53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionObject &gt;</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae73445793afcbbbaf947f1c640402d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>CollisionGeometryPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af3eb23736874699d672c2ba38fabfd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>CollisionGeometryConstPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8a3b79c97987777b6bb50177f5a710c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0290ba47d50e32cb9ec7fe9919b34dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; FCL_REAL &gt;</type>
      <name>Quaternion3f</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9e6a031efadd2b45d9e6a710a4db8b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 1 &gt;</type>
      <name>Vec3f</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2c54f23d974b75093503b78c52ebf26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; OBB, 0 &gt;</type>
      <name>MeshCollisionTraversalNodeOBB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a726b3678ab95b6278e39ac64d17551cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; RSS, 0 &gt;</type>
      <name>MeshCollisionTraversalNodeRSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a49b6fcb2ebd68fe0888701b64f634b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; kIOS, 0 &gt;</type>
      <name>MeshCollisionTraversalNodekIOS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a690ebaee0e25f28d92e0a28937948273</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshCollisionTraversalNode&lt; OBBRSS, 0 &gt;</type>
      <name>MeshCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5e5a5ee4bf9689305016cf82b8758bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SplitMethodType</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEAN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a41984460d51b7a959a8dc725e48f3804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEDIAN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a48f7486082fdbb59501f0b5683fed99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_BV_CENTER</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096af22470b4ca15070ae44678e8b39bcbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHBuildState</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_EMPTY</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a599291b2358a576bb29ed6bc3f771b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_BEGUN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34acbb3fd1a056ebe10e707a4e9d90ed679</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_PROCESSED</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34ac31973785f46a7236953db39831aa2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATE_BEGUN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34afd113a7a9f4f107f391973f10be2f7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATED</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34af2efe60e4f29aa2f2196ce63d70898d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_REPLACE_BEGUN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a26bfcd09168f3f2c6e37ec8996dd257b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHReturnCode</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_OK</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a5bb79400f0c1491a91e1714255ac2197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_MODEL_OUT_OF_MEMORY</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a6e8d204d67fd86da296cf5df8df6988f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_OUT_OF_SEQUENCE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a92aab1ee2362a2544e9d2d01fcfb22d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_MODEL</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aba9e47646636d73494e193503de1275b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_PREVIOUS_FRAME</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aaf8daf2fa25e777017147da4ef285aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNSUPPORTED_FUNCTION</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a69fc64d3283b0d6c981fc4d7359537e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNUPDATED_MODEL</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a20ce868149503262e668936ae788fbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_INCORRECT_DATA</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448afa43ae63ca78c626a5b48b2af22d4034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a101d30d34324deb868539c5397892e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHModelType</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aac715e3d1c0ca1f507696344d223fb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_TRIANGLES</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4ae43bfff9c3dba9c5be72504b905f716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_POINTCLOUD</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aa8e8c3edd6807b005bd21f6d42e66e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GJKSolverType</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac3af2670aca610715906987d9be25013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GST_INDEP</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac3af2670aca610715906987d9be25013a3680f5794bfdc7a07a521ecbb6856bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CollisionRequestFlag</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a6c6a81beb93df33ef631fb1c5f85b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTANCE_LOWER_BOUND</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a5748b82aa4907305d88b544f1a0d6782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REQUEST</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a51c6f10acf2a00d6364f494c59b19c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OBJECT_TYPE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743ab97b195154ce66bcde999b96955c34b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a891e2acf8e8a0f7d09161116763e7786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a055e29c6c327db3317981d6e10ea483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a07875801169d528106cdc18050d34b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743a8f0daf652a81850f41b7a5f9edd0973a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NODE_TYPE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a09499bc968015e70c88abd0ac49ec576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a6b8b72b2bc94c4cdaf0f8bdfe2f57d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a97792a9e5b54a66e35d622fc451ae228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629ac6537c6f46eb315caa62e958d6a01ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a2bba1b5c0c32a60d102d873a87af3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a7cc7aacb5f760c03eecf10e777ab43a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a82f9a72132fc3ac2129e850eb3f587a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a5b262aadde08387b5024851aefd24f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629aa5ada6139dd3dfd92b42ca868e22de5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a968d76f0f0e986116eeb66a8c5625e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629abaafdecaefcd7cc77bb222507c8ed5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a1b92d87b25a7b37c0165dc748e87f0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629ad8b2f221e96d4115afcb432f566b91aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629ab8222ab78f5e34873e47ff38a4a60990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629aaf3f4f6aff7014652bc616023608f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a60419a2711acdcd7f0cec275b690204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a8177e508ab379d8adf9ac8ec6f6b00cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a165fed59837736b3cf419c9371b10ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629aeed5451597a2217f56d409fbd501476b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629a28eadc00e07b871426473f77fd298654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RelativeTransformationIsIdentity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab7ac5002865d9470908ac08965c8fb3fac27e3f89d015b348f5380571c3dbaed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AABB</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4157e8dae53fc58ac6f0cad82a9625f1</anchor>
      <arglist>(const AABB &amp;aabb, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AABB</type>
      <name>rotate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afde48140dfd4c9cec4586943cc7e1093</anchor>
      <arglist>(const AABB &amp;aabb, const Matrix3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa55dc0aa22483464ca86d19593cfd425</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac46865af0d6227385e8e9ad84f33f7e1</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertBV</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3861944f9a1a8ca6faf55693b8d6a48a</anchor>
      <arglist>(const BV1 &amp;bv1, const Transform3f &amp;tf1, BV2 &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae6cf593751a5ec4b8cacff23f263f2c3</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aef074fbede0ec91572f6aaf1c46cf0f1</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;, const CollisionRequest &amp;, FCL_REAL &amp;)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afe749059cefb3ccebe110119b5cce25e</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6dbc1a1b53e4356bbd3762121b7d4b5f</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5d66db04e136e5499d38f20dc1f56cf5</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afd7f666001d3e5993a56cc78387c362e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a45fc6ec1ea00a75cd3d683f171b258a7</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0e3572df8542d6e55a90b9ab19af8692</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9a82cf29771a725e3f2051c1f4aacc1c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0708248161a09bc67781974a45b126db</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjoint</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a03fc5c77aaee689b2a042aecb92c5a77</anchor>
      <arglist>(const OBBRSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9e3192731b5c60626d90aac2516965fe</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac655c5e454b1b7ac43a4d536860e8965</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adb886982090fe15f5d0364f7423a76a6</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>translate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adb206c2b8c711593bb718185089d8680</anchor>
      <arglist>(const RSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a41b0545fd5f94baddd4af374018230ab</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0b55e1136e154a2aa39e85cdbbcc271b</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aee05b7707469f40cb749f0e89d827b9a</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6ed2b8b3e3552c6d2c50b1cd18d0eb25</anchor>
      <arglist>(Vec3f *ps, int n, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBB &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a47023cdf59d58acd42c8e61956d1656c</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; RSS &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abc1822cad419fa4a51eec74a50ec8dd2</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; kIOS &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a104b61e67c94287f693cc837284ddd77</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBBRSS &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0dcecfe497127679f97a56516d91fefd</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFrontList</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0046ac4155cea8a2c752fe897de122fb</anchor>
      <arglist>(BVHFrontList *front_list, int b1, int b2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8d59b847973f205049e26bd4960254b1</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad0e66b8aefd76eeb2ad20f0f1972f3bd</anchor>
      <arglist>(BVHModel&lt; OBB &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a30d98fb40dd186ace51beae395f975f3</anchor>
      <arglist>(BVHModel&lt; RSS &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>BVHModel&lt; BV &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a50d3dace9fb2165f7f7cac2f96d872c1</anchor>
      <arglist>(const BVHModel&lt; BV &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCovariance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af00bb05ed8ae1410da7e268c26b8ed8b</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adaceec24c8bd00c1f36af97e8e0f9127</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Matrix3f &amp;axes, Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5b66ef2a6abbd25f89ebcd5f1e9d7ff5</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;axes, Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circumCircleComputation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6e0aec22c4b80b3a60c442936c6db613</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a14232ec52eedd35670d6665df301f6d1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a92c6bbd26ada192d5a17fd054de5aed2</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad6d6761718327dee06a19e069ada4854</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator~</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a56fef7e1565be433b2d4bda02d9b40f5</anchor>
      <arglist>(CollisionRequestFlag a)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator|</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad3a2e46341378309e16d1cbdc49681e9</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator&amp;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a01b2d93d4e2832cadb6f898d7d3bfc6f</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator^</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9865727c7e01efebdad7c69e38f0efe6</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>afdc036f7a9abdd49bbc520055bd197dc</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a45cdaea65b84b32c82928ea0b1f88337</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a046f64624a803a4738c273a9a075a488</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa3a2d8d36188e5bd301bb9abe185ff39</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;request, CollisionResult &amp;result, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a24d847e12d6faf3cd5b0aec8e9c6b525</anchor>
      <arglist>(DistanceTraversalNodeBase *node, BVHFrontList *front_list=NULL, int qsize=2)</arglist>
    </member>
    <member kind="function">
      <type>CollisionGeometry *</type>
      <name>extract</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae90d115db6fbc782ba03e0a7698ab309</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a555bf285d1673306077fafed69baa66d</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a96bdf3a7cb8e472cfecfb2b55013ca50</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived::Scalar</type>
      <name>triple</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab05999d3462650135de37611357cca42</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;x, const Eigen::MatrixBase&lt; Derived &gt; &amp;y, const Eigen::MatrixBase&lt; Derived &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af70bf2c011f5bfc4d826b1ad5aa8d198</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;_w, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;_u, const Eigen::MatrixBase&lt; Derived3 &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hat</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abe0492146d84f67916431a7d972cd1ce</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;mat, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad8854d299d07f45639813469b850e697</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R1, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t1, const Eigen::MatrixBase&lt; Derived &gt; &amp;R2, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t2, const Eigen::MatrixBase&lt; Derived &gt; &amp;R, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a11fdb8bba107aa378d0b4144a9067e5d</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, typename Derived::Scalar dout[3], Vector *vout)</arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>quadraticForm</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a27831557d7197ee7d53a5a5074d55c44</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7673db13abffc3ce36aeacc7a8476467</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;lhs, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;rhs, const FCL_REAL tol=std::numeric_limits&lt; FCL_REAL &gt;::epsilon()*100)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setEulerZYX</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a550dc5c142d4d82193b2b00d9eda531b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R, FCL_REAL eulerX, FCL_REAL eulerY, FCL_REAL eulerZ)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setEulerYPR</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aade623336ae8887df843ad73251d54d5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R, FCL_REAL yaw, FCL_REAL pitch, FCL_REAL roll)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a064fdd482bd14204f4cb7961b0439221</anchor>
      <arglist>(std::ostream &amp;o, const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isQuatIdentity</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a14ac5cbd4fdc04b67044bbc095f60378</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areQuatEquals</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0a21b6e12798f336f2008780dca4c21a</anchor>
      <arglist>(const Quaternion3f &amp;q1, const Quaternion3f &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aba763c548a5f4a9856d166f68c10169a</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a99df9bdbfcae0833e73be287400791fa</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6dd7021712377c3c830116d8f56dc6be</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>buildMesh</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3e3237e7a85dff5582f415243a6a5591</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, const aiNode *node, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>meshFromAssimpScene</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9594728658fc60120cd9d35b4a735f0e</anchor>
      <arglist>(const std::string &amp;name, const fcl::Vec3f &amp;scale, const aiScene *scene, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPolyhedronFromResource</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6f4dd9e9c902262cc1750186ac08a5fe</anchor>
      <arglist>(const std::string &amp;resource_path, const fcl::Vec3f &amp;scale, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;polyhedron)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeChildBV</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1fdb438f1be04349f1001f66f2fae272</anchor>
      <arglist>(const AABB &amp;root_bv, unsigned int i, AABB &amp;child_bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4159e5bd7fcd0d21a577e28973f2a3df</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Box &amp;shape, const Transform3f &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2efddca1e728c2facad8bcf136293bee</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int seg, unsigned int ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a082ba3c2464b887cc0c0d07da0a3e69c</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int n_faces_for_unit_sphere)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9ed3aec072ce9b1504575ae48b2bbbb1</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae7eda2b0400534a4888ba1d157f51f6a</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cylinder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a848be7c97311c9ba344e6cb2152c33b0</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab0d67e9fb0ca5af3d416774645673be3</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2be1ed3cb5e10908c58ac49834bcf24c</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7e5dccd855b2e03164a861085d1bcc8c</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac439854fc5c0f54d6d05dd476ca8adf8</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af63a3acef6a1a961a5563bdd4368e421</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac2741e82aa45d5e668a5f6beb9e575ea</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7d057bcd0bc931161aaf2cada8cba84b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Convex &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a11c5ec4ef5af6e5e980808c16005d888</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a65b9ffe994ef10c0a8417220cf8128bb</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aff6072402df5dfaf645a0787c61f5ea7</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa756e64cb895761eda9bf6b84c367267</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a62e8682fcab146b16376d0ee164897a8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acc29531b43787c3d787eee2f205d1e5d</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5e589885b7ce8302c967a8ee0bb48b90</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab7a78234dab23157bc13285d5ec1c34e</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae75f48642949abe72cf0a8536af4594b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Convex &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7553598b40ac9cec73b021aeb06b36fa</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac19cf4bd5ddd03c43ad644a53a12766f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7c78518896db821ae4c252e9fa8584a2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a165618e6cd44517690b96b02d519d5ef</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae1dac581028f8a93e212767864f8091c</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af0ed4dad068cbc17368e6e0003da8bf8</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6119093dd05229ed0bbafb783b92416d</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a37581778c3f4d7a8c6aab74a0794fe4a</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a31a5196a276ce91cde2269144d96144b</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa592de4ec63a8446b7e5faa7aaaa4a7a</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7f62d309b3eb540b231afd61400f11eb</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac832310f3d393d3fa459a4e89b04accd</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a285046016d23c6a9243ec1648fa1ee03</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a134493346e13d41a50f58c8c3b703805</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab3e987c7055c59c6c909d2eafc086ad5</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2f4d9e15c1e1b0473d9ba1b60a0999ce</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad2ece30036a4f85e7c94c83cbc375440</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a389ea0f82667a14b50e3d06f73ddf65c</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a277ffcdbeb26ebc55199e6a406855dd6</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acc71a7af4b6e2e263856268cff862017</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1e0ae109d229233ad501f0ca44c0d83a</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a881ce55ecba092ac28c3e50dc9d251ac</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab8fc7100a8f801232d6edc17318ff4fd</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab73ba0d67fdb919b39b46212afadda5e</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7f7c58989901ce4833565fbad1e941cc</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1d181bb550651b697fe967c65589bd20</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a60c2357a25853e76cee3c90c8fcfdb08</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac11f0f1e774f49eef7ce62cdf76e406b</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0a77f5fb3a5542a8894e703734674548</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a437d93b4db8e66f1eb3efb7240c39eea</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a223238cae76563da8fb18c186a74b2c3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Halfspace</type>
      <name>transform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>acea5b7360b35ca7d2f645cbe265b846b</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Plane</type>
      <name>transform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a869df3c83544b794997edf4221483f59</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a15f87e0645d24279eea615474f487ea2</anchor>
      <arglist>(ShapeCollisionTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a40a15d7a08da7bf388b5e6662f843170</anchor>
      <arglist>(MeshShapeCollisionTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab829995f2ac5e7fca9727b3c4cfa760a</anchor>
      <arglist>(ShapeMeshCollisionTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a76177c54a87a7d0e83359e9f31fc16ef</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac758ce4662fb8364bf7e5bd9c3365d50</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a63e351f2bf1e9b768169f678358c9e6e</anchor>
      <arglist>(MeshShapeCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aaffeba23ec17f345de8f1d65d9817cbf</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a33c055390acac1666f48afa7384360e8</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a522eb4cc3a55a9d9d5038433265a8452</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a45db6776afcb61d69a933b72cd6f6caf</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a03606351a7c41043007a25e1e47658c3</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a08cdecb8d9d2075073ce190a554e44c2</anchor>
      <arglist>(MeshCollisionTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84b88de47509b9c313b105c2da8dff2c</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4a7f812d639694fa6dbe11bfe9714192</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a05174836b82ea15bc277146d75497816</anchor>
      <arglist>(MeshCollisionTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad46a88ef06a6a02062ab16ab09b70dab</anchor>
      <arglist>(MeshCollisionTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad949bfdcee9741981a4c7ed8b8c1c9a5</anchor>
      <arglist>(ShapeDistanceTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2078670bca24b2979c0eb6bf8837cab4</anchor>
      <arglist>(MeshDistanceTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a20cd04c45435db3ce27b681825478b74</anchor>
      <arglist>(MeshDistanceTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af8567469de1932c375b904d482630fdc</anchor>
      <arglist>(MeshDistanceTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7053de0f57a197081254d43c7bdea599</anchor>
      <arglist>(MeshDistanceTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af050284fcc6e54d1308309efbdd020cd</anchor>
      <arglist>(MeshShapeDistanceTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae359db8caee004d125ece3aebb118b25</anchor>
      <arglist>(ShapeMeshDistanceTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a676f8d12f5e37e1385f2a3fecaa7c0d3</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2c0ded2c4101bfd44d9a0a4c18732749</anchor>
      <arglist>(MeshShapeDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af4c98516479a14bf6744c4ffa3067189</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a330a76c89cce5ceb77f8336f48280160</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af66410d5dff99760cf28b549726808c0</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7fd5d0c921f4d55c5ae480b6f5e8bf8e</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a67bb215a85d574ba182029ca8528fde7</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2ea3bd6d99e974bed8ac998d548c64e4</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a8fc4927bd1f83d66bbb3cf8f69e079de</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa845c64b800a6c5b227fc7cd02909e2e</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceQueueRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a2f6425035a5938182ff54571d684a79d</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagateBVHFrontListCollisionRecurse</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>abbfaae9cba880d8433279f402b62455a</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;request, CollisionResult &amp;result, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a438b1c5b6b980188beb2ee3cc62f4d06</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const CollisionRequest &amp;request, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aaf49e7d06c8c0c59b1375f01202afa09</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a93c6c90392dd705df05b2f565017194b</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::details</name>
    <filename>a00166.html</filename>
    <class kind="struct">hpp::fcl::details::ContactPoint</class>
    <class kind="struct">hpp::fcl::details::DistanceTraversalBVTesting_impl</class>
    <class kind="struct">hpp::fcl::details::DistanceTraversalBVTesting_impl&lt; OBB &gt;</class>
    <class kind="struct">hpp::fcl::details::EPA</class>
    <class kind="struct">hpp::fcl::details::GJK</class>
    <class kind="struct">hpp::fcl::details::MinkowskiDiff</class>
    <class kind="struct">hpp::fcl::details::RelativeTransformation</class>
    <class kind="struct">hpp::fcl::details::RelativeTransformation&lt; false &gt;</class>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4903b02725b90c095e6549de6ba0699a</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getBVAxes</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3516105f086bde515b62c3470992a88a</anchor>
      <arglist>(const BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getBVAxes&lt; OBBRSS &gt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a60d0f4a34a6ac223d659ea21300bcae9</anchor>
      <arglist>(const OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setupShapeMeshDistanceOrientedNode</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a42c6b2343f269625bd042b9ea3f1cc50</anchor>
      <arglist>(OrientedNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lineSegmentPointClosestToPoint</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad74448ba245f84e92964415430e9e6fc</anchor>
      <arglist>(const Vec3f &amp;p, const Vec3f &amp;s1, const Vec3f &amp;s2, Vec3f &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>abdf4dd5bf43fc5faa6232f86bf882602</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aaa3ad7e0e3f64b2e5913d59d046e7ff3</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCylinderDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a46ae4abaa69cb073fa56a6cc10ad170d</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a53409ec0d0f056087174bf70fccc7939</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4bcaa999947f69643c67c4b026aac9d6</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>segmentSqrDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae64dcb74833601930e65f5cf340e9d6c</anchor>
      <arglist>(const Vec3f &amp;from, const Vec3f &amp;to, const Vec3f &amp;p, Vec3f &amp;nearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>projectInTriangle</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ada136020ea9fc32c579a6151ca14bc57</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3, const Vec3f &amp;normal, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a77e864eced1982f43af542c16f1ee6a0</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab436f5e0ee56e7272a76991b08ea4dd6</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a5f23a98f33621802770322311114ca12</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a71c3b63fad5224fe749c0674da68df07</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lineClosestApproach</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a01ad1bf75ebac5d6b5182b9d6b635155</anchor>
      <arglist>(const Vec3f &amp;pa, const Vec3f &amp;ua, const Vec3f &amp;pb, const Vec3f &amp;ub, FCL_REAL *alpha, FCL_REAL *beta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>intersectRectQuad2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1b2be54c2293b4fd0c821fa9cb458a80</anchor>
      <arglist>(FCL_REAL h[2], FCL_REAL p[8], FCL_REAL ret[16])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cullPoints2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2f9f7834b25c98253d1eee37a9bff748</anchor>
      <arglist>(int n, FCL_REAL p[], int m, int i0, int iret[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boxBox2</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3efed42afa53e10d6cb12c8aee45495e</anchor>
      <arglist>(const Vec3f &amp;side1, const Matrix3f &amp;R1, const Vec3f &amp;T1, const Vec3f &amp;side2, const Matrix3f &amp;R2, const Vec3f &amp;T2, Vec3f &amp;normal, FCL_REAL *depth, int *return_code, int maxc, std::vector&lt; ContactPoint &gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareContactPoints</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6b8e614972a9ab4b2411cd5f6a50c6d2</anchor>
      <arglist>(const ContactPoint &amp;c1, const ContactPoint &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxBoxIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a0ae72137615ad019d628eaf9663988ea</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth_, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>acdbc4ec76f14d4042d0ca323a842d058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a736ba2a729606d34af9fcbf5feb628ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a04d86f59357581007b4ab079cf50f7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae9028aa6f9e5f68f5844f488cbeae004</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aa73c0bc0cce29f5855671b5fe59a9535</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab33117e360755821af52cfe1556e9f27</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsuleHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7aef1441d0e624780c5849a2ec406a39</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>acc72e6011e602fb1701093ae43117763</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coneHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1e1c570de4b6d603ea687863f1992154</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1ed782af7b4ca1ab28f20f89076fd8b0</anchor>
      <arglist>(const Convex &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceTriangleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab07d68942b42396f9d647fd87d943e7a</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeHalfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a281a49255faae461198ecaed5cbe2e41</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3ecbf7e7887298b43b3c39cd1a17d11e</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f &amp;p, Vec3f &amp;d, Halfspace &amp;s, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>planeIntersectTolerance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac1f5bbb96e2e88210d952146a534ad67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>planeIntersectTolerance&lt; double &gt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aaf9f0a709957b7dd69b619a70a6d7a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>planeIntersectTolerance&lt; float &gt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afa2cf3bbce6cf362400ce60faf2e9fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>spherePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a81638ad0d66c1948c768e8fb23a21fdb</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxPlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a04f0fbf51a9254bedc663b9d87ca33d8</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxSphereDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad006a11ba7ff9fad2f6260ebb4256477</anchor>
      <arglist>(const Box &amp;b, const Transform3f &amp;tfb, const Sphere &amp;s, const Transform3f &amp;tfs, FCL_REAL &amp;dist, Vec3f &amp;pb, Vec3f &amp;ps, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsulePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a487edd7d0f258f8e8ae2bf51e9e91cdb</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderPlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a94610ecd0149efb25f77098fb679caa0</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2ad015b80e0f60421c943c5e64d70423</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexPlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aeddc3e91476f8ce70adefbc54c3fa2fc</anchor>
      <arglist>(const Convex &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeTriangleIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1f2623fa152f2a71df6a7dfeb00510b2</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspacePlaneIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a43ef9cfbc30cc714ecf94e2158f09c3b</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeIntersect</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4b7ed102cb562e7366f5914ae9e30928</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *, FCL_REAL *, Vec3f *)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computePenetration</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1e5b67c1c8d8fd6b3f459eda8ed61e29</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, const Transform3f &amp;tf1, const Transform3f &amp;tf2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_FACES</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad78b55709e00c61c0b42aae0acdc7bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_VERTICES</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a11676867b3c3184af0cbc1a4642e0a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const FCL_REAL</type>
      <name>EPA_EPS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4332243b7ea08b8ca8faf567004f25b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_ITERATIONS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a9546f6bbceffa14865ce4106e7e9e9de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::time</name>
    <filename>a00167.html</filename>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>point</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac4a863e49926d2acd048cf75d4888c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>duration</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a09f5cee278621a2800b3cd6b7f5c8229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8ac8c48fdfd1731eda6a534e174527a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1cbdfd430bc6cf66673fb9ebc07a9cad</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aafa8547e25fbd027e5ac032328b46465</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::tools</name>
    <filename>a00168.html</filename>
    <class kind="class">hpp::fcl::tools::Profiler</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index">hpp_fcl_documentation</docanchor>
  </compound>
</tagfile>
