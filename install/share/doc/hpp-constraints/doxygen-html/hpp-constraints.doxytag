<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>active-set-differentiable-function.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00095</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::ActiveSetDifferentiableFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>affine-function.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00096</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::Identity</class>
    <class kind="class">hpp::constraints::AffineFunction</class>
    <class kind="struct">hpp::constraints::ConstantFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>by-substitution.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/solver/</path>
    <filename>a00097</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00121" name="locked-joint.hh" local="no" imported="no">hpp/constraints/locked-joint.hh</includes>
    <includes id="a00110" name="explicit-constraint-set.hh" local="no" imported="no">hpp/constraints/explicit-constraint-set.hh</includes>
    <includes id="a00114" name="hierarchical-iterative.hh" local="no" imported="no">hpp/constraints/solver/hierarchical-iterative.hh</includes>
    <class kind="class">hpp::constraints::solver::BySubstitution</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::solver</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a29e4f3aba39aa566c7dcaf3d9b0cf0a1</anchor>
      <arglist>(std::ostream &amp;os, const BySubstitution &amp;hs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>impl/by-substitution.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/solver/impl/</path>
    <filename>a00098</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::solver</namespace>
    <member kind="typedef">
      <type>std::numeric_limits&lt; value_type &gt;</type>
      <name>numeric_limits</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>afe2de5f14d88fbaf8fe8451d11999a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::NumTraits&lt; value_type &gt;</type>
      <name>NumTraits</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a247f16aa1274871f63b448e698f01e83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>com-between-feet.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00099</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00138" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <class kind="class">hpp::constraints::ComBetweenFeet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>configuration-constraint.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00100</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::ConfigurationConstraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>convex-shape-contact.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00101</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00113" name="generic-transformation.hh" local="no" imported="no">hpp/constraints/generic-transformation.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00102" name="convex-shape.hh" local="no" imported="no">hpp/constraints/convex-shape.hh</includes>
    <class kind="class">hpp::constraints::ConvexShapeContact</class>
    <class kind="struct">hpp::constraints::ConvexShapeContact::ForceData</class>
    <class kind="class">hpp::constraints::ConvexShapeContactComplement</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>convex-shape.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00102</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::ConvexShape</class>
    <class kind="struct">hpp::constraints::ConvexShapeData</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function">
      <type>void</type>
      <name>closestPointToSegment</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a39d0c33b565f64e8b5865819bc23bd23</anchor>
      <arglist>(const vector3_t &amp;P, const vector3_t &amp;A, const vector3_t &amp;v, vector3_t &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>vector3_t</type>
      <name>linePlaneIntersection</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae5f7c5b91a4db313a6578f2beffa5d16</anchor>
      <arglist>(const vector3_t &amp;A, const vector3_t &amp;u, const vector3_t &amp;P, const vector3_t &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>difference.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/function/</path>
    <filename>a00104</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::function::Difference</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::function</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Difference &gt;</type>
      <name>DifferencePtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af8dc61f1967a47674b2221c66bce49fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>differentiable-function-set.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00105</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::DifferentiableFunctionSet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>differentiable-function-stack.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00106</filename>
    <includes id="a00105" name="differentiable-function-set.hh" local="no" imported="no">hpp/constraints/differentiable-function-set.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>differentiable-function.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00107</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::DifferentiableFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance-between-bodies.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00108</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::DistanceBetweenBodies</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>distance-between-points-in-bodies.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00109</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::DistanceBetweenPointsInBodies</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>explicit-constraint-set.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00110</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00127" name="matrix-view.hh" local="no" imported="no">hpp/constraints/matrix-view.hh</includes>
    <includes id="a00105" name="differentiable-function-set.hh" local="no" imported="no">hpp/constraints/differentiable-function-set.hh</includes>
    <class kind="class">hpp::constraints::ExplicitConstraintSet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>explicit-solver.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00111</filename>
    <includes id="a00110" name="explicit-constraint-set.hh" local="no" imported="no">hpp/constraints/explicit-constraint-set.hh</includes>
  </compound>
  <compound kind="file">
    <name>explicit.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00112</filename>
    <includes id="a00119" name="implicit.hh" local="no" imported="no">hpp/constraints/implicit.hh</includes>
    <class kind="class">hpp::constraints::Explicit</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00001</filename>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <namespace>Eigen</namespace>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::eigen</namespace>
    <namespace>hpp::constraints::solver</namespace>
    <namespace>hpp::constraints::implicit</namespace>
    <namespace>hpp::constraints::explicit_</namespace>
    <namespace>hpp::constraints::function</namespace>
    <member kind="typedef">
      <type>pinocchio::size_type</type>
      <name>size_type</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a814ee4492e70bf211b6fb9915ce1e54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::value_type</type>
      <name>value_type</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a89b8f8d8e6a505595faae99c48b9743a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af2f1eff4448b3685ecb571df21823171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointConstPtr_t</type>
      <name>JointConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afe35bbb1218676f4e1904edd6d1d8b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a312c14c2e80260bc281b7c0cc6574ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix3_t</type>
      <name>matrix3_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1f02cdd2080797337d055a44e42abbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, 6 &gt;</type>
      <name>matrix6_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af2debb6a9d6b16fd716293e8bd319b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abd6ca588c37024349553c216cb9477ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const matrix_t &gt;</type>
      <name>matrixIn_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adda38afd03d9829e1f876c58eec0c9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; matrix_t &gt;</type>
      <name>matrixOut_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac27371d812fbe3af3375c781f7cd5e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4e7af7ffd02f53d6df34c7e415ca7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab1b52e662ad6c55da9f9b54c49812682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ade3f15882e933929faddad04096881ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ComJacobian_t</type>
      <name>ComJacobian_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a88a8d2e340c724ca2fa9416bf7d22038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a313fbc4e5dce815c64a450544eeefba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5b2b35fc4abea960ca5dd5da9a98700b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupElement</type>
      <name>LiegroupElement</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a063973be1c316528ae7e32fadf3be85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupElementRef</type>
      <name>LiegroupElementRef</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae77bc941b2bfe8045c78141ae36556c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupSpace</type>
      <name>LiegroupSpace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a57c2bbf66f0269d7d2936ab9589dd376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupSpacePtr_t</type>
      <name>LiegroupSpacePtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5906b3c8cdbdb03a1b381134033cf9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupSpaceConstPtr_t</type>
      <name>LiegroupSpaceConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a53fc81b6ef46970f8256fb1ed8cef611</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, 3 &gt;</type>
      <name>matrix3_t</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>affcbd3fc0d9ca6ecd66c1b10b1ce962f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, 1 &gt;</type>
      <name>vector3_t</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ade138a2da90ab24b4aa0f4e4b8e07470</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 5, 1 &gt;</type>
      <name>vector5_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a20e68f45f2a942ab230c01df54a0c308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>vector6_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a33fc8e01e8c6749b46fadce92de42b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 7, 1 &gt;</type>
      <name>vector7_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a82f04fe102375c39088719ff6c7c7518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; value_type &gt;</type>
      <name>Quaternion_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a37184c6bcc554f770f1f1dfb7a5fafe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ArrayXb</type>
      <name>ArrayXb</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a864dadf1de71770094412617d8ea2c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayXb</type>
      <name>bool_array_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>addf0dcbb0101f32f411decae3f7b285f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_type, size_type &gt;</type>
      <name>segment_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5ab92c649bac6513f138b45be03e9011</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; segment_t &gt;</type>
      <name>segments_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8237dc0c03f6bb9cfcdc6108b813262d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1e8ff5fa9551b0cc932469a2cf257f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2ffd99f683154cbefc850cb2bdda98f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectConstPtr_t</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0da021048af7f109f7e50a9e7bd6753c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0b101443dde5d3fda26d530be1664161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abcf51622ac9c7022b1c356f0a5539827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afd23d6d6fc9ae9a6a528952bc4b70963</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Device</type>
      <name>Device</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae07ff3046df3fffc8bf735d9544f2e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a46cf13d27e9076c419221a3964286738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CenterOfMassComputation</type>
      <name>CenterOfMassComputation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae64d6dd64dcc7122e1c3c9219683e813</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acff12d90d8a76d9bd053ed2a3e5950e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DifferentiableFunction &gt;</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af86fed84ae43e85f9e8643a5af42feb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DifferentiableFunctionSet &gt;</type>
      <name>DifferentiableFunctionSetPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a550d1814ff0f9a27d88f2092be061f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferentiableFunctionSet DifferentiableFunctionStack</type>
      <name>HPP_CONSTRAINTS_DEPRECATED</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af28fe26b28d6fcd2eb7e40c48336fade</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ActiveSetDifferentiableFunction &gt;</type>
      <name>ActiveSetDifferentiableFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2626f3478c1feadcc52a793bdf3846ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenBodies &gt;</type>
      <name>DistanceBetweenBodiesPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae8aa66db0f13be7f030a9786660cbd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenPointsInBodies &gt;</type>
      <name>DistanceBetweenPointsInBodiesPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a15ee3f237e65b880c44706b41a8f8a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeCom &gt;</type>
      <name>RelativeComPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4684a56a58b53b91a25746d4edff4650</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComBetweenFeet &gt;</type>
      <name>ComBetweenFeetPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a935f1eb16b84796192b86a91af021419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContact &gt;</type>
      <name>ConvexShapeContactPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa74ca38325b6bc6dc38657cd1c80c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContactComplement &gt;</type>
      <name>ConvexShapeContactComplementPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0f8a402193410e7679ea2a7c9178414d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StaticStability &gt;</type>
      <name>StaticStabilityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad54fc72681dcd79a25c2b77bac619b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; QPStaticStability &gt;</type>
      <name>QPStaticStabilityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a3dd563dbf1b5b8560d2beb62bef7b00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationConstraint &gt;</type>
      <name>ConfigurationConstraintPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4830fba26342da49bd199af4a2411344</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Identity &gt;</type>
      <name>IdentityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1c3f567758932e650a25062500559537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; AffineFunction &gt;</type>
      <name>AffineFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a43c11b585e4a396e708b638c89095439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstantFunction &gt;</type>
      <name>ConstantFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa0dacb625f16cfd38df87cd7bac5f971</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContact</type>
      <name>StaticStabilityGravity</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af95c1f506b5959e248368885afd5f653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplement</type>
      <name>StaticStabilityGravityComplement</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9856a331291063d631db35a3ae6255e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactPtr_t</type>
      <name>StaticStabilityGravityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a490b1e61263165c09c5fcd3773b59e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplementPtr_t</type>
      <name>StaticStabilityGravityComplementPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abe9fe9175df03855de4dddf730839b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit &gt;</type>
      <name>Position</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad2a7f1d1ff5c66f72712ae89b2202298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit &gt;</type>
      <name>Orientation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0813b13407a8d79d2b846142102e31d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit &gt;</type>
      <name>RelativeTransformation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4c509f76cba151d4af86c13aaae725cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit &gt;</type>
      <name>RelativePosition</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae42a4d835c0f81fe897feb246113d574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit &gt;</type>
      <name>RelativeOrientation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2ffaa731bb505fae8625a87eb4bacab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit|OrientationBit|OutputSE3Bit &gt;</type>
      <name>TransformationSE3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a360006be8b8d2660a57ba2b95b67d3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit|OutputSE3Bit &gt;</type>
      <name>RelativeTransformationSE3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad7d311a4d62c68d3850eac17142f913f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit|OutputSE3Bit &gt;</type>
      <name>OrientationSO3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af2e249d7cda2bdfc6aa658b0019a8f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit|OutputSE3Bit &gt;</type>
      <name>RelativeOrientationSO3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9091b1fa6fc615b33f28dd3b73b8a5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Position &gt;</type>
      <name>PositionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adb8f4d210fca36e53a12b5eb3960ece6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Orientation &gt;</type>
      <name>OrientationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adaa3650e7328397eafdf880365e314c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Transformation &gt;</type>
      <name>TransformationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a26c24f12d8ffb5c4f2572dc6e4773d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePosition &gt;</type>
      <name>RelativePositionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac0bc5df5ffd19f9dec87b96e76afd819</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeOrientation &gt;</type>
      <name>RelativeOrientationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acba64d3d130ab6869c5e2e5f566e0431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeTransformation &gt;</type>
      <name>RelativeTransformationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af4db8d10953253fa720cae60e5f6bdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::BlockIndex</type>
      <name>BlockIndex</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9ef5c6a971ca8ae27ee97dcc5caeb9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Implicit &gt;</type>
      <name>ImplicitPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a367bfb5f727ed74bcbd0f2cacb28e772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Implicit &gt;</type>
      <name>ImplicitConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aeb4eab9ef5678a2bbf4e672a6f43f903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; constraints::ImplicitPtr_t &gt;</type>
      <name>NumericalConstraints_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a65eb0406dc9ca3a542750df4d0660a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImplicitConstraintSet &gt;</type>
      <name>ImplicitConstraintSetPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae12942baf8885c31f625f102ef5a0216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ComparisonType &gt;</type>
      <name>ComparisonTypes_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0bf28774a6e0e6d54641d9d1bb529617</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Explicit &gt;</type>
      <name>ExplicitPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0a06d98526d0f0e9d3ddfe7e96fb0710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Explicit &gt;</type>
      <name>ExplicitConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aeed47f04016b5d64e44338f52015eb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePose &gt;</type>
      <name>RelativePosePtr_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa1b4d8e2ae9ec6a2ef5acbdd8af79ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const RelativePose &gt;</type>
      <name>RelativePoseConstPtr_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4c9229f9cc8738f45a77dd5fa8e2fe61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePose &gt;</type>
      <name>RelativePosePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a62144319f3cecd9f23165f76fe903687</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeTransformation &gt;</type>
      <name>RelativeTransformationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5d7fce2b9e3a3c60412b6b01810e2669</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImplicitFunction &gt;</type>
      <name>ImplicitFunctionPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeb049b7cd956febaf0eb8337369ef115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LockedJoint &gt;</type>
      <name>LockedJointPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af448f64bfc3a1b740485d5782be2df31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const LockedJoint &gt;</type>
      <name>LockedJointConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af1e99dc0760810a516b7300554ace852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LockedJointPtr_t &gt;</type>
      <name>LockedJoints_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a274a16ac38592447263a029c18f25260</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; OfParameterSubset &gt;</type>
      <name>OfParameterSubsetPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3a241d51e04d7f8b58fa804eb71415e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComparisonType</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Equality</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79af46d36198b953dc68e7502479f5356c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EqualToZero</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79ad828e90700c38505f32eaef45f97eb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Superior</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79a56de81d7b8a214dd85081c7df7e2a55a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inferior</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79a1d5f096a4899eb5403d4c7194f67b4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2b81f2c271a0cb8efa89e0ac8c549e80</anchor>
      <arglist>(DifferentiableFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afe42acc1f58f13298582303a21c451af</anchor>
      <arglist>(DifferentiableFunctionSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab8489554c7c34f6a15119dc475431f77</anchor>
      <arglist>(ActiveSetDifferentiableFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac1d4300ab7f40d189e6ecbf85d25c47c</anchor>
      <arglist>(DistanceBetweenBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9e64bad770c2cae3d8ae20097fbb59df</anchor>
      <arglist>(DistanceBetweenPointsInBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a48f490d8993173637421d83ed6dd5ea9</anchor>
      <arglist>(RelativeCom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad9d3264a2664eae8b6a746bef9257444</anchor>
      <arglist>(ComBetweenFeet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a3e6a69d9efcf95fb24bc700c44d4c07c</anchor>
      <arglist>(StaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a313654249287e5a86d3d216006831fcf</anchor>
      <arglist>(QPStaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad502d2cbbe178f788ae742865de9928c</anchor>
      <arglist>(ConvexShapeContact)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4d24e70d40b78704b406ee378a0da13</anchor>
      <arglist>(ConvexShapeContactComplement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afc4e6e75743061bf13439d2e971ba412</anchor>
      <arglist>(ConfigurationConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9811e5327267411f66b92542d0136b26</anchor>
      <arglist>(Identity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a10e99a6238f7112c8217106881c90564</anchor>
      <arglist>(AffineFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acbf902b10ef7ac4256d4e13c81fa4b79</anchor>
      <arglist>(ConstantFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad048574bd5bb9041974b1b94883e4f1d</anchor>
      <arglist>(Implicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5a8e1e914742df3986dd7365fe56d450</anchor>
      <arglist>(ImplicitConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a81a7cd18f02d8577862e279d02202324</anchor>
      <arglist>(Explicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad5d75aa392cb8237082d9f0c9d57ff96</anchor>
      <arglist>(RelativePose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a454fdba22253e404a6480562fddc5dd3</anchor>
      <arglist>(RelativePose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7f3fbbc02cd65141618ed5255e167837</anchor>
      <arglist>(RelativeTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a087e096a79cd60232c39d9c7a2a191ed</anchor>
      <arglist>(ImplicitFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab482bba49fdb10a9e4b793e477604191</anchor>
      <arglist>(LockedJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a35d54cafd23dcb24a7d884ce04e16610</anchor>
      <arglist>(OfParameterSubset)</arglist>
    </member>
    <member kind="variable">
      <type>DEVEL typedef GenericTransformation&lt; PositionBit|OrientationBit &gt;</type>
      <name>Transformation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aabf0ec9434c314fbbe7a57963b983f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generic-transformation.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00113</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00127" name="matrix-view.hh" local="no" imported="no">hpp/constraints/matrix-view.hh</includes>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchical-iterative.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/solver/</path>
    <filename>a00114</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00127" name="matrix-view.hh" local="no" imported="no">hpp/constraints/matrix-view.hh</includes>
    <includes id="a00117" name="implicit-constraint-set.hh" local="no" imported="no">hpp/constraints/implicit-constraint-set.hh</includes>
    <class kind="struct">hpp::constraints::solver::lineSearch::Constant</class>
    <class kind="struct">hpp::constraints::solver::lineSearch::Backtracking</class>
    <class kind="struct">hpp::constraints::solver::lineSearch::FixedSequence</class>
    <class kind="struct">hpp::constraints::solver::lineSearch::ErrorNormBased</class>
    <class kind="class">hpp::constraints::solver::HierarchicalIterative</class>
    <class kind="struct">hpp::constraints::solver::HierarchicalIterative::Data</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::solver</namespace>
    <namespace>hpp::constraints::solver::lineSearch</namespace>
    <namespace>hpp::constraints::lineSearch</namespace>
    <member kind="typedef">
      <type>::hpp::constraints::solver::lineSearch::Constant Constant</type>
      <name>HPP_CONSTRAINTS_DEPRECATED</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa199da679393f727955e4ad50b755d17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>impl/hierarchical-iterative.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/solver/impl/</path>
    <filename>a00115</filename>
    <includes id="a00135" name="svd.hh" local="no" imported="no">hpp/constraints/svd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::solver</namespace>
    <namespace>hpp::constraints::solver::lineSearch</namespace>
  </compound>
  <compound kind="file">
    <name>hybrid-solver.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00116</filename>
    <includes id="a00097" name="by-substitution.hh" local="no" imported="no">hpp/constraints/solver/by-substitution.hh</includes>
  </compound>
  <compound kind="file">
    <name>implicit-constraint-set.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00117</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00119" name="implicit.hh" local="no" imported="no">hpp/constraints/implicit.hh</includes>
    <includes id="a00105" name="differentiable-function-set.hh" local="no" imported="no">hpp/constraints/differentiable-function-set.hh</includes>
    <class kind="class">hpp::constraints::ImplicitConstraintSet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>implicit-function.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/explicit/</path>
    <filename>a00118</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00127" name="matrix-view.hh" local="no" imported="no">hpp/constraints/matrix-view.hh</includes>
    <class kind="class">hpp::constraints::explicit_::ImplicitFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::explicit_</namespace>
  </compound>
  <compound kind="file">
    <name>implicit.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00119</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::Implicit</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>iterative-solver.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00120</filename>
    <includes id="a00114" name="hierarchical-iterative.hh" local="no" imported="no">hpp/constraints/solver/hierarchical-iterative.hh</includes>
  </compound>
  <compound kind="file">
    <name>locked-joint.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00121</filename>
    <includes id="a00112" name="explicit.hh" local="no" imported="no">hpp/constraints/explicit.hh</includes>
    <class kind="class">hpp::constraints::LockedJoint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2625025a80dd6969fb83c01a782483c3</anchor>
      <arglist>(std::ostream &amp;os, const LockedJoint &amp;lj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>macros.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00122</filename>
    <member kind="define">
      <type>#define</type>
      <name>HPP_DEBUG_SVDCHECK</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a9dca9fd566ae0400a4b4c5d9b3863b50</anchor>
      <arglist>(svd)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hppDnum</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a581daf82c1d48db5d77d21f467a470c9</anchor>
      <arglist>(channel, data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main-page.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/doc/</path>
    <filename>a00123</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>manipulability.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00124</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00127" name="matrix-view.hh" local="no" imported="no">hpp/constraints/matrix-view.hh</includes>
    <class kind="class">hpp::constraints::Manipulability</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Manipulability &gt;</type>
      <name>ManipulabilityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afb13d847f99bc1d1b3a6777bbd11af7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aab5b630fd3d97518d2c1f5d75754e2db</anchor>
      <arglist>(Manipulability)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix-view-operation.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/impl/</path>
    <filename>a00125</filename>
    <namespace>Eigen</namespace>
    <namespace>Eigen::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_DECLARE_TEMPLATE_ARGS_MATRIX_BLOCK_VIEW</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ab136c0337556963c31d2df79f8d3478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_MATRIX_BLOCK_VIEW</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a3ed697577177931799efd3ee98f83298</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_SPECIALIZE_CwiseBinaryOpImpl</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7c4287409ccdb61f671ab66825f53ff9</anchor>
      <arglist>(LHS_TPL, LHS_TYPE, RHS_TPL, RHS_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_DEFINE_CwiseBinaryOpImpl_evalTo</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a73d2e0f712d86db13d0ca9c706222ee1</anchor>
      <arglist>(LHS_TPL, LHS_TYPE, RHS_TPL, RHS_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_SPECIALIZE_ASSIGN_SELECTOR_IMPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aa1cb015db1c732649fa99f05d52150ee</anchor>
      <arglist>(LHS_TPL, LHS_TYPE, RHS_TPL, RHS_TYPE,need_to_transpose, EVAL_TO_BODY)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_EVAL_TO_BODY_NORMAL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a4e41948b161cbf4a091c71d7778a3101</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_EVAL_TO_BODY_TRANSPOSE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a08dbeb47022e5f9c2fe7a3ee3aeb89c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_SPECIALIZE_ASSIGN_SELECTOR</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a6141daa67df7741620e35cd75ab6b5b8</anchor>
      <arglist>(LHS_TPL, LHS_TYPE, RHS_TPL, RHS_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_LHS_TPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a69ca896f0c5f9682b5c89da5e68e2c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_LHS_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a2fb0d330f5371c74511c82afd8f080b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_RHS_TPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a45be1a38fef262856f6f71513ffe937a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_RHS_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae7fb3e1dd168bb0f38323c215f1437e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_LHS_TPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a69ca896f0c5f9682b5c89da5e68e2c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_LHS_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a2fb0d330f5371c74511c82afd8f080b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_RHS_TPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a45be1a38fef262856f6f71513ffe937a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_RHS_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae7fb3e1dd168bb0f38323c215f1437e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_LHS_TPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a69ca896f0c5f9682b5c89da5e68e2c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_LHS_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a2fb0d330f5371c74511c82afd8f080b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_RHS_TPL</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a45be1a38fef262856f6f71513ffe937a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_RHS_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae7fb3e1dd168bb0f38323c215f1437e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Rhs_t::template block_t&lt; typename Rhs_t::ArgType &gt;::type</type>
      <name>BlockRhs</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a04bafbb03f83a0026b2259d79215e47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; BinaryOp, BlockLhs, BlockRhs &gt;</type>
      <name>BlockCwiseBOp</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a136165c4957273abb92c90efd04aec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_EIGEN_SPECIALIZE_CwiseBinaryOpImpl</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a455473d276e8fafb59ca19323aa4c790</anchor>
      <arglist>(HPP_EIGEN_LHS_TPL, HPP_EIGEN_LHS_TYPE, HPP_EIGEN_RHS_TPL, HPP_EIGEN_RHS_TYPE) HPP_EIGEN_DEFINE_CwiseBinaryOpImpl_evalTo(HPP_EIGEN_LHS_TPL</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1defb78d5021f9ea2229a1e9d77ae70e</anchor>
      <arglist>(typename Rhs_t::block_iterator block(d.rhs());block.valid();++block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a91a95221b01fa91e9d6b789be015d3bf</anchor>
      <arglist>(typename Lhs_t::block_iterator block(d.lhs());block.valid();++block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9d69e0c2c91cb3e898a48e6b869fb64d</anchor>
      <arglist>(d.lhs()._blocks()==d.rhs()._blocks())</arglist>
    </member>
    <member kind="function">
      <type>Lhs_t::block_iterator</type>
      <name>lblock</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1675bd9ae3066b37481dd7a4d7dd1192</anchor>
      <arglist>(d.lhs())</arglist>
    </member>
    <member kind="function">
      <type>Rhs_t::block_iterator</type>
      <name>rblock</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad7a774495fbc2de7c72f84eaf29db0c3</anchor>
      <arglist>(d.rhs())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9b82b351ed1d37bb3de5431ed31aa6a2</anchor>
      <arglist>(lblock.valid())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a340d193f3f94af5b49178ae421dd8b52</anchor>
      <arglist>(!lblock.valid()&amp;&amp;!rblock.valid())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_LHS_TYPE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad98a17081a40df1e3f51d2821875b8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_RHS_TPL</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a114c61b6d72148837113eda4d542e162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_RHS_TYPE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a52f515448da04ee078cd3c2a05a83423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Derived &amp;</type>
      <name>d</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>afbe2f44139b5b3ec5de0b6896b3d3021</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>impl/matrix-view.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/impl/</path>
    <filename>a00126</filename>
    <class kind="struct">hpp::prettyPrint&lt; Eigen::BlockIndex::segments_t, Option &gt;</class>
    <namespace>Eigen</namespace>
    <namespace>hpp</namespace>
  </compound>
  <compound kind="file">
    <name>matrix-view.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00127</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00126" name="impl/matrix-view.hh" local="no" imported="no">hpp/constraints/impl/matrix-view.hh</includes>
    <includes id="a00125" name="matrix-view-operation.hh" local="no" imported="no">hpp/constraints/impl/matrix-view-operation.hh</includes>
    <class kind="struct">Eigen::BlockIndex</class>
    <class kind="class">Eigen::MatrixBlockView</class>
    <class kind="class">Eigen::MatrixBlocks</class>
    <class kind="class">Eigen::MatrixBlocksRef</class>
    <class kind="struct">Eigen::internal::return_first</class>
    <class kind="struct">Eigen::internal::return_first&lt; false &gt;</class>
    <class kind="struct">Eigen::internal::empty_struct</class>
    <class kind="struct">Eigen::internal::get_if</class>
    <class kind="struct">Eigen::internal::get_if&lt; false &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; MatrixBlocksRef&lt; _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::assign_selector&lt; Derived, MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;, false, false &gt;</class>
    <class kind="struct">Eigen::internal::assign_selector&lt; Derived, MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;, false, true &gt;</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to&lt; Src, MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;, Dst &gt;</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;, MatrixBlockView&lt; _ArgType2, _Rows2, _Cols2, _allRows2, _allCols2 &gt; &gt;</class>
    <class kind="struct">Eigen::internal::access_block_from_matrix_block_view</class>
    <class kind="struct">Eigen::internal::access_block_from_matrix_block_view&lt; ReturnType, View, false, true &gt;</class>
    <class kind="struct">Eigen::internal::access_block_from_matrix_block_view&lt; ReturnType, View, true, false &gt;</class>
    <class kind="struct">Eigen::internal::dont_print_indices</class>
    <class kind="struct">Eigen::internal::print_indices</class>
    <class kind="class">Eigen::MatrixBlocksBase</class>
    <class kind="struct">Eigen::MatrixBlocksBase::View</class>
    <class kind="class">Eigen::MatrixBlocks</class>
    <class kind="class">Eigen::MatrixBlockView</class>
    <class kind="struct">Eigen::MatrixBlockView::block_iterator</class>
    <class kind="struct">Eigen::MatrixBlockView::block_t</class>
    <class kind="struct">hpp::prettyPrint&lt; constraints::segment_t, Option &gt;</class>
    <namespace>Eigen</namespace>
    <namespace>Eigen::internal</namespace>
    <namespace>hpp</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HPP_EIGEN_USE_EVALUATOR</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a5ce8c55d50f437d30727002d3332b4dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_MATRIX_BLOCKS_PUBLIC_INTERFACE</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aff09367d6f284762e2c5c651ce69da33</anchor>
      <arglist>(Derived)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; false, true &gt;</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga7c6741f034c1372efff96c61b7c8281e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; true, false &gt;</type>
      <name>ColBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga948a870b59cb5a3c12ff80cb31c9badb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac632f65a14cfc732dc2172eb700c6b1e</anchor>
      <arglist>(std::ostream &amp;os, const MatrixBlocksBase&lt; Derived &gt; &amp;mbi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>of-parameter-subset.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/function/</path>
    <filename>a00128</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::function::OfParameterSubset</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::function</namespace>
  </compound>
  <compound kind="file">
    <name>qp-static-stability.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00129</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00101" name="convex-shape-contact.hh" local="no" imported="no">hpp/constraints/convex-shape-contact.hh</includes>
    <includes id="a00134" name="static-stability.hh" local="no" imported="no">hpp/constraints/static-stability.hh</includes>
    <class kind="class">hpp::constraints::QPStaticStability</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>relative-com.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00130</filename>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::RelativeCom</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>explicit/relative-pose.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/explicit/</path>
    <filename>a00131</filename>
    <includes id="a00112" name="explicit.hh" local="no" imported="no">hpp/constraints/explicit.hh</includes>
    <includes id="a00132" name="implicit/relative-pose.hh" local="no" imported="no">hpp/constraints/implicit/relative-pose.hh</includes>
    <class kind="class">hpp::constraints::explicit_::RelativePose</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::explicit_</namespace>
  </compound>
  <compound kind="file">
    <name>implicit/relative-pose.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/implicit/</path>
    <filename>a00132</filename>
    <includes id="a00119" name="implicit.hh" local="no" imported="no">hpp/constraints/implicit.hh</includes>
    <class kind="class">hpp::constraints::implicit::RelativePose</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::implicit</namespace>
  </compound>
  <compound kind="file">
    <name>relative-transformation.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/explicit/</path>
    <filename>a00133</filename>
    <includes id="a00127" name="matrix-view.hh" local="no" imported="no">hpp/constraints/matrix-view.hh</includes>
    <includes id="a00113" name="generic-transformation.hh" local="no" imported="no">hpp/constraints/generic-transformation.hh</includes>
    <includes id="a00112" name="explicit.hh" local="no" imported="no">hpp/constraints/explicit.hh</includes>
    <class kind="class">hpp::constraints::explicit_::RelativeTransformation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::explicit_</namespace>
  </compound>
  <compound kind="file">
    <name>static-stability.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00134</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00136" name="symbolic-calculus.hh" local="no" imported="no">hpp/constraints/symbolic-calculus.hh</includes>
    <class kind="class">hpp::constraints::StaticStability</class>
    <class kind="struct">hpp::constraints::StaticStability::Contact_t</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>svd.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00135</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU1</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a66a40725a6d1b9937cd7e41a02a33479</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU2</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab5abeb259535e4c357f607d4831b9d55</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV1</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aaea98b964479d5027dbbba4dcb583632</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV2</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac404d931c2d216d9a3c1678063611f9c</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pseudoInverse</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aee7a1aa205ea73b31df2424a77648e45</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; pinvmat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpan</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a09368b11d437fb35c6f57bfa3579946b</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpanOfInv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a94325add4765e8973c85b6e8cd3064dd</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernel</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abf79bd427152f14208bcaf4b50e63a5a</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullV=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernelOfInv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a53a1e689ae6fccaa7c400de7d4038741</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullU=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symbolic-calculus.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00136</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00135" name="svd.hh" local="no" imported="no">hpp/constraints/svd.hh</includes>
    <includes id="a00138" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00122" name="macros.hh" local="no" imported="no">hpp/constraints/macros.hh</includes>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="struct">hpp::constraints::Traits&lt; value_type &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; pinocchio::Joint &gt;</class>
    <class kind="struct">hpp::constraints::JointTranspose</class>
    <class kind="struct">hpp::constraints::Traits&lt; JointTranspose &gt;</class>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="class">hpp::constraints::CalculusBase</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="class">hpp::constraints::PointInJoint</class>
    <class kind="class">hpp::constraints::VectorInJoint</class>
    <class kind="class">hpp::constraints::FunctionExp</class>
    <class kind="class">hpp::constraints::Point</class>
    <class kind="class">hpp::constraints::PointCom</class>
    <class kind="class">hpp::constraints::JointFrame</class>
    <class kind="class">hpp::constraints::MatrixOfExpressions</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_REF</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2322a6d699498039456237abad5513a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_WKREF</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a5abaaf46598b1afcba4193c76fec4727</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_DEFINE_OPERATOR1</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a49c95f722a7570e58c36c8c07daf1638</anchor>
      <arglist>(op, InType, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_FRIEND_OPERATOR1</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aad89646aea2acb359a8573f97091035f</anchor>
      <arglist>(op, InType, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_DEFINE_OPERATOR2</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a61a117d80be4ecb51ded261d5d606bc6</anchor>
      <arglist>(op, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_FRIEND_OPERATOR2</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a6af189249144893eb245167eda460edc</anchor>
      <arglist>(op, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_CREATE1</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a17a09ab7ba2ce4a46d9b4e37a4b220da</anchor>
      <arglist>(Class, Arg0Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_CREATE2</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a195bcfacd8c522e95989a258810ef95d</anchor>
      <arglist>(Class, Arg0Type, Arg1Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_CREATE3</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ae0cc30e797a5360bdd7ab58fac19269d</anchor>
      <arglist>(Class, Arg0Type, Arg1Type, Arg2Type)</arglist>
    </member>
    <member kind="typedef">
      <type>eigen::matrix3_t</type>
      <name>CrossMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>gac3ce1835b556d06ebbd5598435c1ccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>RowJacobianMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>gac9f4b1bc8b7f541c249d43d07cf541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>JacobianMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ga515568ec06f6831be43ab4f95c122650</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symbolic-function.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00137</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00136" name="symbolic-calculus.hh" local="no" imported="no">hpp/constraints/symbolic-calculus.hh</includes>
    <includes id="a00107" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::SymbolicFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>tools.hh</name>
    <path>/local/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00138</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeCrossMatrix</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aaa04907a27384cb8b798b742fa5ed369</anchor>
      <arglist>(const VectorType &amp;v, MatrixType &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logSO3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga83977cd58dc36ed9f5a3665e21f66c0b</anchor>
      <arglist>(const matrix3_t &amp;R, value_type &amp;theta, Eigen::MatrixBase&lt; Derived &gt; const &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JlogSO3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gaa1b1ffbc381e28e39d62d2a688793471</anchor>
      <arglist>(const value_type &amp;theta, const Eigen::MatrixBase&lt; Derived &gt; &amp;log, matrix3_t &amp;Jlog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logSE3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga0576b1bdc5592c8fc0ee5d5ae4cfae07</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JlogSE3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga563530d23011f23a19674c5770064fee</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; const &amp;Jlog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrixToQuat</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga0eb470dad27a7de4fd5cd176f6e36c88</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;M, Eigen::MatrixBase&lt; Derived2 &gt; const &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>se3ToConfig</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac3c88c2d6b4d4a85d68f800fb9b09c8d</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; const &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::access_block_from_matrix_block_view</name>
    <filename>a00005.html</filename>
    <templarg>ReturnType</templarg>
    <templarg>View</templarg>
    <templarg>AllRows</templarg>
    <templarg>AllCols</templarg>
    <member kind="typedef">
      <type>View::size_type</type>
      <name>size_type</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab7c1f4bae9bec96dab26d7e4a1184650</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>run</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aecd9fc0d2d888ce0c821bdd2324c8c35</anchor>
      <arglist>(Derived &amp;d, size_type r, size_type c, size_type rs, size_type cs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::access_block_from_matrix_block_view&lt; ReturnType, View, false, true &gt;</name>
    <filename>a00006.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>View::size_type</type>
      <name>size_type</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ad22c0dea2cfbc6b3e9243604cf7643ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>run</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>af0c0a9f49762f17f083325827600b84d</anchor>
      <arglist>(Derived &amp;d, size_type r, size_type, size_type rs, size_type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::access_block_from_matrix_block_view&lt; ReturnType, View, true, false &gt;</name>
    <filename>a00007.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>View::size_type</type>
      <name>size_type</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a2d329f10e8b136f33e7087cb487f698c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>run</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ace95d234b663ca7646ebe66a860150ac</anchor>
      <arglist>(Derived &amp;d, size_type, size_type c, size_type, size_type cs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ActiveSetDifferentiableFunction</name>
    <filename>a00008.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function">
      <type></type>
      <name>ActiveSetDifferentiableFunction</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab75ada23c63a89c4ec6a180e697b8231</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;f, segments_t intervals)</arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunction &amp;</type>
      <name>function</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a39d397ad5606859c9b66779566088d7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunctionPtr_t &amp;</type>
      <name>functionPtr</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0aa83b35e9afee1427c2111a10e147ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; segments_t &gt;</type>
      <name>intervalss_t</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a081eb3bad58c37993b891c01f62fabf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad1d172195ac24c833d1b0cae4425f041</anchor>
      <arglist>(LiegroupElementRef result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2b73b679ec125d48ee4ec0cc79a95c57</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DifferentiableFunctionPtr_t</type>
      <name>function_</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aac0bd406225a00ef59abc822a68116ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>segments_t</type>
      <name>intervals_</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2f5fcf5094951b812300a8fb815ffd42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::AffineFunction</name>
    <filename>a00009.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function">
      <type></type>
      <name>AffineFunction</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a71a90e997fb1282682b488cb7adc9c7a</anchor>
      <arglist>(const matrixIn_t &amp;J, const std::string name=&quot;LinearFunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineFunction</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a64b1b6d665f545a39be46d2fedeaf45c</anchor>
      <arglist>(const matrixIn_t &amp;J, const vectorIn_t &amp;b, const std::string name=&quot;LinearFunction&quot;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::assign_selector&lt; Derived, MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;, false, false &gt;</name>
    <filename>a00010.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <member kind="typedef">
      <type>MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;</type>
      <name>OtherDerived</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a8591a782690f245bc5a0d5364e78260a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE Derived &amp;</type>
      <name>run</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a8a1b1a136aef50af163266d18e92a88c</anchor>
      <arglist>(Derived &amp;dst, const OtherDerived &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE Derived &amp;</type>
      <name>evalTo</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a597ed016efff1f83de6f20348a33af70</anchor>
      <arglist>(ActualDerived &amp;dst, const ActualOtherDerived &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::assign_selector&lt; Derived, MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;, false, true &gt;</name>
    <filename>a00011.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <member kind="typedef">
      <type>MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;</type>
      <name>OtherDerived</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aee66a28312b95d38702c44d24c9eb515</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE Derived &amp;</type>
      <name>run</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ac10a4fac7b02a401a01525ae7cbcec32</anchor>
      <arglist>(Derived &amp;dst, const OtherDerived &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE Derived &amp;</type>
      <name>evalTo</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a9e86cd483edbcea2463cb10d91e955d6</anchor>
      <arglist>(ActualDerived &amp;dst, const ActualOtherDerived &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::solver::lineSearch::Backtracking</name>
    <filename>a00012.html</filename>
    <member kind="function">
      <type></type>
      <name>Backtracking</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a922e2e7c8411e1fcfb3429417ae98dfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7a001c94e9a226280902c03039407f64</anchor>
      <arglist>(const SolverType &amp;solver, vectorOut_t arg, vectorOut_t darg)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeLocalSlope</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adbab3a8c98b3ae639afd49e27e50a95f</anchor>
      <arglist>(const SolverType &amp;solver) const </arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>c</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad94ebe2992dbf5e9821a36fa5cae53bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>tau</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a78881292d291f942e63966265544b4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>smallAlpha</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a485e2667d22803687a5ed6c58f5db3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>arg_darg</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1f31ab6cc18254c3ae21fe5fff31d1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>df</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a047fe02bb288252be78db02a47da4a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>darg</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af27fda8d0434920ef1903c940eae17d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixBlockView::block_iterator</name>
    <filename>a00013.html</filename>
    <member kind="function">
      <type></type>
      <name>block_iterator</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a692fe9b42eb3ef0906d2ed4d33b60e8d</anchor>
      <arglist>(const MatrixBlockView &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>ro</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a541e3e599e3404646242472913384b88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>co</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aae79faa4157ad627df0eeb83390614b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>ri</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a1d9611140ad6cfacc8cc2940512ba3a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>ci</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a0a22a3091c7a2b9a584bfae1ff1bf860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rs</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8ddb791fed63864e13229e8b2f53edbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cs</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>abc21acb72083cd6f43ef8014dbdf5c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>block_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8468d2bfcd0fe8441c79cb3dee54edfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>block_iterator</type>
      <name>operator++</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a32a26fb59988f19b883e792684f6e2e0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a6840c7429a39ed3104619ed92085d54e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const MatrixBlockView &amp;</type>
      <name>view</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>afdd78bd5c6d92da7e0545d52eff93396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>row</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a1d04373713278cd38d4e24abefebdb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>col</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a27c8a7a14529be5667c3429fc8c9afef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::variable_if_dynamic&lt; size_type,(_allRows?0:Dynamic) &gt;</type>
      <name>_ro</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a1e436376b5809c2d830770812ad85a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::variable_if_dynamic&lt; size_type,(_allCols?0:Dynamic) &gt;</type>
      <name>_co</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aefa494fb0d3bec8827b85164e81fa631</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixBlockView::block_t</name>
    <filename>a00014.html</filename>
    <templarg>Derived</templarg>
    <member kind="typedef">
      <type>Block&lt; Derived,(AllRows?Derived::RowsAtCompileTime:Eigen::Dynamic),(AllCols?Derived::ColsAtCompileTime:Eigen::Dynamic),(AllCols?(bool) Derived::IsRowMajor:(AllRows?(bool)!Derived::IsRowMajor:false))&gt;</type>
      <name>type</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>afe4bd40fd672925e98915384abbcc996</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::BlockIndex</name>
    <filename>a00015.html</filename>
    <member kind="typedef">
      <type>hpp::constraints::size_type</type>
      <name>size_type</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a15e30068d862337320437b5607bafb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_type, size_type &gt;</type>
      <name>segment_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a2004c43e38e440b178c39dea4df330b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; segment_t &gt;</type>
      <name>segments_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aad7bcec172ebbcfb0531d2cabe8ead88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>cardinal</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab358342ade58572fb2727de95d79c662</anchor>
      <arglist>(const segments_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>fromLogicalExpression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0613611e93b1a59b46d239165b1044ab</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sort</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a50f4bb3be9e54ba85c58be11899fd17a</anchor>
      <arglist>(segments_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shrink</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a05acea306097110dbab4aaeb45d87aea</anchor>
      <arglist>(segments_t &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>overlap</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acc324578e46b39caea0a71af1086c255</anchor>
      <arglist>(const segment_t &amp;a, const segment_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>sum</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8d5c15741128fdf02277ff995506d1e9</anchor>
      <arglist>(const segment_t &amp;a, const segment_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab8ee2fb2e7477c4c50029b60384571b5</anchor>
      <arglist>(segments_t &amp;a, const segment_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>acd01ff3b3047956aeb2b5ce05499efc1</anchor>
      <arglist>(segments_t &amp;a, const segments_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>difference</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3874873a7519b6fcc4a61dba3e3c4db4</anchor>
      <arglist>(const segment_t &amp;a, const segment_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>difference</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad87e181ab94f35a7acd5b6e29a7237f8</anchor>
      <arglist>(const segments_t &amp;a, const segment_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>difference</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aeef2a1c905f6980d11bea5a6b5b70742</anchor>
      <arglist>(const segment_t &amp;a, const segments_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>difference</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a17aabcd2b4848bb01508c03cc4f99efc</anchor>
      <arglist>(const segments_t &amp;a, const segments_t &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>split</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4167640123900ddf46133abcb0c8fd34</anchor>
      <arglist>(segments_t &amp;segments, const size_type &amp;cardinal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static segments_t</type>
      <name>extract</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>abf96e9cf09f3649f8f18696aa1ff6097</anchor>
      <arglist>(const segments_t &amp;segments, size_type start, size_type cardinal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::solver::BySubstitution</name>
    <filename>a00016.html</filename>
    <base>hpp::constraints::solver::HierarchicalIterative</base>
    <member kind="function">
      <type></type>
      <name>BySubstitution</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a17dfa632440ad6b26185822b76f1fa09</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;configSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BySubstitution</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae213d46dcb9369df0d21412f467917dd</anchor>
      <arglist>(const BySubstitution &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BySubstitution</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a194f822ce6df8d119b57edccb8c74fbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a961210d368a6a7f8823581f1275d5090</anchor>
      <arglist>(const ImplicitPtr_t &amp;numericalConstraint, const segments_t &amp;passiveDofs=segments_t(0), const std::size_t priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa23eef5096562a56cad003df8116c2d5</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;f, const std::size_t &amp;priority, const ComparisonTypes_t &amp;comp) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const NumericalConstraints_t &amp;</type>
      <name>numericalConstraints</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7cc76728b2182eb134b5614f88240294</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExplicitConstraintSet &amp;</type>
      <name>explicitConstraintSet</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a77b63175931086a1385ce35a0c1af5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExplicitConstraintSet &amp;</type>
      <name>explicitConstraintSet</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>afdaac4d3c5779655e2d4099ff051459a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2484a0d872dc89e4635b5c0627787bc9</anchor>
      <arglist>(const ImplicitPtr_t &amp;numericalConstraint) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberFreeVariables</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac29567aa1609b5cfd562458e94802a2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>explicitConstraintSetHasChanged</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a260b18667b7229f4f7b7e59627ed698e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aafca8c8a153f06e16c908ec0c3661f1b</anchor>
      <arglist>(vectorOut_t arg, LineSearchType ls=LineSearchType()) const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a085b92e6718e4643d8c5439b98afe7d5</anchor>
      <arglist>(vectorOut_t arg, bool optimize, LineSearchType ls=LineSearchType()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectVectorOnKernel</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2826c766cfdd15f52262433cc17e5f79</anchor>
      <arglist>(ConfigurationIn_t from, vectorIn_t velocity, ConfigurationOut_t result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>projectOnKernel</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad455e8c6a166075ce2a3444af3a98e7d</anchor>
      <arglist>(ConfigurationIn_t from, ConfigurationIn_t to, ConfigurationOut_t result)</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4e9377caf27c3640af2955445bd17c3b</anchor>
      <arglist>(vectorOut_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>errorSize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adc7893fd512d4940fb20d2c9584f8d7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a8cbd8634762f87d39354429d0e1e7804</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa2c52885db14b1ed469c074437ae755b</anchor>
      <arglist>(vectorIn_t arg, vectorOut_t error) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintSatisfied</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac731034c5e9929e985492494eca60586</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t arg, vectorOut_t error, bool &amp;constraintFound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>oneStep</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a508657baad0a2cf9ff3c213d67733e18</anchor>
      <arglist>(vectorOut_t arg, LineSearchType &amp;lineSearch) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af7cca1ad7afb4ca0ad9f6f69250acec4</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>afcb61e0303fd15c61378fd77f7b02987</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a106a820bccb70add9d93aaf02ca46d8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>segments_t</type>
      <name>implicitDof</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5ce63db397c3b8892ab50174593c7a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6b894945dc9eb52a49e4e4663a0f271c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>integrate</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9ec5be4407a77b83094bbce313bed2d3</anchor>
      <arglist>(vectorIn_t from, vectorIn_t velocity, vectorOut_t result) const </arglist>
    </member>
    <member kind="function">
      <type>HierarchicalIterative::Status</type>
      <name>impl_solve</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a077547e1ef745aaf6818f43bc298ca35</anchor>
      <arglist>(vectorOut_t arg, bool _optimize, LineSearchType lineSearch) const </arglist>
    </member>
    <member kind="function">
      <type>ExplicitConstraintSet &amp;</type>
      <name>explicitSolver</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae1c883315b94832a4917d1b6e022e399</anchor>
      <arglist>() HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const ExplicitConstraintSet &amp;</type>
      <name>explicitSolver</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a69fb6539970a5e6bb3112cf1ca53a918</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>explicitSolverHasChanged</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af71226e45cc9cfef81ee81c432814493</anchor>
      <arglist>() HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad706007e1305a2cd1af1f66f5cace2d3</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7b5b9c9f5ba4b5d984f7b384c6213aca</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adf27535c8fda5c317f4b3032be58b8e7</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae336b361a7e62c1454b844934aac3b40</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorOut_t rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6dce0665e3f0c215017b37fdde9f1576</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a15e010a1219d667ce35b3f6740701a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a12bc901c50f680b4159e9efb85bff243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeActiveRowsOfJ</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a07084e821014c597e525f09f6e0216a4</anchor>
      <arglist>(std::size_t iStack)</arglist>
    </member>
    <member kind="function">
      <type>ExplicitConstraintSet &amp;</type>
      <name>explicitSolver</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae1c883315b94832a4917d1b6e022e399</anchor>
      <arglist>() HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const ExplicitConstraintSet &amp;</type>
      <name>explicitSolver</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a69fb6539970a5e6bb3112cf1ca53a918</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>explicitSolverHasChanged</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af71226e45cc9cfef81ee81c432814493</anchor>
      <arglist>() HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad706007e1305a2cd1af1f66f5cace2d3</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7b5b9c9f5ba4b5d984f7b384c6213aca</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adf27535c8fda5c317f4b3032be58b8e7</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae336b361a7e62c1454b844934aac3b40</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorOut_t rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6dce0665e3f0c215017b37fdde9f1576</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a15e010a1219d667ce35b3f6740701a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a12bc901c50f680b4159e9efb85bff243</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::CalculusBase</name>
    <filename>a00017.html</filename>
    <templarg>T</templarg>
    <templarg>ValueType</templarg>
    <templarg>JacobianType</templarg>
    <templarg>CrossType</templarg>
    <base>hpp::constraints::CalculusBaseAbstract</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const ValueType &amp;value, const JacobianType &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JacobianType &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossType &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; T &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianType</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossType</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; FunctionExp&lt; FunctionType &gt;, vector_t, matrix_t &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector_t, matrix_t &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector_t &amp;value, const matrix_t &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const matrix_t &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; FunctionExp&lt; FunctionType &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_t</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; JointFrame, Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const Eigen::Matrix&lt; value_type, 6, 1 &gt; &amp;value, const Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, 6, 1 &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; JointFrame &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;value, const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;value, const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; Point, vector3_t, JacobianMatrix &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; Point &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; PointCom, vector3_t, ComJacobian_t &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, ComJacobian_t &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const ComJacobian_t &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComJacobian_t &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; PointCom &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ComJacobian_t</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; PointInJoint &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; PointInJoint &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; RotationMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; RotationMultiply&lt; RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; ScalarMultiply&lt; RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; ScalarProduct&lt; LhsValue, RhsValue &gt;, value_type, RowJacobianMatrix &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const value_type &amp;value, const RowJacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RowJacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RowJacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; VectorInJoint &gt;</name>
    <filename>a00017.html</filename>
    <base>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a38b9c34ff015e13a3c5c2c922770f530</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad487fd06274a230ee3f19ab11ad5c336</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3a2d8ddeeaef00d9447810dfe4947ee2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; VectorInJoint &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>value_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::CalculusBaseAbstract</name>
    <filename>a00018.html</filename>
    <templarg>ValueType</templarg>
    <templarg>JacobianType</templarg>
    <member kind="typedef">
      <type>ValueType</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianType</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const JacobianType &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00018.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt;</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, 6, 1 &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00018.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt;</name>
    <filename>a00018.html</filename>
    <member kind="typedef">
      <type>value_type</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowJacobianMatrix</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const value_type &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RowJacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; vector3_t, ComJacobian_t &gt;</name>
    <filename>a00018.html</filename>
    <member kind="typedef">
      <type>vector3_t</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ComJacobian_t</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ComJacobian_t &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; vector3_t, JacobianMatrix &gt;</name>
    <filename>a00018.html</filename>
    <member kind="typedef">
      <type>vector3_t</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianMatrix</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; vector_t, matrix_t &gt;</name>
    <filename>a00018.html</filename>
    <member kind="typedef">
      <type>vector_t</type>
      <name>ValueType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_t</type>
      <name>JacobianType_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector_t &amp;</type>
      <name>value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3e87eb000becc001e02c8298629f2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const matrix_t &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8e0c3132009fc8f1d6773aa2d9b7459e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1b3cbb8edea963ec18f0767e32a088ff</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a535e84952e91c413eb873801b92539d0</anchor>
      <arglist>(const ConfigurationIn_t arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ComBetweenFeet</name>
    <filename>a00019.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComBetweenFeet</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>af07000f6bf10131229d5349291603d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComBetweenFeet</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aeeb3644f4cfb36abda4853226718ccb6</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;jointLeft, const JointPtr_t &amp;jointRight, const vector3_t pointLeft, const vector3_t pointRight, const JointPtr_t &amp;jointReference, const vector3_t pointRef, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW ComBetweenFeetPtr_t</type>
      <name>create</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6b18c307ff5a111781ffb90f60c77020</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;jointLeft, const JointPtr_t &amp;jointRight, const vector3_t pointLeft, const vector3_t pointRight, const JointPtr_t &amp;jointReference, const vector3_t pointRef, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComBetweenFeetPtr_t</type>
      <name>create</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a223b1006f0f1d5b8a5e961934326f653</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;jointLeft, const JointPtr_t &amp;jointRight, const vector3_t pointLeft, const vector3_t pointRight, const JointPtr_t &amp;jointReference, const vector3_t pointRef, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ac818b0ffb00c0fa31ca23ceddc4383d9</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ae0b786733fb25af252f7e7f367371ca2</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConfigurationConstraint</name>
    <filename>a00020.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigurationConstraint</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a8b691f9f8887646bb7f52211f433aad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationConstraint</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac71c709cd3f9db569d7d43c9a8a7c337</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, ConfigurationIn_t goal, const vector_t &amp;weights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW ConfigurationConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>acdec7d70ec560be7800902cdbd4db6e4</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, ConfigurationIn_t goal, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigurationConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a54bad6a72caf01c05fa9eff39c8db65f</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, ConfigurationIn_t goal, const vector_t &amp;weights)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a77d80133e8e4b2cfd08a277e9eaa46c0</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abc63501b67a6ea7179c3101a41c3366c</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::solver::lineSearch::Constant</name>
    <filename>a00021.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a02f922c853f719e8b7f37d22cd4e586b</anchor>
      <arglist>(const SolverType &amp;solver, vectorOut_t arg, vectorOut_t darg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::ConstantFunction</name>
    <filename>a00022.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstantFunction</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ca3fdab8f5753e1ea10bbc71979507d</anchor>
      <arglist>(const vector_t &amp;constant, const size_type &amp;sizeIn, const size_type &amp;sizeInDer, const std::string name=&quot;ConstantFunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantFunction</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ae3e62510d5a0e7f7afefabd1e187b4cc</anchor>
      <arglist>(const LiegroupElement &amp;element, const size_type &amp;sizeIn, const size_type &amp;sizeInDer, const std::string name=&quot;ConstantFunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aa82c333f54c6cf46daec7fd5ebcc184b</anchor>
      <arglist>(LiegroupElementRef r, vectorIn_t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af3ecc71528da298df49a7d6fcfceef79</anchor>
      <arglist>(matrixOut_t J, vectorIn_t) const </arglist>
    </member>
    <member kind="variable">
      <type>const LiegroupElement</type>
      <name>c_</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a418ef4c1391f737e8882e4cbca6f635e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::StaticStability::Contact_t</name>
    <filename>a00023.html</filename>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0b75727570e7927bfc79de85763cb037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac393d2bee58623e9979dd3268872c1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>point1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3f24bc51c6dcc44e235760c53ff32237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>point2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aea2271fc484c46eff1bb004b8214756c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4946a0452d540ecf9f024aa4d606a31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa1cc1ff945cb01a112568ffda92954d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConvexShape</name>
    <filename>a00024.html</filename>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a048b59fa84b367d143b4c6a2ecf4a98d</anchor>
      <arglist>(const std::vector&lt; vector3_t &gt; &amp;pts, JointPtr_t joint=JointPtr_t())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adefb8a290f57fba2838d974538352908</anchor>
      <arglist>(const fcl::TriangleP &amp;t, const JointPtr_t &amp;joint=JointPtr_t())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a34826428f5d01d1c8562730619acb217</anchor>
      <arglist>(const vector3_t &amp;p0, const vector3_t &amp;p1, const vector3_t &amp;p2, const JointPtr_t &amp;joint=JointPtr_t())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a65e43e9bdd6c569c6cc6e1bcb85a13da</anchor>
      <arglist>(const ConvexShape &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a99244b1342c3171b60dce102e03082ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3_t</type>
      <name>intersectionLocal</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac9d72dd45c50a9e3c70cd9457aaeb5d7</anchor>
      <arglist>(const vector3_t &amp;A, const vector3_t &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInsideLocal</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a249984f16e24ef1f4f71fb362fe2ecc9</anchor>
      <arglist>(const vector3_t &amp;Ap) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>distanceLocal</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a95ce03aa665f38cadd7372663df11c01</anchor>
      <arglist>(const vector3_t &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>planeXaxis</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>afdf3eb799170490464994eea1a6db8ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>planeYaxis</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aa912a7b59d8fe0d4cf08fcf3bae49eec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>positionInJoint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae6066498c1627ed436c1aae6a818141a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>Pts_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6001c711324a5233a9bb0a771449a4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>shapeDimension_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af74942695af7b44bfed6473f78fd98ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>C_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a508307f4c43003ba88b52b2851204958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>N_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9b2f5f1e8111cc04734fb5458df16dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>Ns_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaedefcc484f03297604b8ed03a29e811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>Us_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5d80fadb448b27269558025ffcca57a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>Ls_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aab09485ef97e0ac821666f637a4eacf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>MinJoint_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a862baec0d951a074a57b0f6662e38762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aefb8ac83cd989e022a4bcd915443c502</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConvexShapeContact</name>
    <filename>a00025.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <class kind="struct">hpp::constraints::ConvexShapeContact::ForceData</class>
    <member kind="enumeration">
      <type></type>
      <name>ContactType</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_ON_PLANE</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aabaea86c15fdcb90f622bb85280eb8858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINE_ON_PLANE</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab8d1388f3e3e9c94c90d153f3de42fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLANE_ON_PLANE</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab68ca4ff7f98958fdf009c571ce88469</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_ON_PLANE</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aabaea86c15fdcb90f622bb85280eb8858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINE_ON_PLANE</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab8d1388f3e3e9c94c90d153f3de42fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLANE_ON_PLANE</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab68ca4ff7f98958fdf009c571ce88469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShapeContact</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1de49d7b441506792064af423effa95f</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObjectTriangle</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a8c3530154f13117e1a08b065999bfa5b</anchor>
      <arglist>(const fcl::TriangleP &amp;t, const JointPtr_t &amp;joint) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFloorTriangle</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5bde059d56434b274391ca8af15c8b9c</anchor>
      <arglist>(const fcl::TriangleP &amp;t, const JointPtr_t &amp;joint) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObject</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ac0c903dd0a15717fafcd318de447bb0a</anchor>
      <arglist>(const ConvexShape &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFloor</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a408cf754a6eae90a22e548b11e37e3e7</anchor>
      <arglist>(const ConvexShape &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalMargin</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aef7fccac53987641d1e1abf0642e15df</anchor>
      <arglist>(const value_type &amp;margin)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ForceData &gt;</type>
      <name>computeContactPoints</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a7040b42902254ddd8cc5467128ff0f88</anchor>
      <arglist>(ConfigurationIn_t q, const value_type &amp;normalMargin) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa484da55c48d7b0c08d0427b4e2c7289</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexShapeContactPtr_t</type>
      <name>create</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aab309c35ce5871f3b2cef43b35517ea7</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexShapeContactPtr_t</type>
      <name>create</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a6a503daa29d929487e19adc2f764fa9e</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ConvexShapeContactComplement</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a62dcaef2aed39890dcb7f559d17d7901</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConvexShapeContactComplement</name>
    <filename>a00026.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" static="yes">
      <type>static std::pair&lt; ConvexShapeContactPtr_t, ConvexShapeContactComplementPtr_t &gt;</type>
      <name>createPair</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a0822d8fcf88ca033f5384b26054a70c1</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;complementName, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvexShapeContactComplement</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa2178a7d9fa879f7290b67fbc2aba26c</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;complementName, const DevicePtr_t &amp;robot)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::ConvexShapeData</name>
    <filename>a00027.html</filename>
    <member kind="function">
      <type>void</type>
      <name>updateToCurrentTransform</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a96c7b15dce4542d14e8097938cd08556</anchor>
      <arglist>(const ConvexShape &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateToCurrentTransform</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a34668957799f961710a3dfe18eec6078</anchor>
      <arglist>(const ConvexShape &amp;cs, const pinocchio::DeviceData &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_recompute</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a67b18c40491a9860b1955937a4fa4996</anchor>
      <arglist>(const ConvexShape &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>vector3_t</type>
      <name>intersection</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a7f5404242094fcd78617cf5a0ca735b3</anchor>
      <arglist>(const vector3_t &amp;A, const vector3_t &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a26f80f1de9101e1ef84814ac3203a9f2</anchor>
      <arglist>(const ConvexShape &amp;cs, const vector3_t &amp;A, const vector3_t &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aff03cf555cd4f1bc9b18494cfbbe4a61</anchor>
      <arglist>(const ConvexShape &amp;cs, const vector3_t &amp;Ap) const </arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>alignedPositionInJoint</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a3c4c0d66b6f0c050875873122066bb4d</anchor>
      <arglist>(const ConvexShape &amp;cs, vector3_t yaxis) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>distance</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad3cecfd5d05923090edf1b8ed3183714</anchor>
      <arglist>(const ConvexShape &amp;cs, vector3_t a) const </arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal_</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2be59773a7ca3eb1153a76bb4d467b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>center_</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>af8a5d0856690a132e0c29c53627786da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>oMj_</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a88d98f7a1c5ac2fbd4134d708aa1b12e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::CrossProduct</name>
    <filename>a00028.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a03e5461ec583c8bddafa4b04fbfbb058</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossProduct</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a1c1afc5eed2701b3eeaccc716a4601ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossProduct</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aa7c32e3d5a954231b5b8dc2b6b04b120</anchor>
      <arglist>(const CalculusBase&lt; CrossProduct &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossProduct</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a740a7fe2c53de268e5b1cd1ef01622da</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a176719ad14c3e945ff1aab6dbcceb1df</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>acf7edd0dc0db1ef343f846e06a2d2d0f</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac6e1b12462d1192444883c6c73b38d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a387cc897096f60b6ea513d1c473cdc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::solver::HierarchicalIterative::Data</name>
    <filename>a00029.html</filename>
    <member kind="variable">
      <type>LiegroupElement</type>
      <name>output</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a2323dec6a408f4d6e5f42462383cd32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LiegroupElement</type>
      <name>rightHandSide</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab15435a644146b0ce80a5235fddda664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>error</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac0815d86509e0186ece8abe89912bae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>jacobian</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aade00f8db3067fd9420ef91913320d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>reducedJ</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a041773d2c7124236f7c38845ea158fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SVD_t</type>
      <name>svd</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>abb8e8cb2ab9e8ca3b762056ec3982dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>matrix_t</type>
      <name>PK</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac5ef01eba9c9fa6d16b59bfa2276c661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>maxRank</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a26d90bd18a181217a1d8a528bc7965e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ComparisonTypes_t</type>
      <name>comparison</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a47f3c2bd74867e6d216004af212a9bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>inequalityIndices</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0e12cae6fbea1550ada00e4274c53c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::RowBlockIndices</type>
      <name>equalityIndices</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6250375336af0c85890a89f5519e09ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixBlocks&lt; false, false &gt;</type>
      <name>activeRowsOfJ</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3789eeec18aa3adfdb540cbe2241d54a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::function::Difference</name>
    <filename>a00030.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Difference &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad8ba9c4840319f7faacc882c922e6531</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a017ed7b35370abd52586f7109b44814f</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;inner, const size_type &amp;nArgs, const size_type &amp;nDers, const segment_t &amp;lInArgs, const segment_t &amp;lInDers, const segment_t &amp;rInArgs, const segment_t &amp;rInDers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a934d4ea35dada892b7d1f63a59f61aca</anchor>
      <arglist>(LiegroupElementRef y, vectorIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ab15f70a348a0cb62e9498bedf38b5e43</anchor>
      <arglist>(matrixOut_t J, vectorIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a747ecaed7b9140af8c7e88df627d398b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DifferentiableFunctionPtr_t</type>
      <name>inner_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>abf19c31a0e10d2348783d2bd23e21955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const segment_t</type>
      <name>lsa_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aaf332b8f4c204f43fe7caa16b83ece00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const segment_t</type>
      <name>lsd_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a69a18383d90295f8b344b54f3ddcf94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const segment_t</type>
      <name>rsa_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a12914ea48193f6028b4eb75968692186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const segment_t</type>
      <name>rsd_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a1d3f041d4baaf591e18ea3ef9d5d7573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LiegroupElement</type>
      <name>l_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ae2ac7355d2b27f78e839d8554e22c6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LiegroupElement</type>
      <name>r_</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a0c44a25086d8d7220375968bed85c289</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Difference</name>
    <filename>a00031.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a2192f4dd64c25c945de9cf15f290f3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a1af82385ad79fd6d3f88616058594bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a157a66017bccc67785b01bc977991c52</anchor>
      <arglist>(const CalculusBase&lt; Difference &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aa413ade15cd2012023cf86d9313bcf88</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aaa4492be837b969e924989346fb69285</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a9a335de644819fc023f4601f0366771c</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a79c919457e0a3257b411ba051916a64b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aea951f7ac52c0e67cd082da2b30a139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DifferentiableFunction</name>
    <filename>a00032.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferentiableFunction</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2c7c4aa19e0063c7111093bb801176f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LiegroupElement</type>
      <name>operator()</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afd5d7e80ec725e4521e12cefcfaa5019</anchor>
      <arglist>(vectorIn_t argument) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af9adc9701f3f85dfa98a03ce9f8fe656</anchor>
      <arglist>(LiegroupElementRef result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a88a5febfa02716dc30e2e0e481cfebfa</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function">
      <type>const ArrayXb &amp;</type>
      <name>activeParameters</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad7f42a88fe5bf8325e3a218bb9de17d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ArrayXb &amp;</type>
      <name>activeDerivativeParameters</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac6de8c9f70cbbd9ed54fbfa0a6edeab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>inputSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a79165181c7de9490014f9f19392509d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>inputDerivativeSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a796ef80d7f2a935e3d8a757947d82bce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LiegroupSpacePtr_t</type>
      <name>outputSpace</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae3f98c8e5f60805c914a2a9d3ec3efd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2483103d8d247a356d01eaa57ba4deef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputDerivativeSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa01f5efd9245fff335743bd262d0414f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aea6989f1b640e9f34af5c56d5c900b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4836d0f9aca693a5c5a5886bb3756898</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>context</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a32aa95943778342bb3d5bfd6afc458ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>context</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a28f8369f39cd17b8859bc7068052c0c6</anchor>
      <arglist>(const std::string &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finiteDifferenceForward</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7c7bc64a748773a411c495d54173b3c4</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg, DevicePtr_t robot=DevicePtr_t(), value_type eps=std::sqrt(Eigen::NumTraits&lt; value_type &gt;::epsilon())) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finiteDifferenceCentral</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a50c7eb32f18d5fa02cde70f02d461716</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg, DevicePtr_t robot=DevicePtr_t(), value_type eps=std::sqrt(Eigen::NumTraits&lt; value_type &gt;::epsilon())) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a57f0b42159c34087c7a56150db4bfca5</anchor>
      <arglist>(size_type sizeInput, size_type sizeInputDerivative, size_type sizeOutput, std::string name=std::string())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a05292390551503036cc469a0b47817b0</anchor>
      <arglist>(size_type sizeInput, size_type sizeInputDerivative, const LiegroupSpacePtr_t &amp;outputSpace, std::string name=std::string())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a95695d5a4801c2b83d731d7a87e48dd3</anchor>
      <arglist>(LiegroupElementRef result, vectorIn_t argument) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a51f5efeaae18bb9f2a3dbedf2337e385</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>inputSize_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a22ea87c801fd2862476d2a7cd37b9b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>inputDerivativeSize_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a07c3df220d3adf139dc3c2904e116af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LiegroupSpacePtr_t</type>
      <name>outputSpace_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a009b1b89a1a8298527f48b97f949c6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayXb</type>
      <name>activeParameters_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac239e53a6586e2d677e40ab06f66019e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayXb</type>
      <name>activeDerivativeParameters_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae7a058f9b36ceff1d2ebf1e4a5413f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DifferentiableFunctionSet</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1807dc88ef063185f2ad7a2c441ae029</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DifferentiableFunctionSet</name>
    <filename>a00033.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>std::vector&lt; DifferentiableFunctionPtr_t &gt;</type>
      <name>Functions_t</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a54dd9362e44846516abdfb6711871faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferentiableFunctionSet</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a81aad50b3a8a9d5c32560114088400cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a9bbcd4a58d863395763c951e2e586398</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DifferentiableFunctionSet</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aa46b7311266fe4f2b9bf85748af52372</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DifferentiableFunctionSet</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a25fd9cd4cb503f65d877fa5a18e38f8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Functions_t &amp;</type>
      <name>functions</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a776d12c4c539ed0e7c311c71b22035a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a5bcac341f4d8089ade96aa8933ca863e</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7ac48c80f63420449d494af3e81f5fd9</anchor>
      <arglist>(const DifferentiableFunctionSetPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DifferentiableFunctionSetPtr_t</type>
      <name>create</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a223fa817a76148d324173b7e592d65a3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a50852a4585f78909e76cbb7c640000bb</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a55200638ae6c92a11ab86ef542445b30</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>const Functions_t &amp;</type>
      <name>functions</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a776d12c4c539ed0e7c311c71b22035a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a5bcac341f4d8089ade96aa8933ca863e</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7ac48c80f63420449d494af3e81f5fd9</anchor>
      <arglist>(const DifferentiableFunctionSetPtr_t &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DistanceBetweenBodies</name>
    <filename>a00034.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceBetweenBodies</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ad3c9ded5885474f36dc068b5652ee489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW DistanceBetweenBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a7c7d941865001859062558929bbc45ac</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceBetweenBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a4867e81b7ead576d27afe1d7d10e1b38</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const std::vector&lt; CollisionObjectPtr_t &gt; &amp;objects)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenBodies</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ab92b72fa55751df9d487949988eba414</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenBodies</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a7fdc57869adaceaf17e95460c7be2187</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const std::vector&lt; CollisionObjectPtr_t &gt; &amp;objects)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>abeec1b2e45e06235cc06a9f6defcf5e3</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a27c4cc64a0374756cc9194e5973e61d9</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DistanceBetweenPointsInBodies</name>
    <filename>a00035.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceBetweenPointsInBodies</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a6927703fe5c981261abc1cf0570f9054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW DistanceBetweenPointsInBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a19f94a66daa5cb6a26417052466e7506</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceBetweenPointsInBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a9d600a03e95370da4b70cf1a0b1a1024</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenPointsInBodies</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a8ce2472d0053eb1f75cd0264d1e0bd10</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenPointsInBodies</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a81331e22b9fe6efaf9af92cb12a321f6</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab2b43d356350db5011b983f27386c548</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a17c1f75d89220cf240ce7f7547cd1a80</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::dont_print_indices</name>
    <filename>a00036.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>run</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aec44455e24bb41bc3d111d71ff271674</anchor>
      <arglist>(std::ostream &amp;, const BlockIndexType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::empty_struct</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>MatrixXd::Index</type>
      <name>Index</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a52f67c7695348eb3af40ad8fd893d0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>empty_struct</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a6c45ba482b0e0c7ce0779a547ed126b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>empty_struct</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a021a2d369a8cd151c87920c0a378bc0d</anchor>
      <arglist>(In_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>empty_struct</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a4468653ab0c517098f9619bd64021ea1</anchor>
      <arglist>(In0_t, In1_t)</arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae93b7f9bd1488a028637f852da40da32</anchor>
      <arglist>(const Index &amp;i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Index</type>
      <name>size</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8df99e7a8ffe7df8dcc4901c3cdc6fec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::solver::lineSearch::ErrorNormBased</name>
    <filename>a00038.html</filename>
    <member kind="function">
      <type></type>
      <name>ErrorNormBased</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a827de576b45a3e863fa64b9129dbc69f</anchor>
      <arglist>(value_type alphaMin, value_type _a, value_type _b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ErrorNormBased</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a3465e2dcb02d9a9ab6375cfa82874ee6</anchor>
      <arglist>(value_type alphaMin=0.2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a2f8c124601a1572d386b17c9265c79a4</anchor>
      <arglist>(const SolverType &amp;solver, vectorOut_t arg, vectorOut_t darg)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>C</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ad1e2dc4cc2da0ed18afaf1202ab14a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>K</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a6b5359a71aa6e946d2d7dec687a7b9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>a</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a9bd70f15b30bc39fdf48b2464bf823d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>b</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a4de01f960735dd350380f33690b5d2f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::eval_matrix_block_view_to</name>
    <filename>a00039.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::eval_matrix_block_view_to&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;, Dst &gt;</name>
    <filename>a00040.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;</type>
      <name>Src</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a24d778203250d9a5eb8d4c7d639f4708</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>run</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7a0ad33357602235101cd7177311d284</anchor>
      <arglist>(const Src &amp;src, Dst &amp;dst)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::eval_matrix_block_view_to&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;, MatrixBlockView&lt; _ArgType2, _Rows2, _Cols2, _allRows2, _allCols2 &gt; &gt;</name>
    <filename>a00041.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <templarg></templarg>
    <templarg>_Rows2</templarg>
    <templarg>_Cols2</templarg>
    <templarg>_allRows2</templarg>
    <templarg>_allCols2</templarg>
    <member kind="typedef">
      <type>MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;</type>
      <name>Src</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a000e2cf97d563fd6fe218612a2e9c769</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBlockView&lt; _ArgType2, _Rows2, _Cols2, _allRows2, _allCols2 &gt;</type>
      <name>Dst</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a9345ec993cb244e44e1d1e8886857f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>run</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a3b4ac6e197452729dbc231ddd8d6d43c</anchor>
      <arglist>(const Src &amp;src, Dst &amp;dst)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::eval_matrix_block_view_to&lt; Src, MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</name>
    <filename>a00042.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <member kind="typedef">
      <type>MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;</type>
      <name>Dst</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a765ef4f37647fb981afeaa26c81fa4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>run</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a0263e6b93d1068d258369005be5da37d</anchor>
      <arglist>(const Src &amp;src, Dst &amp;dst)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Explicit</name>
    <filename>a00043.html</filename>
    <base virtualness="virtual">hpp::constraints::Implicit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ImplicitPtr_t</type>
      <name>copy</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a311da44507fcba956229f7ba0419c93b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DifferentiableFunctionPtr_t</type>
      <name>explicitFunction</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a30178e4b0762cd1b3d50b33d7378bfa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const segments_t &amp;</type>
      <name>outputConf</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a8f9b03ab59a1917553594fe473ebdbc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const segments_t &amp;</type>
      <name>outputVelocity</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5bf4043d73ae9f826054faf3d5bab34b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const segments_t &amp;</type>
      <name>inputConf</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a7a2a078f4d8332375239652687ec2c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const segments_t &amp;</type>
      <name>inputVelocity</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a39ed2ce0693bc25414264ee34e5f1621</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>implicitToExplicitRhs</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ad5393d465eb6851f695b5685f55efad2</anchor>
      <arglist>(vectorIn_t implicitRhs, vectorOut_t explicitRhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitPtr_t</type>
      <name>create</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ae834c31442d7a4a1c0fa42dc046ba400</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity, const ComparisonTypes_t &amp;comp=ComparisonTypes_t()) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitPtr_t</type>
      <name>create</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6a494861bb0f5d48dd42e01d3632d2db</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;configSpace, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity, const ComparisonTypes_t &amp;comp=ComparisonTypes_t())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>acdc302bc905abf3805a45cbe33de797c</anchor>
      <arglist>(const ExplicitPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Explicit</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a7d482efcd4cfeb14abe2606f1568b1e2</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity, const ComparisonTypes_t &amp;comp) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Explicit</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac2f94f91369c4809fdef97f74bf65d46</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;configSpace, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity, const ComparisonTypes_t &amp;comp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Explicit</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a7e1abd67db78c0bbcb5762f0a855160b</anchor>
      <arglist>(const Explicit &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>afd4229821bdd79eaefa5358624fddcf0</anchor>
      <arglist>(const ExplicitWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DifferentiableFunctionPtr_t</type>
      <name>inputToOutput_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa99f66c58b54283b9df8f12aae30b5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>segments_t</type>
      <name>inputConf_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a9d4cabbe3d95368a8e5c8c44c6aea58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>segments_t</type>
      <name>outputConf_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>afd04276983612762d23f6108bc9d01e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>segments_t</type>
      <name>inputVelocity_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a4aceac95164ae2897e91b2fd123432a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>segments_t</type>
      <name>outputVelocity_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a93fc6c3fc6ba056e41934c5202cf6847</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ExplicitConstraintSet</name>
    <filename>a00044.html</filename>
    <member kind="typedef">
      <type>Eigen::RowBlockIndices</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a8667552233f5950fa880f849262ec915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::ColBlockIndices</type>
      <name>ColBlockIndices</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a14223280ee8ba2c5a82cb277d49103fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlockView&lt; matrix_t, Eigen::Dynamic, Eigen::Dynamic, false, false &gt;</type>
      <name>MatrixBlockView</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a52402042e2dd498a6046456092dabbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MatrixBlockView</type>
      <name>viewJacobian</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a88e0d1b2f02be5dc2aaac787d99cee23</anchor>
      <arglist>(matrix_t &amp;jacobian) const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlockView</type>
      <name>jacobianNotOutToOut</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5c56a7b48c5593fff356cefbc5a15582</anchor>
      <arglist>(matrix_t &amp;jacobian) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a0a6dd975879b056a1549accd2fe2407c</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t q) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1af43c15918abbb2fd55d7348054b84b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af0c0291fe60b1fb0f09f8bd789376590</anchor>
      <arglist>(vectorOut_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a827a6e8cecabcebcb9a398c768b9675c</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae4a8567ae87356783e4a0ead527a040f</anchor>
      <arglist>(vectorIn_t arg, vectorOut_t error) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintSatisfied</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a8fb811cc24af6bd50883a779162422a3</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t arg, vectorOut_t error, bool &amp;constraintFound) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>add</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3be9da4a28c4756a7b9849b7fbcba653</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acd06cebfdc37a8431f1e1649967c06c0</anchor>
      <arglist>(const ExplicitPtr_t &amp;numericalConstraint) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitConstraintSet</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1ee71bc69108097c9767556ce98fde22</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a96dcee9126561323a5c12796ce0469a8</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9cea90e2f765eac474c5e2d6c6310827</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>squaredErrorThreshold</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab949a549458acbaacc1b3efbb041498f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>inArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a012339f68b32a96e92ecd995c6fef174</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>inDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad5da1a9b35643e2a26876fb8b701a136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>freeArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac764491b1f58cd6e4cd5c20b29a66ae9</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>freeDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac13b46e0e48b8b2e9ff247bff73cf082</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>notOutArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a822f2c82afa48448ed099bebb7128927</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>notOutDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6418112165f818ef009b987cc3a3450c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColBlockIndices</type>
      <name>activeParameters</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>adcfe686d3f9359ffd3ddca760c229582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>activeDerivativeParameters</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acc3f752364b2fdee7c7ca26b9a132e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXi &amp;</type>
      <name>inOutDependencies</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a4b13f12c8d0963f6a9b5e374f578c5f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXi</type>
      <name>inOutDofDependencies</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a07ca5349f288ed03731864df4229987f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXi &amp;</type>
      <name>derFunction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1657a7f367c68713c7ce66d18b06c72f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>outArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a32e0d9406342903369ca652626380bc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>outDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9a129d3ae12accc84640c394cf495d5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>argSize</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aef685d9ebbc1a7427ea7adeb32eb9058</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>derSize</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9013e1c245de90749f978cbb46af1c85</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>LiegroupSpacePtr_t</type>
      <name>configSpace</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a443b16eba322ba70fcffea4f4ce9eb84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nq</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aac1b4cfc74d30390ee5f6d481408f7e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nv</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5f4d80e2f0dae6ecffaf07adeba6c7da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromInput</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aae2044618dd506427eb11f19963100ae</anchor>
      <arglist>(vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSideFromInput</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a36217073dd83223b940ef8865b568d6a</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint, vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromInput</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6c07c86d11ff808192444b4de55310b1</anchor>
      <arglist>(const size_type &amp;i, vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a604a945585b8b8643943500d9e469f72</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>afe2f414f062b2ad58732a54985f38b8e</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2bbbc0ae42eeb7a40f41edc26619c87c</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint, vectorOut_t rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3ff03b5fbc57caf16c65e2026c43c9fa</anchor>
      <arglist>(const size_type &amp;i, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae67352cd3a215eb7215d57da99587f45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aad603556fc682a1543aaec3f07d3c7f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af0c0291fe60b1fb0f09f8bd789376590</anchor>
      <arglist>(vectorOut_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a827a6e8cecabcebcb9a398c768b9675c</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae4a8567ae87356783e4a0ead527a040f</anchor>
      <arglist>(vectorIn_t arg, vectorOut_t error) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintSatisfied</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a8fb811cc24af6bd50883a779162422a3</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t arg, vectorOut_t error, bool &amp;constraintFound) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>add</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3be9da4a28c4756a7b9849b7fbcba653</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acd06cebfdc37a8431f1e1649967c06c0</anchor>
      <arglist>(const ExplicitPtr_t &amp;numericalConstraint) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitConstraintSet</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1ee71bc69108097c9767556ce98fde22</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a96dcee9126561323a5c12796ce0469a8</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9cea90e2f765eac474c5e2d6c6310827</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>squaredErrorThreshold</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab949a549458acbaacc1b3efbb041498f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>inArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a012339f68b32a96e92ecd995c6fef174</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>inDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad5da1a9b35643e2a26876fb8b701a136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>freeArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac764491b1f58cd6e4cd5c20b29a66ae9</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>freeDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac13b46e0e48b8b2e9ff247bff73cf082</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>notOutArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a822f2c82afa48448ed099bebb7128927</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>notOutDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6418112165f818ef009b987cc3a3450c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColBlockIndices</type>
      <name>activeParameters</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>adcfe686d3f9359ffd3ddca760c229582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColBlockIndices &amp;</type>
      <name>activeDerivativeParameters</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>acc3f752364b2fdee7c7ca26b9a132e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXi &amp;</type>
      <name>inOutDependencies</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a4b13f12c8d0963f6a9b5e374f578c5f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXi</type>
      <name>inOutDofDependencies</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a07ca5349f288ed03731864df4229987f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXi &amp;</type>
      <name>derFunction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a1657a7f367c68713c7ce66d18b06c72f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>outArgs</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a32e0d9406342903369ca652626380bc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowBlockIndices &amp;</type>
      <name>outDers</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9a129d3ae12accc84640c394cf495d5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>argSize</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aef685d9ebbc1a7427ea7adeb32eb9058</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>derSize</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9013e1c245de90749f978cbb46af1c85</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>LiegroupSpacePtr_t</type>
      <name>configSpace</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a443b16eba322ba70fcffea4f4ce9eb84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nq</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aac1b4cfc74d30390ee5f6d481408f7e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nv</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5f4d80e2f0dae6ecffaf07adeba6c7da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromInput</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aae2044618dd506427eb11f19963100ae</anchor>
      <arglist>(vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSideFromInput</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a36217073dd83223b940ef8865b568d6a</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint, vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromInput</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6c07c86d11ff808192444b4de55310b1</anchor>
      <arglist>(const size_type &amp;i, vectorIn_t p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a604a945585b8b8643943500d9e469f72</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>afe2f414f062b2ad58732a54985f38b8e</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2bbbc0ae42eeb7a40f41edc26619c87c</anchor>
      <arglist>(const ExplicitPtr_t &amp;constraint, vectorOut_t rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3ff03b5fbc57caf16c65e2026c43c9fa</anchor>
      <arglist>(const size_type &amp;i, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae67352cd3a215eb7215d57da99587f45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aad603556fc682a1543aaec3f07d3c7f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Expression</name>
    <filename>a00045.html</filename>
    <templarg>LhsValue</templarg>
    <templarg>RhsValue</templarg>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Expression&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af3424af664215386c20ee7db139e0c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Expression&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3114e8891d440af3755c3fdd0c79a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LhsValue &amp;</type>
      <name>lhs</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>aa7e24ffb55c35b1b5014804a36836e8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RhsValue &amp;</type>
      <name>rhs</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8b5a49e1e5fdf9c2f49d71edcce449bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a97028a3dd54a87ee7e506b70e37966ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>adcb8c04e1841c7bd1d32286dd9221c88</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a84078cc1c17bacf7f27f8fa0d1da2290</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab3f80f232a52e2f0631b440ee7f9f9de</anchor>
      <arglist>(Ptr_t self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae61510141a143c84abc79b3c3f7a8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5aa932aff015d95ad794f0aeb769a437</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; RhsValue &gt;::Ptr_t</type>
      <name>rhs_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af019c9c05b27e9778f00242742162cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; LhsValue &gt;::Ptr_t</type>
      <name>lhs_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5a27324330f67eb44b1a44f853235589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; Expression &gt;::WkPtr_t</type>
      <name>self_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3a1a9873e47e438fccd342bdb9526e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression&lt; pinocchio::Joint, RhsValue &gt;</name>
    <filename>a00045.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Expression&lt; pinocchio::Joint, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af3424af664215386c20ee7db139e0c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Expression&lt; pinocchio::Joint, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3114e8891d440af3755c3fdd0c79a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const pinocchio::Joint &amp;</type>
      <name>lhs</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>aa7e24ffb55c35b1b5014804a36836e8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RhsValue &amp;</type>
      <name>rhs</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8b5a49e1e5fdf9c2f49d71edcce449bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a97028a3dd54a87ee7e506b70e37966ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>adcb8c04e1841c7bd1d32286dd9221c88</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a84078cc1c17bacf7f27f8fa0d1da2290</anchor>
      <arglist>(const typename Traits&lt; pinocchio::Joint &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab3f80f232a52e2f0631b440ee7f9f9de</anchor>
      <arglist>(Ptr_t self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae61510141a143c84abc79b3c3f7a8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5aa932aff015d95ad794f0aeb769a437</anchor>
      <arglist>(const typename Traits&lt; pinocchio::Joint &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; RhsValue &gt;::Ptr_t</type>
      <name>rhs_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af019c9c05b27e9778f00242742162cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; pinocchio::Joint &gt;::Ptr_t</type>
      <name>lhs_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5a27324330f67eb44b1a44f853235589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; Expression &gt;::WkPtr_t</type>
      <name>self_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3a1a9873e47e438fccd342bdb9526e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression&lt; value_type, RhsValue &gt;</name>
    <filename>a00045.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Expression&lt; value_type, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af3424af664215386c20ee7db139e0c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Expression&lt; value_type, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3114e8891d440af3755c3fdd0c79a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>lhs</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>aa7e24ffb55c35b1b5014804a36836e8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RhsValue &amp;</type>
      <name>rhs</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8b5a49e1e5fdf9c2f49d71edcce449bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a97028a3dd54a87ee7e506b70e37966ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>adcb8c04e1841c7bd1d32286dd9221c88</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a84078cc1c17bacf7f27f8fa0d1da2290</anchor>
      <arglist>(const typename Traits&lt; value_type &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab3f80f232a52e2f0631b440ee7f9f9de</anchor>
      <arglist>(Ptr_t self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae61510141a143c84abc79b3c3f7a8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5aa932aff015d95ad794f0aeb769a437</anchor>
      <arglist>(const typename Traits&lt; value_type &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; RhsValue &gt;::Ptr_t</type>
      <name>rhs_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>af019c9c05b27e9778f00242742162cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; value_type &gt;::Ptr_t</type>
      <name>lhs_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5a27324330f67eb44b1a44f853235589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; Expression &gt;::WkPtr_t</type>
      <name>self_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a3a1a9873e47e438fccd342bdb9526e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::solver::lineSearch::FixedSequence</name>
    <filename>a00046.html</filename>
    <member kind="function">
      <type></type>
      <name>FixedSequence</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3b1955056cbab101c194adefef7555c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5f968a8265d58ecf55032c3609360bbe</anchor>
      <arglist>(const SolverType &amp;solver, vectorOut_t arg, vectorOut_t darg)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>alpha</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a9d072855bd8f09ecd07568e3abf831df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>alphaMax</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a53685ee91c8303e2d8600210fff7e12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>K</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a89d0de8aebc8d1fcd048fce5701519b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::ConvexShapeContact::ForceData</name>
    <filename>a00047.html</filename>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a455ae26986806ca54177696ecdb5f54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>supportJoint</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a75e494d0985efa355c4ae4326d2ed415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>points</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a84c7abb3daca0403878f36c518de1f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a23a5e694b1deb8731e94d48d9267c410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::FunctionExp</name>
    <filename>a00048.html</filename>
    <templarg></templarg>
    <base>CalculusBase&lt; FunctionExp&lt; FunctionType &gt;, vector_t, matrix_t &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; FunctionExp&lt; FunctionType &gt;, vector_t, matrix_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a7560e2597376c4ca4d1859f31affb258</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FunctionType &gt;</type>
      <name>FunctionTypePtr_t</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>adb28353f779afb406baf564fc22dc10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExp</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ac6a412a5dbdd465347a75f7d5509685c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExp</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a64b2dea36816bff6f16e792028461911</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExp</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>acd9996d940c0c0c15a09df02a68dde60</anchor>
      <arglist>(const FunctionExp &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionExp</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>afe3eedef4a42e2a8a853d5fa6ec6b3da</anchor>
      <arglist>(const FunctionTypePtr_t &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a940ef19037fd0861c4cff8516cd023c5</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2b73aaccfd8ea2eefb0c1df336c38834</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::GenericTransformation</name>
    <filename>a00049.html</filename>
    <templarg>_Options</templarg>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="enumvalue">
      <name>IsRelative</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5f6fb33a5c62b7c86145c1d8651b66cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeOrientation</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ab8dfca9215b762f37051e1b1ee964d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputePosition</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ad79703f65590070af3219e24f00caaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutputSE3</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a2bb2f1b0963078c71a7358594fb1799a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPosition</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5fdd40f4481052cd2ecc13553b1b0bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsOrientation</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a186e5f17cc92d7956babaa0ac233c255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsTransform</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a633dcbc68dbec0a3b04260cadb15c48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ValueSize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a8d7348402181dbb59ddcad5b11c538e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerSize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a2d5cae63267342a6049ac9e54f03029e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GenericTransformation &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a49a40324fefd9d6bc2d6dbad6dfd92e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; GenericTransformation &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a9be32da30976bc4a87f983e35c2c93ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRelative</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5f6fb33a5c62b7c86145c1d8651b66cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeOrientation</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ab8dfca9215b762f37051e1b1ee964d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputePosition</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ad79703f65590070af3219e24f00caaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutputSE3</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a2bb2f1b0963078c71a7358594fb1799a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPosition</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5fdd40f4481052cd2ecc13553b1b0bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsOrientation</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a186e5f17cc92d7956babaa0ac233c255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsTransform</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a633dcbc68dbec0a3b04260cadb15c48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ValueSize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a8d7348402181dbb59ddcad5b11c538e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerSize</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a2d5cae63267342a6049ac9e54f03029e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericTransformation</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a4710f72c9a1c62621d8afe076d574789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a7355619b242851092af2bb7f9a7d102c</anchor>
      <arglist>(const Transform3f &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>reference</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aff051e6338b12e345f25acfdae94f203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joint1</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a96e4008ec29777c1a993212d87e276f5</anchor>
      <arglist>(const JointConstPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>JointConstPtr_t</type>
      <name>joint1</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a2a127d2193c0072f5f00f70d6be41248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joint2</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a989df71c14b1a380478476579e5d4961</anchor>
      <arglist>(const JointConstPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>JointConstPtr_t</type>
      <name>joint2</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>acb321ed0aaea0656db5df172325c66a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame1InJoint1</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a39f0034b8560a9bbd34320df11a1b3ae</anchor>
      <arglist>(const Transform3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>frame1InJoint1</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a0ef97fd58ea5c46ea97386f3fd958baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame2InJoint2</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a1b7fcdc6baadd3b32db7df630d2799ae</anchor>
      <arglist>(const Transform3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>frame2InJoint2</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ac7bc07031a6423848edc3e3701994410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ae49fee42f159a6db053ec03e7053b297</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericTransformation</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a04d4edb2f1ceefeac1a3520937933da2</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a720f1a510b2cad8c3ff56f7079a4f64a</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(DerSize, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a3699e289b5b09939314438f25db314dc</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame2, const Transform3f &amp;frame1, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(DerSize, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ac2b4ffa321ab46c7c18de178b935928d</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(DerSize, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>afe9c6e945d4526be0535ffb31c5f584e</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(DerSize, true))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a457d51c057c733a9b22c06df0389b39f</anchor>
      <arglist>(const WkPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>afd91a4fecce3c6565f84dc2af31a2e34</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ac2b0379ac1dc23d4252e5409c9215e51</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::get_if</name>
    <filename>a00050.html</filename>
    <templarg>If</templarg>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE T1</type>
      <name>run</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>abb8b1093ed6f41f0832c0b921ca4e467</anchor>
      <arglist>(T1 then, T2 Else)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::get_if&lt; false &gt;</name>
    <filename>a00051.html</filename>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE T2</type>
      <name>run</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac6f4043483d4c201a0ee8b174c6bc06d</anchor>
      <arglist>(T1 then, T2 Else)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::solver::HierarchicalIterative</name>
    <filename>a00052.html</filename>
    <class kind="struct">hpp::constraints::solver::HierarchicalIterative::Data</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_INCREASED</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ac3c78c129b8f590ae6c9e19de266dff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ITERATION_REACHED</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ada8f4308f6ebb8a52f2ef796ec5d5889</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ae244d5d69b3f5f211e5930e2369e161f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUCCESS</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ac4d2694d479c6686ec0e4ccfcb75c723</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::RowBlockIndices</type>
      <name>Indices_t</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>acd1e78184159e160f5aade79771f4b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>lineSearch::FixedSequence</type>
      <name>DefaultLineSearch</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0e6a06988bbfa7713f43266002b488bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(vectorIn_t q, vectorOut_t qSat, Eigen::VectorXi &amp;saturation)&gt;</type>
      <name>Saturation_t</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>accc4e901f2b3a21f5d55bb3013ea403e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR_INCREASED</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ac3c78c129b8f590ae6c9e19de266dff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_ITERATION_REACHED</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ada8f4308f6ebb8a52f2ef796ec5d5889</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFEASIBLE</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ae244d5d69b3f5f211e5930e2369e161f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUCCESS</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8cd205d2f649343a8d0d5ee0b213c457ac4d2694d479c6686ec0e4ccfcb75c723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalIterative</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a523571a0ffb54b9e30923c2f83a8e4ba</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;configSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalIterative</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a583ef6af9dbd446b26d977111f00ce6b</anchor>
      <arglist>(const HierarchicalIterative &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchicalIterative</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a09293f77e978159914781838755727f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>residualError</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af7dbf5a671b76e5aa6bfa7d64ca8268d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>residualError</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab02e06c8587dc542b3ab4193904bee3e</anchor>
      <arglist>(vectorOut_t error) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>definesSubmanifoldOf</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a71e779f64c69a616dd5c9ad091f89e85</anchor>
      <arglist>(const HierarchicalIterative &amp;solver) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a096a61f8bc0ae8bc89604cc8fb5ec0ef</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>solver::HierarchicalIterative::Status</type>
      <name>solve</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a68c9a3ba0b7c1253a13edd51c4a9714a</anchor>
      <arglist>(vectorOut_t arg, LineSearchType lineSearch) const </arglist>
    </member>
    <member kind="function">
      <type>const LiegroupSpacePtr_t &amp;</type>
      <name>configSpace</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8659a6b163376e754988b550f88c53fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a48486cd33fef6403a97a46bdbd63c321</anchor>
      <arglist>(const ImplicitPtr_t &amp;numericalConstraint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a55964a983600ed397801da312b0a5382</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;f, const std::size_t &amp;priority) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a23db09ffcf705ac1ea3f6bd97ae60a1f</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;f, const std::size_t &amp;priority, const ComparisonTypes_t &amp;comp) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a22315d5f5be53fc8242e296d28937fa9</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, const std::size_t &amp;priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab67ee84ed0f1f81dc232c1ba5893739c</anchor>
      <arglist>(const HierarchicalIterative &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1e2441c0f9d2372660de04c6158b31fb</anchor>
      <arglist>(const Saturation_t &amp;saturate)</arglist>
    </member>
    <member kind="function">
      <type>const Saturation_t &amp;</type>
      <name>saturation</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4cd7266740a9e00e786b9d8c373440cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2ed0b6a146230972bc14b5b305a851a1</anchor>
      <arglist>(vectorOut_t arg, LineSearchType ls=LineSearchType()) const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>adc092c5b3c15d519978d571e2062e36e</anchor>
      <arglist>(vectorOut_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac498f10c78d75def1358ab0ba89238cc</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintSatisfied</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a865051f42aac256df46c4375c56aecb6</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t arg, vectorOut_t error, bool &amp;constraintFound) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>sigma</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a39df43be563e8ba34447af8a2da9cf54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeVariables</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a91d45a1a75d0081db60c29bda61f880c</anchor>
      <arglist>(const segments_t intervals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeVariables</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4cca905def0566d4f0ccfd01fc6fb6ac</anchor>
      <arglist>(const Indices_t &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>const Indices_t &amp;</type>
      <name>freeVariables</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7c91e0296b51a8d776515544f98fbde3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ae2527d001e7734efe72d89645808d7c0</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterations</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0ecec3b476c152a44280731e494b6ec9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a54de927f859606a81ba3646a86d560e1</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab7ec0ddd96aea8099618933979be966a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>squaredErrorThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac3758f9b2a775a379c2a067924c8139c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>inequalityThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2eac2bd3996e94adb46c9a831accd664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inequalityThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aa0ed6c1dbd34d0d276883617a8d36060</anchor>
      <arglist>(const value_type &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastIsOptional</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a95ed8176ee576a9dfde49d1abf81d3ec</anchor>
      <arglist>(bool optional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lastIsOptional</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9542ca8baf15a0b5a9a06205e31f1b55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ImplicitConstraintSet &amp;</type>
      <name>constraints</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4acf8d4e4115968af430a24d891ddded</anchor>
      <arglist>(const std::size_t priority)</arglist>
    </member>
    <member kind="function">
      <type>const NumericalConstraints_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a68f48c9fa9edbed3298cf27df92be901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberStacks</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>acbb6b0e81998eafd872e152d9bee0130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>dimension</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a878dc9f5c6a314e8928bf4c6ff50f2d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>reducedDimension</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0d17e011d8e61f1dda54ece339264592</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayXb</type>
      <name>activeParameters</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac089c39e41398e01b4c963c5b1851415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayXb</type>
      <name>activeDerivativeParameters</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a447f9980f14e72247fe72a70da0c7235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a25d5d4a859dcabe66b82961f707e9760</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0c17361f86f1d5a820ca6168d74e1351</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>rightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>afa723641cd6b305863270aa89c77f7e9</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4797674c1184cb12958bd66add335936</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorOut_t rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7f92c601684dddea7aeb876a5fee2611</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideAt</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1ded4e4719cc7d983d49a28b69c9a4f4</anchor>
      <arglist>(const value_type &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7dd32faaf88a5abe8b475fb69c30720f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad1e0ab282ad2920dd7615225e8455cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>acd60cf4d540d281ea556a7fe67151417</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSaturation</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aadeb6896fdd8c9f55b6d4a7aa9c47cbf</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aecd8ced781f3c04378805a2e9fe696e2</anchor>
      <arglist>(vectorOut_t v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getReducedJacobian</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9630877ae5fe3e394d22ca4a269dc2d5</anchor>
      <arglist>(matrixOut_t J) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeError</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a473fe864bf0d8f723cd2ccca29d3a528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector_t &amp;</type>
      <name>lastStep</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a22710779873a2b13a7caf287c5e80f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a80941c24152730fc20728a60f137c5d9</anchor>
      <arglist>(vectorIn_t from, vectorIn_t velocity, vectorOut_t result) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::JacobiSVD&lt; matrix_t &gt;</type>
      <name>SVD_t</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7fa63dd448f41ff446e7bb7348d4b246</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a6c59f73df1bf2a0c5c914ebda98dd377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeActiveRowsOfJ</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1bf525b505afa3ec44ffe1e97987a855</anchor>
      <arglist>(std::size_t iStack)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeDescentDirection</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a752f871c7c35985ab6451ce70ec485bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expandDqSmall</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aed87a60d507624c9b63e0a6148d37abb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saturate</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a91a6b952a2324afee7b06f31641d8472</anchor>
      <arglist>(vectorOut_t arg) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>squaredErrorThreshold_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7b57f3b160526aa9dfe844bbbd470e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>inequalityThreshold_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a64ff32bf2ce0a8aac439e179673398df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>maxIterations_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1d709f2cc98b317276f69ffc196a1219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ImplicitConstraintSet &gt;</type>
      <name>stacks_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0e5b25c58af75272b00c097ffc0a2ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LiegroupSpacePtr_t</type>
      <name>configSpace_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a6b243a86e035fb326e4b07b9e2400781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>dimension_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad21bbbbb6a8eab9d4f3ba32d8bfc3756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>reducedDimension_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1653486dd014ed11034ecc8228eed588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lastIsOptional_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af57c172acb7656c82306b62f8e8bdb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Indices_t</type>
      <name>freeVariables_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af2959a32990c20ce8c7467fc1d6d8a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Saturation_t</type>
      <name>saturate_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a143aef52b131c3492f625c4f2d2ed4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NumericalConstraints_t</type>
      <name>constraints_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aabc3ff619af3d1c4790a25e7a15f92a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; DifferentiableFunctionPtr_t, size_type &gt;</type>
      <name>iq_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a953860e1e55dc41322d80c20b6a4c33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; DifferentiableFunctionPtr_t, size_type &gt;</type>
      <name>iv_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ada849e3f4521a87ec2566b38f23bf212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; DifferentiableFunctionPtr_t, std::size_t &gt;</type>
      <name>priority_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a6a0cbe4202170a57956ac2e9179b182e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>sigma_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a97e8f383b4dbfadae4723a75c0bdea6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector_t</type>
      <name>dq_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7c6f3fa83308b70a65bba726b8ad27b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector_t</type>
      <name>dqSmall_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af3bf14bb2d04bc46e1211f4e26f92434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_t</type>
      <name>reducedJ_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af50d9b02d95934cd5aadd30ceb712d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXi</type>
      <name>saturation_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ada209910336993026bc6919e628146ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXi</type>
      <name>reducedSaturation_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a32a9a6aee0145b91c7f26323f3f7cfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Configuration_t</type>
      <name>qSat_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a08ec2320580c156d9f338d262df95910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayXb</type>
      <name>tmpSat_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aa3030166ab0254e261ddd3573170da2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>squaredNorm_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a59c2f3bad479542a9830a0e8a738e54c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Data &gt;</type>
      <name>datas_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9fdc56dee93e698a804f2c5227209ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SVD_t</type>
      <name>svd_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ae729503d988aec45f01c4e1a8de7723c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector_t</type>
      <name>OM_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a51b2fc41f245694783991a7c6b6e22a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector_t</type>
      <name>OP_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a948a80eb55b3eadf2c869edc0ab635db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mutable::hpp::statistics::SuccessStatistics</type>
      <name>statistics_</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aae0533a38908831c1c9292ee488ddd3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>lineSearch::Backtracking</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>abeb2e2779d5a76f522c5781c760de1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LiegroupSpacePtr_t &amp;</type>
      <name>configSpace</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8659a6b163376e754988b550f88c53fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a48486cd33fef6403a97a46bdbd63c321</anchor>
      <arglist>(const ImplicitPtr_t &amp;numericalConstraint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a55964a983600ed397801da312b0a5382</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;f, const std::size_t &amp;priority) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a23db09ffcf705ac1ea3f6bd97ae60a1f</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;f, const std::size_t &amp;priority, const ComparisonTypes_t &amp;comp) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a22315d5f5be53fc8242e296d28937fa9</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, const std::size_t &amp;priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab67ee84ed0f1f81dc232c1ba5893739c</anchor>
      <arglist>(const HierarchicalIterative &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1e2441c0f9d2372660de04c6158b31fb</anchor>
      <arglist>(const Saturation_t &amp;saturate)</arglist>
    </member>
    <member kind="function">
      <type>const Saturation_t &amp;</type>
      <name>saturation</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4cd7266740a9e00e786b9d8c373440cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2ed0b6a146230972bc14b5b305a851a1</anchor>
      <arglist>(vectorOut_t arg, LineSearchType ls=LineSearchType()) const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>adc092c5b3c15d519978d571e2062e36e</anchor>
      <arglist>(vectorOut_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac498f10c78d75def1358ab0ba89238cc</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintSatisfied</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a865051f42aac256df46c4375c56aecb6</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t arg, vectorOut_t error, bool &amp;constraintFound) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>sigma</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a39df43be563e8ba34447af8a2da9cf54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeVariables</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a91d45a1a75d0081db60c29bda61f880c</anchor>
      <arglist>(const segments_t intervals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeVariables</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4cca905def0566d4f0ccfd01fc6fb6ac</anchor>
      <arglist>(const Indices_t &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>const Indices_t &amp;</type>
      <name>freeVariables</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7c91e0296b51a8d776515544f98fbde3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ae2527d001e7734efe72d89645808d7c0</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterations</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0ecec3b476c152a44280731e494b6ec9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a54de927f859606a81ba3646a86d560e1</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ab7ec0ddd96aea8099618933979be966a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>squaredErrorThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac3758f9b2a775a379c2a067924c8139c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>inequalityThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2eac2bd3996e94adb46c9a831accd664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inequalityThreshold</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aa0ed6c1dbd34d0d276883617a8d36060</anchor>
      <arglist>(const value_type &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastIsOptional</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a95ed8176ee576a9dfde49d1abf81d3ec</anchor>
      <arglist>(bool optional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lastIsOptional</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9542ca8baf15a0b5a9a06205e31f1b55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ImplicitConstraintSet &amp;</type>
      <name>constraints</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4acf8d4e4115968af430a24d891ddded</anchor>
      <arglist>(const std::size_t priority)</arglist>
    </member>
    <member kind="function">
      <type>const NumericalConstraints_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a68f48c9fa9edbed3298cf27df92be901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberStacks</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>acbb6b0e81998eafd872e152d9bee0130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>dimension</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a878dc9f5c6a314e8928bf4c6ff50f2d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>reducedDimension</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0d17e011d8e61f1dda54ece339264592</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayXb</type>
      <name>activeParameters</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ac089c39e41398e01b4c963c5b1851415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayXb</type>
      <name>activeDerivativeParameters</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a447f9980f14e72247fe72a70da0c7235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a25d5d4a859dcabe66b82961f707e9760</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a0c17361f86f1d5a820ca6168d74e1351</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>rightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>afa723641cd6b305863270aa89c77f7e9</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4797674c1184cb12958bd66add335936</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint, vectorOut_t rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7f92c601684dddea7aeb876a5fee2611</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideAt</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a1ded4e4719cc7d983d49a28b69c9a4f4</anchor>
      <arglist>(const value_type &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7dd32faaf88a5abe8b475fb69c30720f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad1e0ab282ad2920dd7615225e8455cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>acd60cf4d540d281ea556a7fe67151417</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSaturation</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aadeb6896fdd8c9f55b6d4a7aa9c47cbf</anchor>
      <arglist>(vectorIn_t arg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aecd8ced781f3c04378805a2e9fe696e2</anchor>
      <arglist>(vectorOut_t v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getReducedJacobian</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9630877ae5fe3e394d22ca4a269dc2d5</anchor>
      <arglist>(matrixOut_t J) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeError</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a473fe864bf0d8f723cd2ccca29d3a528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector_t &amp;</type>
      <name>lastStep</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a22710779873a2b13a7caf287c5e80f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a80941c24152730fc20728a60f137c5d9</anchor>
      <arglist>(vectorIn_t from, vectorIn_t velocity, vectorOut_t result) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Identity</name>
    <filename>a00053.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function">
      <type></type>
      <name>Identity</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a69e2a723faa2e346a6c2077d37846081</anchor>
      <arglist>(const LiegroupSpacePtr_t space, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IdentityPtr_t</type>
      <name>create</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a61471ea63d08e747fbfb3e6c792b75a7</anchor>
      <arglist>(const LiegroupSpacePtr_t space, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aef4f702abfdccac5ab64135299af9944</anchor>
      <arglist>(LiegroupElementRef y, vectorIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a16fcfcf5c84e6ca2ec46c41a5a536a8c</anchor>
      <arglist>(matrixOut_t J, vectorIn_t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Implicit</name>
    <filename>a00054.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad9f68103121a05532690f757bfb971a6</anchor>
      <arglist>(const Implicit &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImplicitPtr_t</type>
      <name>copy</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a19fb2e8c0e43b362ec6d7b4e803f3e4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implicit</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a3d354b73d5dae416affab597bea4c2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DifferentiableFunction &amp;</type>
      <name>function</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a74596f805ed2cdf0cd332a18c9e27bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunctionPtr_t &amp;</type>
      <name>functionPtr</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a4e3ad99abb16500f9367a44a56a35e48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>addaa092e7dfc12f766f8156f20398c46</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a55eddbdbd1d411fd421b8de227ccb7cc</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a36590ac58ad5d37c5a7e935f2d908a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rhsSize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a33eabd1737ffbcc2df6f5fabb78feac5</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>parameterSize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a90cbceb4b05b1e23bcc270cd48ef5568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a93d287cf1ccb1fcb657c1b6117e135a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ComparisonTypes_t &amp;</type>
      <name>comparisonType</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a49c291dee62ff5a78f2ca6f341823186</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aba15f76d97abbf49d4b2238bf40da6eb</anchor>
      <arglist>(const ComparisonTypes_t &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constantRightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a3310ffacad9f43ba10c481dcbcf36495</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>vectorOut_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad01a37a50fb80d428b1b1584d1e736b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vectorOut_t</type>
      <name>nonConstRightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ab997c7afc8f0ec873065b26c2b1b3e74</anchor>
      <arglist>() HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFunction</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a4ebcb5838f355fb70a0b8098ffa9416f</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;rhsF)</arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunctionPtr_t &amp;</type>
      <name>rightHandSideFunction</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a429c4df6f8856f18408c18d374e996d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>rightHandSideAt</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>abc37124d7500d3fdd7cff41d9bc71310</anchor>
      <arglist>(const value_type &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImplicitPtr_t</type>
      <name>create</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a37696e5d76eccb695598a3af8601a730</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImplicitPtr_t</type>
      <name>create</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>adb8120ada0b776c90a8070f7be191329</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypes_t comp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImplicitPtr_t</type>
      <name>create</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a00eb45475b16251e87a6a644a1dd3c0b</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypes_t comp, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImplicitPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>affc1968a51bf835544999f937c19170c</anchor>
      <arglist>(const ImplicitPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implicit</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2e2ebe54e5b56922d36995d1103be3a8</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypes_t comp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implicit</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a160e5de0a904a765b9795a2962f1880c</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypes_t comp, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implicit</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a97ae619e9dd0a1c31c5c3ac4914c99ea</anchor>
      <arglist>(const Implicit &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqual</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a73e683e37d05c82bf298594a4912d95f</anchor>
      <arglist>(const Implicit &amp;other, bool swapAndTest) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aefaa52d84e4824b9a1d377e86bf801ef</anchor>
      <arglist>(const ImplicitWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ImplicitConstraintSet</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a99468984d216262d8a0b33e7e67197ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>addaa092e7dfc12f766f8156f20398c46</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a55eddbdbd1d411fd421b8de227ccb7cc</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a36590ac58ad5d37c5a7e935f2d908a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rhsSize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a33eabd1737ffbcc2df6f5fabb78feac5</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>parameterSize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a90cbceb4b05b1e23bcc270cd48ef5568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rightHandSideSize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a93d287cf1ccb1fcb657c1b6117e135a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ComparisonTypes_t &amp;</type>
      <name>comparisonType</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a49c291dee62ff5a78f2ca6f341823186</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aba15f76d97abbf49d4b2238bf40da6eb</anchor>
      <arglist>(const ComparisonTypes_t &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constantRightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a3310ffacad9f43ba10c481dcbcf36495</anchor>
      <arglist>() const HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>vectorOut_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad01a37a50fb80d428b1b1584d1e736b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vectorOut_t</type>
      <name>nonConstRightHandSide</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ab997c7afc8f0ec873065b26c2b1b3e74</anchor>
      <arglist>() HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFunction</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a4ebcb5838f355fb70a0b8098ffa9416f</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;rhsF)</arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunctionPtr_t &amp;</type>
      <name>rightHandSideFunction</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a429c4df6f8856f18408c18d374e996d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>rightHandSideAt</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>abc37124d7500d3fdd7cff41d9bc71310</anchor>
      <arglist>(const value_type &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ImplicitConstraintSet</name>
    <filename>a00055.html</filename>
    <base>hpp::constraints::Implicit</base>
    <member kind="typedef">
      <type>std::vector&lt; ImplicitPtr_t &gt;</type>
      <name>Implicits_t</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a780e7817945d27839e14bee8d964980a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitConstraintSet</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aca05dbd8b98a5586eb79fc04818ab45f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a37816c80aaa841c7f10c90ab4f59fc86</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitConstraintSet</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a8dd43823e3cc0284e380e146fff473c0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitConstraintSet</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a1dfbb0df331b0c2ec4a2b1793bb0ff3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitConstraintSet</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a1173fcebb520b8fc7135624256f112eb</anchor>
      <arglist>(const ImplicitConstraintSet &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a8523fe7d5069dae7b4ee7926e53a32be</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>inequalityIndices</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa3cfaf5ed9b2bc4a61759e221d71aeb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::RowBlockIndices &amp;</type>
      <name>equalityIndices</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ac2ee22c6ebc287ce8679fd5bb72e39fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Implicits_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a2a6e4f3685ef30ad4e7d29685c52cb14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a8b4d7897d73db7c9c493a04de6740ea7</anchor>
      <arglist>(const ImplicitConstraintSetPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImplicitConstraintSetPtr_t</type>
      <name>create</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a4709be64be6930975f54ca72fbc366e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a8523fe7d5069dae7b4ee7926e53a32be</anchor>
      <arglist>(const ImplicitPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::size_t &gt; &amp;</type>
      <name>inequalityIndices</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa3cfaf5ed9b2bc4a61759e221d71aeb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::RowBlockIndices &amp;</type>
      <name>equalityIndices</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ac2ee22c6ebc287ce8679fd5bb72e39fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Implicits_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a2a6e4f3685ef30ad4e7d29685c52cb14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a8b4d7897d73db7c9c493a04de6740ea7</anchor>
      <arglist>(const ImplicitConstraintSetPtr_t &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::explicit_::ImplicitFunction</name>
    <filename>a00056.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImplicitFunction &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a102125412d0a3fd9a8f011d91ffc643e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunctionPtr_t &amp;</type>
      <name>inputToOutput</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a9e8baac9332e2920020cc5628aece843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>af3039855856dca9056aa5f0bfb6d1b5d</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a31215297a04d9e8938eb1ce8e2de3811</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const DifferentiableFunctionPtr_t &amp;g, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a09d917e19fcd95a067b69a800e0708c3</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;configSpace, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitFunction</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aab563be9662eed13ada4855d07d2c523</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitFunction</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>af43f61dbf0b7761a417e5cc529c41585</anchor>
      <arglist>(const LiegroupSpacePtr_t &amp;configSpace, const DifferentiableFunctionPtr_t &amp;function, const segments_t &amp;inputConf, const segments_t &amp;outputConf, const segments_t &amp;inputVelocity, const segments_t &amp;outputVelocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2e4859979cf0473dc67449541c1c9a19</anchor>
      <arglist>(LiegroupElementRef result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aa6664ee9d38444638bffb7cdcf8b5935</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::JointFrame</name>
    <filename>a00057.html</filename>
    <base>CalculusBase&lt; JointFrame, Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; JointFrame, ValueType_t, JacobianType_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a42b715ee8bf00705c7ff9d0bd39b21d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a783a3abb77643aff970fb85b348f78d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a0bd86ec76e33ae1d605eda71d75c1df5</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2f8ec475e9ce2ca03599f4ff84d9ced1</anchor>
      <arglist>(const JointFrame &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>afc89436b25b3115d3f59b46396ff31ed</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a6c060ef509100fd3978f11b266f4dcde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ac932de78c3527f190c9b128b1cf78e92</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a210b99f1557d9568d1a9af2a500f3d6f</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a29a6648618148ee342b97ae45dfb64fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>theta_</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a00abe1a40ee479be4ae3046f849cb6ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::JointTranspose</name>
    <filename>a00058.html</filename>
    <member kind="function">
      <type></type>
      <name>JointTranspose</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ac05f35252af29254295ab56c1b730eaf</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="variable">
      <type>const JointPtr_t</type>
      <name>j_</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7d788ce25246b8ddc881673a0bb38501</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::LockedJoint</name>
    <filename>a00059.html</filename>
    <base>hpp::constraints::Explicit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ImplicitPtr_t</type>
      <name>copy</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a91b2ef15f441bb62d3636d7ce07891a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rankInConfiguration</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a1337ff8de9e69a87f255c4b46057a4ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rankInVelocity</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a21715aa8c705c453c966fc94061875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>configSize</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a43cb0077355a6a27dd51811a2c1c6501</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberDof</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aff08cfe5f265a4494f28ef57362e4afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LiegroupSpacePtr_t &amp;</type>
      <name>configSpace</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad124e16a866599ee724b45cc8eec20b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>value</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aa507ccc9befa44b678086808fafcc3e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a3e509b0203f118497cb7606ff231801d</anchor>
      <arglist>(vectorIn_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a6d62c7f6c6d81372cafd6c72f58b5c09</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a0eb26d01f869ed9e055b56f83e42562a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>jointName</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a3113807bf191d3b912e3b7303de76cd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a8bc7bf5f910fc8f509a6bc87e042270c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>create</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a46a1ce06b75f236f8706a8f77684e154</anchor>
      <arglist>(const JointPtr_t &amp;joint, const LiegroupElement &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>create</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ac04e990e2f5073beff8128829359fe93</anchor>
      <arglist>(const JointPtr_t &amp;joint, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>create</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aec651b78f2e778439ef4e0f6bf65ce54</anchor>
      <arglist>(const DevicePtr_t &amp;dev, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a31a9474071f6368c0e28ccd681f3e4b3</anchor>
      <arglist>(LockedJointConstPtr_t other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a7d6833e11b504369d2aa5add8bc2aef7</anchor>
      <arglist>(const JointPtr_t &amp;joint, const LiegroupElement &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a054c087d831f756c5a19174a370ae7a2</anchor>
      <arglist>(const JointPtr_t &amp;joint, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a428346021b9be08d19a22e0a010a357b</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad2db203ee8480423bf2519d20b98e99c</anchor>
      <arglist>(const LockedJoint &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqual</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a731f0eb072b8050002b6034270a7b0f5</anchor>
      <arglist>(const Implicit &amp;other, bool swapAndTest) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a64a3e4073d02c5875d4554a5d0e0fb8f</anchor>
      <arglist>(const LockedJointPtr_t &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Manipulability</name>
    <filename>a00060.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Manipulability</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aa1718d8de2b69346a1a61809198b6355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ManipulabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aa4ee2a2380d3626eeb51fdb3c03b6627</anchor>
      <arglist>(DifferentiableFunctionPtr_t function, DevicePtr_t robot, std::string name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Manipulability</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af29aefb9afefdbb3640e722598d559d3</anchor>
      <arglist>(DifferentiableFunctionPtr_t function, DevicePtr_t robot, std::string name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a94166ddbefe3af27683f0afa0089e7e4</anchor>
      <arglist>(LiegroupElementRef result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aba87b55318ea347b97aab6afe73f0e82</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBlocks</name>
    <filename>a00061.html</filename>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <base>MatrixBlocksBase&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a589870b05f715eb98c9d30001c84d9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a9257fd68e3d76127f975c1667d4fd8a8</anchor>
      <arglist>(const segments_t &amp;rows, const segments_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a79b51016072cee73950d5ceb8a928ddb</anchor>
      <arglist>(const size_type &amp;nbRows, const RowIndices_t &amp;rows, const size_type &amp;nbCols, const ColIndices_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>add2fd97e6fd958487dd7745aa09017e5</anchor>
      <arglist>(size_type start, size_type size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a18507167f0a6dd54a7bd325896ec0448</anchor>
      <arglist>(const segments_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a2fb684f83db0eea459fdec97d2317ff9</anchor>
      <arglist>(const segment_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aef7fec6f17f11d1897a4742c4be670a2</anchor>
      <arglist>(const MatrixBlocksBase&lt; MBDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>afc415be3aa85739d5df1176c8ab97e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a5d548b84a6a45a09eca93d75af05c8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a26d3d69c4a8a2c4d892c643f66a24cfb</anchor>
      <arglist>(const size_type &amp;row, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCol</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a95847920e7ef51c894436d1ecec4ba71</anchor>
      <arglist>(const size_type &amp;col, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4c508dc0988e5daf7944be7a1f4325cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a014f9c19b9fa514ac22e11198a2c7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowIndices_t &amp;</type>
      <name>rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adc07625de69f86bb60833a49cba5e5e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColIndices_t &amp;</type>
      <name>cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad521a15fbc8c71894a9ce769ad999d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af29b384331ecefeabcf71aa7d50acef3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad52dd81bbcf82e3c840ee2ccf24b98c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateIndices</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3b49ff16fe75a4991fcb03785f5c1fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ade13e92491595e9abc3341f6bf201bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a36e16175431b050e416807987b8985b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowIndices_t</type>
      <name>m_rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab3cc784e1414388289df339cffab423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColIndices_t</type>
      <name>m_cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab1496e3e515559effc78e32ca85462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBlocks&lt; false, false &gt;</name>
    <filename>a00061.html</filename>
    <base>MatrixBlocksBase&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a589870b05f715eb98c9d30001c84d9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a9257fd68e3d76127f975c1667d4fd8a8</anchor>
      <arglist>(const segments_t &amp;rows, const segments_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a79b51016072cee73950d5ceb8a928ddb</anchor>
      <arglist>(const size_type &amp;nbRows, const RowIndices_t &amp;rows, const size_type &amp;nbCols, const ColIndices_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>add2fd97e6fd958487dd7745aa09017e5</anchor>
      <arglist>(size_type start, size_type size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a18507167f0a6dd54a7bd325896ec0448</anchor>
      <arglist>(const segments_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a2fb684f83db0eea459fdec97d2317ff9</anchor>
      <arglist>(const segment_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aef7fec6f17f11d1897a4742c4be670a2</anchor>
      <arglist>(const MatrixBlocksBase&lt; MBDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>afc415be3aa85739d5df1176c8ab97e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a5d548b84a6a45a09eca93d75af05c8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a26d3d69c4a8a2c4d892c643f66a24cfb</anchor>
      <arglist>(const size_type &amp;row, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCol</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a95847920e7ef51c894436d1ecec4ba71</anchor>
      <arglist>(const size_type &amp;col, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4c508dc0988e5daf7944be7a1f4325cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a014f9c19b9fa514ac22e11198a2c7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowIndices_t &amp;</type>
      <name>rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adc07625de69f86bb60833a49cba5e5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColIndices_t &amp;</type>
      <name>cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad521a15fbc8c71894a9ce769ad999d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af29b384331ecefeabcf71aa7d50acef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad52dd81bbcf82e3c840ee2ccf24b98c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateIndices</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3b49ff16fe75a4991fcb03785f5c1fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ade13e92491595e9abc3341f6bf201bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a36e16175431b050e416807987b8985b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowIndices_t</type>
      <name>m_rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab3cc784e1414388289df339cffab423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColIndices_t</type>
      <name>m_cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab1496e3e515559effc78e32ca85462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBlocks&lt; false, true &gt;</name>
    <filename>a00061.html</filename>
    <base>MatrixBlocksBase&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a589870b05f715eb98c9d30001c84d9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a9257fd68e3d76127f975c1667d4fd8a8</anchor>
      <arglist>(const segments_t &amp;rows, const segments_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a79b51016072cee73950d5ceb8a928ddb</anchor>
      <arglist>(const size_type &amp;nbRows, const RowIndices_t &amp;rows, const size_type &amp;nbCols, const ColIndices_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>add2fd97e6fd958487dd7745aa09017e5</anchor>
      <arglist>(size_type start, size_type size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a18507167f0a6dd54a7bd325896ec0448</anchor>
      <arglist>(const segments_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a2fb684f83db0eea459fdec97d2317ff9</anchor>
      <arglist>(const segment_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aef7fec6f17f11d1897a4742c4be670a2</anchor>
      <arglist>(const MatrixBlocksBase&lt; MBDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>afc415be3aa85739d5df1176c8ab97e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a5d548b84a6a45a09eca93d75af05c8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a26d3d69c4a8a2c4d892c643f66a24cfb</anchor>
      <arglist>(const size_type &amp;row, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCol</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a95847920e7ef51c894436d1ecec4ba71</anchor>
      <arglist>(const size_type &amp;col, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4c508dc0988e5daf7944be7a1f4325cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a014f9c19b9fa514ac22e11198a2c7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowIndices_t &amp;</type>
      <name>rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adc07625de69f86bb60833a49cba5e5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColIndices_t &amp;</type>
      <name>cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad521a15fbc8c71894a9ce769ad999d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af29b384331ecefeabcf71aa7d50acef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad52dd81bbcf82e3c840ee2ccf24b98c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateIndices</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3b49ff16fe75a4991fcb03785f5c1fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ade13e92491595e9abc3341f6bf201bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a36e16175431b050e416807987b8985b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowIndices_t</type>
      <name>m_rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab3cc784e1414388289df339cffab423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColIndices_t</type>
      <name>m_cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab1496e3e515559effc78e32ca85462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBlocks&lt; true, false &gt;</name>
    <filename>a00061.html</filename>
    <base>MatrixBlocksBase&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a589870b05f715eb98c9d30001c84d9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a9257fd68e3d76127f975c1667d4fd8a8</anchor>
      <arglist>(const segments_t &amp;rows, const segments_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a79b51016072cee73950d5ceb8a928ddb</anchor>
      <arglist>(const size_type &amp;nbRows, const RowIndices_t &amp;rows, const size_type &amp;nbCols, const ColIndices_t &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>add2fd97e6fd958487dd7745aa09017e5</anchor>
      <arglist>(size_type start, size_type size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a18507167f0a6dd54a7bd325896ec0448</anchor>
      <arglist>(const segments_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a2fb684f83db0eea459fdec97d2317ff9</anchor>
      <arglist>(const segment_t &amp;idx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlocks</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aef7fec6f17f11d1897a4742c4be670a2</anchor>
      <arglist>(const MatrixBlocksBase&lt; MBDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>afc415be3aa85739d5df1176c8ab97e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a5d548b84a6a45a09eca93d75af05c8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a26d3d69c4a8a2c4d892c643f66a24cfb</anchor>
      <arglist>(const size_type &amp;row, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCol</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a95847920e7ef51c894436d1ecec4ba71</anchor>
      <arglist>(const size_type &amp;col, const size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4c508dc0988e5daf7944be7a1f4325cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a014f9c19b9fa514ac22e11198a2c7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowIndices_t &amp;</type>
      <name>rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adc07625de69f86bb60833a49cba5e5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColIndices_t &amp;</type>
      <name>cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad521a15fbc8c71894a9ce769ad999d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af29b384331ecefeabcf71aa7d50acef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad52dd81bbcf82e3c840ee2ccf24b98c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateIndices</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3b49ff16fe75a4991fcb03785f5c1fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbRows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ade13e92491595e9abc3341f6bf201bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbCols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a36e16175431b050e416807987b8985b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowIndices_t</type>
      <name>m_rows</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab3cc784e1414388289df339cffab423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColIndices_t</type>
      <name>m_cols</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab1496e3e515559effc78e32ca85462fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBlocksBase</name>
    <filename>a00062.html</filename>
    <templarg>Derived</templarg>
    <class kind="struct">Eigen::MatrixBlocksBase::View</class>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3a620fff6a40140c80e470a7cb53d644ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3ad1c9910b313994d65546f85c128f3e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneDimension</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3a456117fbb42415a516289683ec7385db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::constraints::size_type</type>
      <name>size_type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a50936abbede4e5dc445f569467a2eb30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockIndex::segment_t</type>
      <name>segment_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a39c9b322d11e52f756d73434fa0eabd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockIndex::segments_t</type>
      <name>segments_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a0c0e06684befa5f690da514b0ce087b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::RowIndices_t</type>
      <name>RowIndices_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a025530f89e097d160e1fa8787ec6f986</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::ColIndices_t</type>
      <name>ColIndices_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a6947e3d122f17d9545031c5e3e17c1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3a620fff6a40140c80e470a7cb53d644ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3ad1c9910b313994d65546f85c128f3e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneDimension</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3a456117fbb42415a516289683ec7385db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived const &amp;</type>
      <name>derived</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a905755c0100c2b3b2c38e81c08a66c73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac66993c5cfca926a784b5f4fad68001c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE View&lt; MatrixType &gt;::type</type>
      <name>lview</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a1194e5d3326fd49fc18c9425f8659a76</anchor>
      <arglist>(const MatrixBase&lt; MatrixType &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE View&lt; const MatrixType &gt;::type</type>
      <name>rview</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a36278eba9d451663f61c09bf2dc20eba</anchor>
      <arglist>(const MatrixBase&lt; MatrixType &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocksRef&lt; AllCols, AllRows &gt;</type>
      <name>transpose</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2a8b7c497513dd3791d58f1649b4f98b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocksRef&lt; AllRows, true &gt;</type>
      <name>keepRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac47059b64ec47763ea141cf2b6855f4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocksRef&lt; true, AllCols &gt;</type>
      <name>keepCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aeff1c44865da27ca3641d95f2e91d9e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const segments_t &amp;</type>
      <name>indices</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a15986218fac462d728c54b862a3dbdca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowIndices_t &amp;</type>
      <name>rows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aca23e9583549888289c0cb82a19317ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColIndices_t &amp;</type>
      <name>cols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a4eee1f32036e6286e0953c87a2f6200a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbIndices</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a00fcfdd952e219c8f9d02ca93e7f8d33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adee27a98ecafdb67b8263bed4773fda6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2433be915ba5a76d49e5f1609cc838bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; AllRows, AllCols &gt;</type>
      <name>block</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a38fd86560644394e0f92d6b442f6051f</anchor>
      <arglist>(size_type i, size_type j, size_type ni, size_type nj) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; AllRows, AllCols &gt;</type>
      <name>middleRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a3bdb6ab754ebcec7d6759ecd5c066553</anchor>
      <arglist>(size_type i, size_type ni) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; AllRows, AllCols &gt;</type>
      <name>middleCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5b7b7d429b8ef05eb768ec5985405d4a</anchor>
      <arglist>(size_type j, size_type nj) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MatrixBlocksBase</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2412c4dc89a27543c346a2a87d2ee373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MatrixBlocksBase</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a19e5187f948519083f6cc9918888ebc7</anchor>
      <arglist>(const MatrixBlocksBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBlocksBase&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</name>
    <filename>a00062.html</filename>
    <member kind="typedef">
      <type>hpp::constraints::size_type</type>
      <name>size_type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a50936abbede4e5dc445f569467a2eb30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockIndex::segment_t</type>
      <name>segment_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a39c9b322d11e52f756d73434fa0eabd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockIndex::segments_t</type>
      <name>segments_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a0c0e06684befa5f690da514b0ce087b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;::RowIndices_t</type>
      <name>RowIndices_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a025530f89e097d160e1fa8787ec6f986</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;::ColIndices_t</type>
      <name>ColIndices_t</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a6947e3d122f17d9545031c5e3e17c1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3a620fff6a40140c80e470a7cb53d644ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3ad1c9910b313994d65546f85c128f3e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneDimension</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5afef142c79e7da902541e20cdef3ff3a456117fbb42415a516289683ec7385db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; _allRows, _allCols &gt;const &amp;</type>
      <name>derived</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a905755c0100c2b3b2c38e81c08a66c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; _allRows, _allCols &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac66993c5cfca926a784b5f4fad68001c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE View&lt; MatrixType &gt;::type</type>
      <name>lview</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a1194e5d3326fd49fc18c9425f8659a76</anchor>
      <arglist>(const MatrixBase&lt; MatrixType &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE View&lt; const MatrixType &gt;::type</type>
      <name>rview</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a36278eba9d451663f61c09bf2dc20eba</anchor>
      <arglist>(const MatrixBase&lt; MatrixType &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocksRef&lt; AllCols, AllRows &gt;</type>
      <name>transpose</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2a8b7c497513dd3791d58f1649b4f98b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocksRef&lt; AllRows, true &gt;</type>
      <name>keepRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac47059b64ec47763ea141cf2b6855f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocksRef&lt; true, AllCols &gt;</type>
      <name>keepCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aeff1c44865da27ca3641d95f2e91d9e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const segments_t &amp;</type>
      <name>indices</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a15986218fac462d728c54b862a3dbdca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RowIndices_t &amp;</type>
      <name>rows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aca23e9583549888289c0cb82a19317ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColIndices_t &amp;</type>
      <name>cols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a4eee1f32036e6286e0953c87a2f6200a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbIndices</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a00fcfdd952e219c8f9d02ca93e7f8d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adee27a98ecafdb67b8263bed4773fda6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const size_type &amp;</type>
      <name>nbCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2433be915ba5a76d49e5f1609cc838bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; AllRows, AllCols &gt;</type>
      <name>block</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a38fd86560644394e0f92d6b442f6051f</anchor>
      <arglist>(size_type i, size_type j, size_type ni, size_type nj) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; AllRows, AllCols &gt;</type>
      <name>middleRows</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a3bdb6ab754ebcec7d6759ecd5c066553</anchor>
      <arglist>(size_type i, size_type ni) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBlocks&lt; AllRows, AllCols &gt;</type>
      <name>middleCols</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5b7b7d429b8ef05eb768ec5985405d4a</anchor>
      <arglist>(size_type j, size_type nj) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MatrixBlocksBase</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2412c4dc89a27543c346a2a87d2ee373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MatrixBlocksBase</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a19e5187f948519083f6cc9918888ebc7</anchor>
      <arglist>(const MatrixBlocksBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBlocksRef</name>
    <filename>a00063.html</filename>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBlockView</name>
    <filename>a00064.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <class kind="struct">Eigen::MatrixBlockView::block_iterator</class>
    <class kind="struct">Eigen::MatrixBlockView::block_t</class>
    <member kind="enumvalue">
      <name>Rows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47ab39f86b99de800abb750f51f67a3e6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47a2c77c78ecc720741e66aac9acf592889</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47ab48c29e044a3f7f3d06d5315b8a115d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47a1f988938994652c5f789efbc9089df13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::constraints::size_type</type>
      <name>size_type</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a5db580e935efd4ce7f23cadcc22eff59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</type>
      <name>Base</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>afd29175320facb7860c2258f59f16af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, RowsAtCompileTime, ColsAtCompileTime &gt;</type>
      <name>PlainObject</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>adc21151c26bc7b92a3871afe5907e297</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_ArgType</type>
      <name>ArgType</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac629a9aed6a1cc2d6e922d0e9651a082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::ref_selector&lt; ArgType &gt;::type</type>
      <name>ArgTypeNested</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a186c5382019dfa4b5df5237bf2570274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::remove_all&lt; ArgType &gt;::type</type>
      <name>NestedExpression</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a0ac4cd738224ada45fe072aab931b914</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>block_t&lt; ArgType &gt;::type</type>
      <name>BlockXprType</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a910745579ad44940c21fdc788a440cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>block_t&lt; const ArgType &gt;::type</type>
      <name>BlockConstXprType</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a67659eb773b5f84d9f48f62728eb07a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBlocks&lt; _allRows, _allCols &gt;</type>
      <name>MatrixIndices_t</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>abf557e61ab891c472f275b71a3222514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixIndices_t::segments_t</type>
      <name>Indices_t</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ade8ee7208edd80d3dd63378fb5f31497</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; _allRows, const internal::empty_struct, const Indices_t &amp; &gt;::type</type>
      <name>RowIndices_t</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a5d58e0dafa003829a8eb1e8c6b28ad00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; _allCols, const internal::empty_struct, const Indices_t &amp; &gt;::type</type>
      <name>ColIndices_t</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a20fa5a32714d0b5e5d90ec3d7800060d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47ab39f86b99de800abb750f51f67a3e6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47a2c77c78ecc720741e66aac9acf592889</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47ab48c29e044a3f7f3d06d5315b8a115d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac7d3922d27597f325aeec88a7fb56e47a1f988938994652c5f789efbc9089df13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlockView</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad27a07c882e52f6665613c17011d5c83</anchor>
      <arglist>(ArgType &amp;arg, const size_type &amp;nbRows, const RowIndices_t rows, const size_type &amp;nbCols, const ColIndices_t cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBlockView</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a0dcd18e4401688dcd0fe438baf1b2c4f</anchor>
      <arglist>(ArgType &amp;arg, const size_type &amp;nbIndices, const Indices_t &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE size_type</type>
      <name>rows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>abc45a8d30a6ac4926c712d05778e0ce9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE size_type</type>
      <name>cols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a40e7b904876d7557f37e04f0a64f2e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a2ae14fd774bba7558941adf6f91aed5c</anchor>
      <arglist>(size_type index) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>afca1704267fd54935ded67dc50322286</anchor>
      <arglist>(size_type row, size_type col) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a150f173f8d1a6babc879062f1bdff3e1</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad4bde564379c81cfb4288cb10d6889c5</anchor>
      <arglist>(size_type row, const size_type &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE void</type>
      <name>evalTo</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a57d66aec28eabcdce5a240d165b10bd3</anchor>
      <arglist>(Dest &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE void</type>
      <name>writeTo</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa3819cedd0a8d1aae9bf23c9e3b7472a</anchor>
      <arglist>(Dest &amp;dst) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE PlainObject</type>
      <name>eval</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa8a03a3479393aa90de4e83e1e581bc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE MatrixBlockView &amp;</type>
      <name>operator=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a232e4f9ccd5827d507e3f85bd45168fb</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE size_type</type>
      <name>_blocks</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a035e5227788facc6c87fa4cf56e6b4f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE BlockXprType</type>
      <name>_block</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a2fb9164d6ac40913012e7c8fabef6ce2</anchor>
      <arglist>(const block_iterator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const BlockConstXprType</type>
      <name>_block</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a53e259910aa6aef27f01794454a3a999</anchor>
      <arglist>(const block_iterator &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE block_iterator</type>
      <name>_block_iterator</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7f0c28efcb0b66b28806f53661d8e046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE bool</type>
      <name>isZero</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aec45755d4a380b519faee79cee7cd9b3</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="variable">
      <type>ArgType &amp;</type>
      <name>m_arg</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a547f064b09b049e0f7e5c9a840b43f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbRows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa6818270ac0d751c334c25bc9ba12f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RowIndices_t</type>
      <name>m_rows</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a70dee1ca4ce817f20ba326c11c49df2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>m_nbCols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac8f501d04062bacbb2c3dc7947d19fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColIndices_t</type>
      <name>m_cols</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa62826c2f79cdb2935de7588a2123ed0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::MatrixOfExpressions</name>
    <filename>a00065.html</filename>
    <templarg>ValueType</templarg>
    <templarg>JacobianType</templarg>
    <base>CalculusBase&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Value_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>add6dea366898dcdeeb3d93fb90d42c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Jacobian_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a3fadca3fd8212fb6393f0f9389528d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInv_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4ee5f376168ea1a3a0e942d769bbc240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInvJacobian_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a857f2d847e95191afaa1fc550d17e0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBase&lt; MatrixOfExpressions, Value_t, Jacobian_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a3acf5fcfbf82e506ba8c17b7e9289a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBaseAbstract&lt; ValueType, JacobianType &gt;</type>
      <name>Element_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af936590aa687a35fe0fc95c91aac0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits&lt; Element_t &gt;::Ptr_t</type>
      <name>ElementPtr_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7090f89ba9b02664cfd551902f9006ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiSVD&lt; Value_t &gt;</type>
      <name>SVD_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae9cb2206d27009f9fe38d00e42f26599</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a005eedb77d2c6019ff7ada2d8afb838c</anchor>
      <arglist>(const Eigen::Ref&lt; const Value_t &gt; &amp;value, const Eigen::Ref&lt; const Jacobian_t &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae5a19c6def4790b2a38d47b720c80c3b</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a712915eb469563940187be9da0a90e45</anchor>
      <arglist>(const MatrixOfExpressions &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a00e6d1d85c123a4fed4f0cfbb7896c5a</anchor>
      <arglist>(std::size_t nRows, std::size_t nCols)</arglist>
    </member>
    <member kind="function">
      <type>ElementPtr_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aeb6d33701c04da21b9a6f2e143283dad</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aed27e825409a3b6b3fe9e419308009fc</anchor>
      <arglist>(std::size_t i, std::size_t j, const ElementPtr_t ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aed89d1479e2a53d4e0f76479fe698a74</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aeb40174392f7327b28e0ccea792c1515</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>const PseudoInv_t &amp;</type>
      <name>pinv</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>adc9e8a71396f9f313d9d56f376bb1e75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PseudoInvJacobian_t &amp;</type>
      <name>pinvJacobian</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad367ea9a28d94c646a49eb94a019ca5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSVD</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aff4d59a21bc29f2d744b4e2b33f958ad</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverse</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aac6e286cdfa029ebd9b60c1b7bea7e61</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverseJacobian</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7571e0c95546d4f85bbcd4e2c0ecd220</anchor>
      <arglist>(const ConfigurationIn_t arg, const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTimes</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a1bb4a01895221f364d288783c5c88ce9</anchor>
      <arglist>(const ConfigurationIn_t arg, const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTransposeTimes</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4a22d372eb37f2a78866ec2c3576a041</anchor>
      <arglist>(const ConfigurationIn_t arg, const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::JacobiSVD&lt; Value_t &gt; &amp;</type>
      <name>svd</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a36eafc1c68543feea5df04e59bb7c6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>adaf51f8eda064f7fd89f3f90523d1c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nRows_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af622b9c323af91caa7d646220246cfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nCols_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a48d45c27060002c04751c42cd588d1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; ElementPtr_t &gt; &gt;</type>
      <name>elements_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a6db0caf6699335f60347e636309ae453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt;</name>
    <filename>a00065.html</filename>
    <base>CalculusBase&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Value_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>add6dea366898dcdeeb3d93fb90d42c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Jacobian_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a3fadca3fd8212fb6393f0f9389528d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInv_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4ee5f376168ea1a3a0e942d769bbc240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInvJacobian_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a857f2d847e95191afaa1fc550d17e0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBase&lt; MatrixOfExpressions, Value_t, Jacobian_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a3acf5fcfbf82e506ba8c17b7e9289a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</type>
      <name>Element_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af936590aa687a35fe0fc95c91aac0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits&lt; Element_t &gt;::Ptr_t</type>
      <name>ElementPtr_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7090f89ba9b02664cfd551902f9006ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiSVD&lt; Value_t &gt;</type>
      <name>SVD_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae9cb2206d27009f9fe38d00e42f26599</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a005eedb77d2c6019ff7ada2d8afb838c</anchor>
      <arglist>(const Eigen::Ref&lt; const Value_t &gt; &amp;value, const Eigen::Ref&lt; const Jacobian_t &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae5a19c6def4790b2a38d47b720c80c3b</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a712915eb469563940187be9da0a90e45</anchor>
      <arglist>(const MatrixOfExpressions &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a00e6d1d85c123a4fed4f0cfbb7896c5a</anchor>
      <arglist>(std::size_t nRows, std::size_t nCols)</arglist>
    </member>
    <member kind="function">
      <type>ElementPtr_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aeb6d33701c04da21b9a6f2e143283dad</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aed27e825409a3b6b3fe9e419308009fc</anchor>
      <arglist>(std::size_t i, std::size_t j, const ElementPtr_t ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aed89d1479e2a53d4e0f76479fe698a74</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aeb40174392f7327b28e0ccea792c1515</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>const PseudoInv_t &amp;</type>
      <name>pinv</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>adc9e8a71396f9f313d9d56f376bb1e75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PseudoInvJacobian_t &amp;</type>
      <name>pinvJacobian</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad367ea9a28d94c646a49eb94a019ca5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSVD</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aff4d59a21bc29f2d744b4e2b33f958ad</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverse</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aac6e286cdfa029ebd9b60c1b7bea7e61</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverseJacobian</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7571e0c95546d4f85bbcd4e2c0ecd220</anchor>
      <arglist>(const ConfigurationIn_t arg, const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTimes</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a1bb4a01895221f364d288783c5c88ce9</anchor>
      <arglist>(const ConfigurationIn_t arg, const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTransposeTimes</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4a22d372eb37f2a78866ec2c3576a041</anchor>
      <arglist>(const ConfigurationIn_t arg, const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::JacobiSVD&lt; Value_t &gt; &amp;</type>
      <name>svd</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a36eafc1c68543feea5df04e59bb7c6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>adaf51f8eda064f7fd89f3f90523d1c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nRows_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af622b9c323af91caa7d646220246cfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nCols_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a48d45c27060002c04751c42cd588d1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; ElementPtr_t &gt; &gt;</type>
      <name>elements_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a6db0caf6699335f60347e636309ae453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::function::OfParameterSubset</name>
    <filename>a00066.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" static="yes">
      <type>static OfParameterSubsetPtr_t</type>
      <name>create</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ab62fb5b5fb2ba427bc7c73934ae86c42</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;g, const size_type &amp;nArgs, const size_type &amp;nDers, const segment_t &amp;inArgs, const segment_t &amp;inDers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OfParameterSubset</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>afa9b115a14a74662a8089839875dd9a5</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;g, const size_type &amp;nArgs, const size_type &amp;nDers, const segment_t &amp;inArgs, const segment_t &amp;inDers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aced22846dcf9fd73778a2b5da6d33afd</anchor>
      <arglist>(LiegroupElementRef y, vectorIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a52c43827777eac44b1c50b4f2e509453</anchor>
      <arglist>(matrixOut_t J, vectorIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2d87a73a8571a14306033073b4717af3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DifferentiableFunctionPtr_t</type>
      <name>g_</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ac76254e5128e7aa52f0cd21434161ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const segment_t</type>
      <name>sa_</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a89c7251b2bd529b0d37351b488e57108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const segment_t</type>
      <name>sd_</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>af9c4b37c0b6bb3e1e151a666d5efef53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Point</name>
    <filename>a00067.html</filename>
    <base>CalculusBase&lt; Point, vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0d011181ccdcb99779caea5d12b50b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a7fb3debaebc301e4c1f523f61ba10494</anchor>
      <arglist>(const CalculusBase&lt; Point, vector3_t, JacobianMatrix &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad5362bf2a0385b9b7bd5be4287de14d3</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a682fda7c44ff7072cc3fe2fef05ea287</anchor>
      <arglist>(const vector3_t &amp;point, size_t jacobianNbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a350d8ded956dd6e8bd87537e62b85be6</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>acee4db237d439c2ba88149d38666c7f3</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::PointCom</name>
    <filename>a00068.html</filename>
    <base>CalculusBase&lt; PointCom, vector3_t, ComJacobian_t &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; PointCom, vector3_t, ComJacobian_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8008f9c69e47a6622174c88201e8d50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCom</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a64999de79ae48eed3f19ac8e46a89b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCom</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a727630834dce3cce7a0173ff861403e0</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCom</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a493b0e7adafdebf449c39845cc30c826</anchor>
      <arglist>(const CenterOfMassComputationPtr_t &amp;comc)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1c8f746358783294c370af73957ecccc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ComJacobian_t &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1e7cfd682491d1e601369bcadb312c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CenterOfMassComputationPtr_t &amp;</type>
      <name>centerOfMassComputation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a77b36714abbeb0f295fc3c1b1c54bbb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0dc6f0a0ccd67165065190d494fda817</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ac49a2c02fdbf2a59fcfb6b9ea57153bb</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CenterOfMassComputationPtr_t</type>
      <name>comc_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab67879fa13d6303f0df18f2a57d1e122</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::PointInJoint</name>
    <filename>a00069.html</filename>
    <base>CalculusBase&lt; PointInJoint &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; PointInJoint &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae76772fb1ce19ed1ae389c2d24756171</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a364ae756dbc3efcb5e82316cc50f3668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa6f2d86868001c86c1512bfc570d3675</anchor>
      <arglist>(const CalculusBase&lt; PointInJoint &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a3e67fea498f1fb2bf15564a35cede0c4</anchor>
      <arglist>(const PointInJoint &amp;pointInJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ab0bb23e69b7c8307648b3f25e5cfaeeb</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9333480e26339ad6333b667f48fe2213</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame, size_type nbDof)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a2cdbc92f6822f742b21cc972048e667b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>local</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7d9db5bd4d76b199f9ec360a512ab885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a037a4e412da73b4523947f7ff43d14f8</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>adff0df82fece09b5040744bcd3aea9fc</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossRXl</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ad83a7490d0656d6929d20013ee4060bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1f23fd1cfde887638abc375ae778756f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>local_</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a23e92b5de9da7c0d0f77077d4c656faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>center_</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a97ae84972553b963b5c15de31335cfc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::prettyPrint&lt; constraints::segment_t, Option &gt;</name>
    <filename>a00070.html</filename>
    <templarg>Option</templarg>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>run</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a729d97cc4d0a46994fb86a262f72627f</anchor>
      <arglist>(std::ostream &amp;os, const constraints::segment_t &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::prettyPrint&lt; Eigen::BlockIndex::segments_t, Option &gt;</name>
    <filename>a00071.html</filename>
    <templarg>Option</templarg>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>run</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a368aea861323527361331c3bc8c64ee4</anchor>
      <arglist>(std::ostream &amp;os, const constraints::segments_t &amp;segs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::print_indices</name>
    <filename>a00072.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>run</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a15422813db6f5af74776be23caa3c04d</anchor>
      <arglist>(std::ostream &amp;os, const BlockIndexType &amp;bi)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::QPStaticStability</name>
    <filename>a00073.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>StaticStability::Contact_t</type>
      <name>Contact_t</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a8c9ea0e94c63542be38983d00184a4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticStability::Contacts_t</type>
      <name>Contacts_t</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a16c5bae0b832b561302532e1e603fd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConvexShapeContact::ForceData</type>
      <name>ForceData</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a1bbf2b5e9ee3a6a1c12d380b0ed6d8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPStaticStability</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>aca26c7bd42a114a2cc9612249ab91c92</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPStaticStability</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ab8e2ef39ce8fa7151f7bfcedecf454a4</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const std::vector&lt; ForceData &gt; &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOfExpressions &amp;</type>
      <name>phi</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a1fbc612377817a96bf51bc03442ded6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QPStaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a100791026a62806d1117089ba1dcbdea</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QPStaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a966f1de637659ee42eba5c10c5b0db4e</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const std::vector&lt; ForceData &gt; &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QPStaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a581164016ea1d419f001050dd06539d3</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>Gravity</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a25127a45b7af942577ceb8d34f04e5f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RelativeCom</name>
    <filename>a00074.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RelativeCom</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>afa955d091c18c54b5dddf4324a46d121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCom</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad725c720ef873119869d2a30abf975a9</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>adb1d729a60b564044bdb4bec04f0f8bd</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW RelativeComPtr_t</type>
      <name>create</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0b1d583e31cb5d184e16325bee628159</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(3, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeComPtr_t</type>
      <name>create</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a199915536b77d22e8a53d86d28640197</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(3, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeComPtr_t</type>
      <name>create</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af853c2f6ba2607c197a0362acefc9c89</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(3, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeComPtr_t</type>
      <name>create</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7e2c0fa8ae78224f1b30d1f94dbc0229</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(3, true))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>acb3c52f9e5c3271dd249e35e08604175</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af6574e64e997c3cf3e0cad9c7ee97089</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::explicit_::RelativePose</name>
    <filename>a00075.html</filename>
    <base>hpp::constraints::Explicit</base>
    <base>hpp::constraints::implicit::RelativePose</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ImplicitPtr_t</type>
      <name>copy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a5fe2b2598ad2ae8c0a80b0dcd8e195e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>implicitToExplicitRhs</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7620920784926137ea7d38cb390a6004</anchor>
      <arglist>(vectorIn_t implicitRhs, vectorOut_t explicitRhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativePosePtr_t</type>
      <name>create</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a29800271c84af5e5c3a2eb1c915a3b53</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(6, true), ComparisonTypes_t comp=std::vector&lt; ComparisonType &gt;(), vectorIn_t rhs=vector_t())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativePosePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa9d09abf432a988057a55139e079686a</anchor>
      <arglist>(const RelativePosePtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativePose</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a877a9505775c092d3823431884cca447</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(6, true), ComparisonTypes_t comp=std::vector&lt; ComparisonType &gt;(), vectorIn_t rhs=vector_t())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativePose</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aab1f23c261f475958e5ff95d95eb567d</anchor>
      <arglist>(const RelativePose &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af364811e10136120ae8e48fe2c0f2312</anchor>
      <arglist>(RelativePoseWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::implicit::RelativePose</name>
    <filename>a00076.html</filename>
    <base virtualness="virtual">hpp::constraints::Implicit</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ImplicitPtr_t</type>
      <name>copy</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada66e482ae7637068ea1cc00b06b03f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointConstPtr_t &amp;</type>
      <name>joint1</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a659caeb1716012a153f2fdb89b5469ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointConstPtr_t &amp;</type>
      <name>joint2</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a86cc73064a9082842d8c39502553eadf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativePosePtr_t</type>
      <name>create</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a416a25828a896537f5cab49f9aef4299</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(6, true), ComparisonTypes_t comp=std::vector&lt; ComparisonType &gt;(), vectorIn_t rhs=vector_t())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativePosePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>add034b36e108ae6f74db6a8f6bed6de4</anchor>
      <arglist>(const RelativePosePtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativePose</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ac783a8c4c3a3e8d9ea65486d1cd98997</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(6, true), ComparisonTypes_t comp=std::vector&lt; ComparisonType &gt;(), vectorIn_t rhs=vector_t())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativePose</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a3c96982b73a4f1dc0849fe6ac2b6255d</anchor>
      <arglist>(const RelativePose &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1e878b00e381d956ed04f414a94aaac3</anchor>
      <arglist>(RelativePoseWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::explicit_::RelativeTransformation</name>
    <filename>a00077.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function">
      <type>const JointConstPtr_t &amp;</type>
      <name>joint1</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2356ddd6f3390da099589e54f6306cfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointConstPtr_t &amp;</type>
      <name>joint2</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2ee0e65bfc70561ef94b2a174de22c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a902553217e44b05342fbd4562a378032</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::BlockIndex</type>
      <name>BlockIndex</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2faade1549697e8c0a03070b798adaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::RowBlockIndices</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1577dd981c4e6b4ec57e34f8ef1d9ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::ColBlockIndices</type>
      <name>ColBlockIndices</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a784565ac241f631bb030da8802de615d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativeTransformation</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a13a62e18f5b08e9cc091206e3bb7c993</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointConstPtr_t &amp;joint1, const JointConstPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, const segments_t inConf, const segments_t outConf, const segments_t inVel, const segments_t outVel, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(6, true))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativeTransformation</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>afccbeb45c291cf2b6d3180e5bad5698f</anchor>
      <arglist>(const RelativeTransformation &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0c14d6f8eabd3671fea91757f7ba4903</anchor>
      <arglist>(const RelativeTransformationWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_compute</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4ea5ecd22ac8186ffcaedf4b78b0d6ef</anchor>
      <arglist>(LiegroupElementRef result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a84be490b46e36c23509ff7eaf58aec80</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::return_first</name>
    <filename>a00078.html</filename>
    <templarg>row</templarg>
    <member kind="function" static="yes">
      <type>static First &amp;</type>
      <name>run</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>afecb2263cf3b5334a4c635ebb46c98e0</anchor>
      <arglist>(First &amp;f, Second &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::return_first&lt; false &gt;</name>
    <filename>a00079.html</filename>
    <member kind="function" static="yes">
      <type>static Second &amp;</type>
      <name>run</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ac6cc535c0138a78f8e7ba8af2f216751</anchor>
      <arglist>(First &amp;, Second &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RotationMultiply</name>
    <filename>a00080.html</filename>
    <templarg></templarg>
    <base>CalculusBase&lt; RotationMultiply&lt; RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; RotationMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a046322706509f7a558f677d56c08bc08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>af70a00819c48781a96057c12c77da72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a0acbb4792b7928aecd804ed83dcf1fb5</anchor>
      <arglist>(const CalculusBase&lt; RotationMultiply &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a6c1505bb0d02856e90d850e07bc70059</anchor>
      <arglist>(const typename Traits&lt; JointTranspose &gt;::Ptr_t &amp;joint, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa7914b6be2cb0c3cbf26ef1a8d23ec18</anchor>
      <arglist>(const typename Traits&lt; pinocchio::Joint &gt;::Ptr_t &amp;joint, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a6c33c048a7ec51c39b24692e605a45f5</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa0b6f0589bc9f358769b80c7920f27e5</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a84515153916909747dc613c7ad625cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; pinocchio::Joint, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a0a746f9d98717963c541a775e2671f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Expression&lt; pinocchio::Joint, RhsValue &gt;</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a91308a3682b30b5a0c90c55bd59e9151</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ScalarMultiply</name>
    <filename>a00081.html</filename>
    <templarg></templarg>
    <base>CalculusBase&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a1f67e8d6e29abc09f31b450317a34e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarMultiply</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a318f0f7b405f8e5c8b9b516253afe1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarMultiply</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a5fa833fc8956f6598d197679573477e9</anchor>
      <arglist>(const CalculusBase&lt; ScalarMultiply &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarMultiply</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a47066b7735dd54a72ab7de1cd2653630</anchor>
      <arglist>(const typename Traits&lt; value_type &gt;::Ptr_t &amp;scalar, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a78f8882249c245d37a67a7349f66ea6b</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ad8430b9d6720652b68bbfea33cc43f88</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a92ce40e51dd0485cc74f3f397e9f55e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; value_type, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aca1bebfe7dbb1d3ec68c29c2e0a89b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; value_type, RhsValue &gt;</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a0a02d3b743c2cdce40f033b06b66bebe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ScalarProduct</name>
    <filename>a00082.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; ScalarProduct&lt; LhsValue, RhsValue &gt;, value_type, RowJacobianMatrix &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; ScalarProduct&lt; LhsValue, RhsValue &gt;, value_type, RowJacobianMatrix &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa1e682a0a35d1fb55a1c5b55567b7da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarProduct</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad6053e0ea1c10b480d1c9b660a0d3f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarProduct</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aec84176f5c4ecb555cbaa7b49730bbd5</anchor>
      <arglist>(const CalculusBase&lt; ScalarProduct &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarProduct</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>adcee34183c3a2e8251bfa61430111d1a</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a955f9a8015ab1f46837082da59d7ec8f</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a722d7e5de8e2c6229c3a000a573b3e51</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4a1fba1da665e774f6f84b6528723622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3207338fec26f20c1292c31455301d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::StaticStability</name>
    <filename>a00083.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <class kind="struct">hpp::constraints::StaticStability::Contact_t</class>
    <member kind="typedef">
      <type>std::vector&lt; Contact_t &gt;</type>
      <name>Contacts_t</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a54eaebe0159ac304ae434fab84cbac10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticStability</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0eb3eb225bc600096756075cfd3dda33</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOfExpressions &amp;</type>
      <name>phi</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0a167782bbf9b5c00f667465874b707e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a73b298cfc7c290f6f32d2d3918261e13</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a075764bc79d00afccc97b63409f06fff</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const value_type</type>
      <name>G</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa02efa92a06c4639d7af0c82c70a5aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>Gravity</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a2068156d25bbd9fce7a6433134deb3b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Sum</name>
    <filename>a00084.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aaf9bc15e07818d98fd6eed0619f192dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sum</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>acb3a0e886929774b9457b2a20a846de6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sum</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>acf8e2d8a0b7f75b38624d60216f9664a</anchor>
      <arglist>(const CalculusBase&lt; Sum &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sum</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a9746800f6670f0024adae2b5f557a618</anchor>
      <arglist>(const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs, const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ad8874927a47bb3eaa96b7a43b9c6e1d2</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a88359657b56720f0251ffb7fe33a57fc</anchor>
      <arglist>(const ConfigurationIn_t arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aabb563179e7ceb681586bb15133e7793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a0d1447946d5d3b43574900c2abd00a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::SymbolicFunction</name>
    <filename>a00085.html</filename>
    <templarg></templarg>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SymbolicFunction &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a19f4899271593c9c4af30af6041eadca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; SymbolicFunction &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a0a9c6fe063a588f0b974588a5a130100</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SymbolicFunction</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a38abb1640f57da1712f1372625bb959d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFunction</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>afd601b5472a316493b560571c44d6927</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const typename Traits&lt; Expression &gt;::Ptr_t expr, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW Ptr_t</type>
      <name>create</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a2449b99ec17b4792591c0b2b9dd200ce</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const typename Traits&lt; Expression &gt;::Ptr_t expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a265ddfec9cc5bf95fd6178d15ff915e7</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const typename Traits&lt; Expression &gt;::Ptr_t expr, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a92b340c676df27e08ffdf553a6f69a96</anchor>
      <arglist>(LiegroupElementRef result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3d16ff96ba9b098448f96ba24fcd9674</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>adcbf769c42e31a9679b5b900a9d531f4</anchor>
      <arglist>(const Ptr_t &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits</name>
    <filename>a00086.html</filename>
    <templarg>Class</templarg>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Class &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Class &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; FunctionExp&lt; FunctionType &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; FunctionExp&lt; FunctionType &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; FunctionExp&lt; FunctionType &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::CrossProduct &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::CrossProduct &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::CrossProduct &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::Difference &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::Difference &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::Difference &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::Expression &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::Expression &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::Expression &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::PointCom &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::PointCom &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::PointCom &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::PointInJoint &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::PointInJoint &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::PointInJoint &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::RotationMultiply&lt; hpp::constraints::CrossProduct &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::RotationMultiply&lt; hpp::constraints::CrossProduct &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::RotationMultiply&lt; hpp::constraints::CrossProduct &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; JointFrame &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; JointFrame &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; JointFrame &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits&lt; JointTranspose &gt;</name>
    <filename>a00087.html</filename>
    <member kind="typedef">
      <type>JointTranspose</type>
      <name>Ptr_t</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>adbe9ea847b37896d2906b266a4e30c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JointTranspose</type>
      <name>WkPtr_t</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a12c05d075a4107903b8f3253bcae002f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; LhsValue &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; LhsValue &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; LhsValue &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</name>
    <filename>a00088.html</filename>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a765e3ad6524d904d3f26da8692f16c2caa03720921d5463e3ad01cb2e556e28eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a765e3ad6524d904d3f26da8692f16c2ca1e0715dbfd362fb4ea3db0477f86479c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; _allRows, internal::empty_struct, BlockIndex::segments_t &gt;::type</type>
      <name>RowIndices_t</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a94c359be56b3b5cba53fb1ee4949bfc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; _allCols, internal::empty_struct, BlockIndex::segments_t &gt;::type</type>
      <name>ColIndices_t</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a3b35163003451e9628bc10feb4ea6ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a765e3ad6524d904d3f26da8692f16c2caa03720921d5463e3ad01cb2e556e28eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a765e3ad6524d904d3f26da8692f16c2ca1e0715dbfd362fb4ea3db0477f86479c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; MatrixBlocksRef&lt; _allRows, _allCols &gt; &gt;</name>
    <filename>a00089.html</filename>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9768f798bd2fc7ac406095f89edad75fa8c798b4542505c6e37fc4d25dc3cad4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9768f798bd2fc7ac406095f89edad75fa4317561d616705f39e167be42aab96eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; _allRows, internal::empty_struct, const BlockIndex::segments_t &amp; &gt;::type</type>
      <name>RowIndices_t</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a88b29261cd0dc05ee6e9e7820b53b941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; _allCols, internal::empty_struct, const BlockIndex::segments_t &amp; &gt;::type</type>
      <name>ColIndices_t</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a46ae2741eaf89647093a0e162406ce10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllRows</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9768f798bd2fc7ac406095f89edad75fa8c798b4542505c6e37fc4d25dc3cad4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllCols</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9768f798bd2fc7ac406095f89edad75fa4317561d616705f39e167be42aab96eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</name>
    <filename>a00090.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_allRows</templarg>
    <templarg>_allCols</templarg>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a65ec8bc9c503f3ba27a2699cf27bf38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a3308bc48245954a2cef8fc51ee3ebc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a957e2049803c5aeabfdcc43293240cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a756e8e7c1187f012d6573178f8e2f524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a2e524b028a40ebfbcc8101259506cbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a46f55963a52986d9b99a9c3027edff44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArgType::Index</type>
      <name>Index</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>abd4b19dd5d2dc49bc00462bf2e12d033</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits&lt; ArgType &gt;::StorageKind</type>
      <name>StorageKind</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a3097cc64e2058e705de7cc1e118541cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits&lt; ArgType &gt;::XprKind</type>
      <name>XprKind</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7d43e885c0f24b2162aecbd936c24ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArgType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aa738edb45ba1de76e2758ca8d25fad55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a65ec8bc9c503f3ba27a2699cf27bf38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a3308bc48245954a2cef8fc51ee3ebc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a957e2049803c5aeabfdcc43293240cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a756e8e7c1187f012d6573178f8e2f524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a2e524b028a40ebfbcc8101259506cbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4fdb1a11d01e4e74276035ae9acc1418a46f55963a52986d9b99a9c3027edff44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits&lt; pinocchio::Joint &gt;</name>
    <filename>a00091.html</filename>
    <member kind="typedef">
      <type>JointPtr_t</type>
      <name>Ptr_t</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ad0842a58b9a8cbb451d225b9e1ff5d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JointPtr_t</type>
      <name>WkPtr_t</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>acc78713c90c95b3c99c86be623ae3dae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; Point &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Point &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Point &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; PointCom &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; PointCom &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; PointCom &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; PointInJoint &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; PointInJoint &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; PointInJoint &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; RhsValue &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; RhsValue &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; RhsValue &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; RotationMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; RotationMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; RotationMultiply&lt; RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; T &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; T &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; T &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits&lt; value_type &gt;</name>
    <filename>a00092.html</filename>
    <member kind="typedef">
      <type>value_type</type>
      <name>Ptr_t</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a51503c51228dbe53826d5a8ca847e332</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>WkPtr_t</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a16507ded51618664c658b8f39d9ee748</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; VectorInJoint &gt;</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; VectorInJoint &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; VectorInJoint &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::VectorInJoint</name>
    <filename>a00093.html</filename>
    <base>CalculusBase&lt; VectorInJoint &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a242cdc0b748347cf84355bec0c194902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a137006c52bc0ec0e051f2bc07b0759c8</anchor>
      <arglist>(const CalculusBase&lt; VectorInJoint &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a05460ebb8aed9e9472104985b9daa7ca</anchor>
      <arglist>(const VectorInJoint &amp;vectorInJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aed56a7435b4325f5546db4f9619665ac</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;vectorInLocalFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aa2fd77cf1ba73b686135099f43702366</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;vectorInLocalFrame, const size_type &amp;nbDof)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3c7f03893986cebc1cf1d790862e5116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>vector</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a42c861faea36eb09f092d4f6ee19fa5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a4aa503feb602be139fb212987e7b68ad</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a4ff9a12545492f37de8b47a48250d29b</anchor>
      <arglist>(const ConfigurationIn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossRXl</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aeea79e893cc4b54085fa63dde92b47a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a1a6f2628ccb8c3ff33a381bc06094beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>vector_</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a8a52336e90293db7fb102b88a20843f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixBlocksBase::View</name>
    <filename>a00094.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <member kind="typedef">
      <type>MatrixBlockView&lt; MatrixType, _Rows, _Cols, AllRows, AllCols &gt;</type>
      <name>type</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a6b0aefa8e836a858323184f52ed4725d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>a00139.html</filename>
    <namespace>Eigen::internal</namespace>
    <class kind="struct">Eigen::BlockIndex</class>
    <class kind="class">Eigen::MatrixBlocks</class>
    <class kind="class">Eigen::MatrixBlocksBase</class>
    <class kind="class">Eigen::MatrixBlocksRef</class>
    <class kind="class">Eigen::MatrixBlockView</class>
    <member kind="typedef">
      <type>const Rhs_t::template block_t&lt; typename Rhs_t::ArgType &gt;::type</type>
      <name>BlockRhs</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a04bafbb03f83a0026b2259d79215e47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; BinaryOp, BlockLhs, BlockRhs &gt;</type>
      <name>BlockCwiseBOp</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a136165c4957273abb92c90efd04aec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; false, true &gt;</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga7c6741f034c1372efff96c61b7c8281e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; true, false &gt;</type>
      <name>ColBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga948a870b59cb5a3c12ff80cb31c9badb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_EIGEN_SPECIALIZE_CwiseBinaryOpImpl</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a455473d276e8fafb59ca19323aa4c790</anchor>
      <arglist>(HPP_EIGEN_LHS_TPL, HPP_EIGEN_LHS_TYPE, HPP_EIGEN_RHS_TPL, HPP_EIGEN_RHS_TYPE) HPP_EIGEN_DEFINE_CwiseBinaryOpImpl_evalTo(HPP_EIGEN_LHS_TPL</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1defb78d5021f9ea2229a1e9d77ae70e</anchor>
      <arglist>(typename Rhs_t::block_iterator block(d.rhs());block.valid();++block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a91a95221b01fa91e9d6b789be015d3bf</anchor>
      <arglist>(typename Lhs_t::block_iterator block(d.lhs());block.valid();++block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9d69e0c2c91cb3e898a48e6b869fb64d</anchor>
      <arglist>(d.lhs()._blocks()==d.rhs()._blocks())</arglist>
    </member>
    <member kind="function">
      <type>Lhs_t::block_iterator</type>
      <name>lblock</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1675bd9ae3066b37481dd7a4d7dd1192</anchor>
      <arglist>(d.lhs())</arglist>
    </member>
    <member kind="function">
      <type>Rhs_t::block_iterator</type>
      <name>rblock</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad7a774495fbc2de7c72f84eaf29db0c3</anchor>
      <arglist>(d.rhs())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9b82b351ed1d37bb3de5431ed31aa6a2</anchor>
      <arglist>(lblock.valid())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a340d193f3f94af5b49178ae421dd8b52</anchor>
      <arglist>(!lblock.valid()&amp;&amp;!rblock.valid())</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac632f65a14cfc732dc2172eb700c6b1e</anchor>
      <arglist>(std::ostream &amp;os, const MatrixBlocksBase&lt; Derived &gt; &amp;mbi)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_LHS_TYPE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ad98a17081a40df1e3f51d2821875b8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_RHS_TPL</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a114c61b6d72148837113eda4d542e162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>HPP_EIGEN_RHS_TYPE</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a52f515448da04ee078cd3c2a05a83423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Derived &amp;</type>
      <name>d</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>afbe2f44139b5b3ec5de0b6896b3d3021</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen::internal</name>
    <filename>a00140.html</filename>
    <class kind="struct">Eigen::internal::access_block_from_matrix_block_view</class>
    <class kind="struct">Eigen::internal::access_block_from_matrix_block_view&lt; ReturnType, View, false, true &gt;</class>
    <class kind="struct">Eigen::internal::access_block_from_matrix_block_view&lt; ReturnType, View, true, false &gt;</class>
    <class kind="struct">Eigen::internal::assign_selector&lt; Derived, MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;, false, false &gt;</class>
    <class kind="struct">Eigen::internal::assign_selector&lt; Derived, MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt;, false, true &gt;</class>
    <class kind="struct">Eigen::internal::dont_print_indices</class>
    <class kind="struct">Eigen::internal::empty_struct</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;, Dst &gt;</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to&lt; MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt;, MatrixBlockView&lt; _ArgType2, _Rows2, _Cols2, _allRows2, _allCols2 &gt; &gt;</class>
    <class kind="struct">Eigen::internal::eval_matrix_block_view_to&lt; Src, MatrixBlockView&lt; _ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::get_if</class>
    <class kind="struct">Eigen::internal::get_if&lt; false &gt;</class>
    <class kind="struct">Eigen::internal::print_indices</class>
    <class kind="struct">Eigen::internal::return_first</class>
    <class kind="struct">Eigen::internal::return_first&lt; false &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; MatrixBlocks&lt; _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; MatrixBlocksRef&lt; _allRows, _allCols &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; MatrixBlockView&lt; ArgType, _Rows, _Cols, _allRows, _allCols &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>hpp</name>
    <filename>a00141.html</filename>
    <namespace>hpp::constraints</namespace>
    <class kind="struct">hpp::prettyPrint&lt; constraints::segment_t, Option &gt;</class>
    <class kind="struct">hpp::prettyPrint&lt; Eigen::BlockIndex::segments_t, Option &gt;</class>
    <member kind="function">
      <type></type>
      <name>HPP_MAKE_EXCEPTION</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a19f2d09243fdd6828b4d40953f4f413f</anchor>
      <arglist>(HPP_UTIL_DLLAPI, AssertionError)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a0bcb296b7ca1dab3382f49953c92a853</anchor>
      <arglist>(std::ostream &amp;o, const Exception &amp;exception)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI long &amp;</type>
      <name>indent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a16259580a8f0a07bad42458aa65963f3</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>incindent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a669ea668296b2ed089b72c3a1dce688e</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>decindent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>afaf02e3dd1c3eaf21e287dc4c825cc89</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>resetindent</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a011dc7bc6e7c975fdc993c5b7abbac56</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>iendl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ab2e087df519f97420058c160b8313be4</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>incendl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a49bcbcf63c92e671f9aa3c737b8a2852</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_UTIL_DLLAPI std::ostream &amp;</type>
      <name>decendl</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8d7bf72162e22331e54b3c387651ed95</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_PINOCCHIO_DLLAPI std::ostream &amp;</type>
      <name>setpyformat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gaf0a4b5cf356013ff921516719a6b9cf0</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>HPP_PINOCCHIO_DLLAPI std::ostream &amp;</type>
      <name>unsetpyformat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ga9ebdb5b7e4ea691aa1cc921cacd64b28</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>PrettyPrint&lt; T, PrettyOutput &gt;</type>
      <name>pretty_print</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gaa29fa2d7b51bc30954dd1e77c1163eca</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>PrettyPrint&lt; T, CondensedOutput &gt;</type>
      <name>condensed</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ga88b06fbd68a50ab03ddc565e58e9817e</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>PrettyPrint&lt; T, OneLineOutput &gt;</type>
      <name>one_line</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ga9a8cb47183de8943e9e57cb92659d5aa</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>OutputFormatBits</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa875e4c844d0b4f0f260e9ad2a976fc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>OneLineOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aaa31d6d0e57c8868f95725538d6265c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CondensedOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa7a931a55fd9d53e3d156ea75df8a66ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>PrettyOutput</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>gga17898ce4c3cc45c5b86637541ce09d1aa02d62615027b11a583d13dff972e3455</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints</name>
    <filename>a00103.html</filename>
    <namespace>hpp::constraints::eigen</namespace>
    <namespace>hpp::constraints::explicit_</namespace>
    <namespace>hpp::constraints::function</namespace>
    <namespace>hpp::constraints::implicit</namespace>
    <namespace>hpp::constraints::lineSearch</namespace>
    <namespace>hpp::constraints::solver</namespace>
    <class kind="class">hpp::constraints::ActiveSetDifferentiableFunction</class>
    <class kind="class">hpp::constraints::AffineFunction</class>
    <class kind="class">hpp::constraints::CalculusBase</class>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="class">hpp::constraints::ComBetweenFeet</class>
    <class kind="class">hpp::constraints::ConfigurationConstraint</class>
    <class kind="struct">hpp::constraints::ConstantFunction</class>
    <class kind="class">hpp::constraints::ConvexShape</class>
    <class kind="class">hpp::constraints::ConvexShapeContact</class>
    <class kind="class">hpp::constraints::ConvexShapeContactComplement</class>
    <class kind="struct">hpp::constraints::ConvexShapeData</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::DifferentiableFunction</class>
    <class kind="class">hpp::constraints::DifferentiableFunctionSet</class>
    <class kind="class">hpp::constraints::DistanceBetweenBodies</class>
    <class kind="class">hpp::constraints::DistanceBetweenPointsInBodies</class>
    <class kind="class">hpp::constraints::Explicit</class>
    <class kind="class">hpp::constraints::ExplicitConstraintSet</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::FunctionExp</class>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <class kind="class">hpp::constraints::Identity</class>
    <class kind="class">hpp::constraints::Implicit</class>
    <class kind="class">hpp::constraints::ImplicitConstraintSet</class>
    <class kind="class">hpp::constraints::JointFrame</class>
    <class kind="struct">hpp::constraints::JointTranspose</class>
    <class kind="class">hpp::constraints::LockedJoint</class>
    <class kind="class">hpp::constraints::Manipulability</class>
    <class kind="class">hpp::constraints::MatrixOfExpressions</class>
    <class kind="class">hpp::constraints::Point</class>
    <class kind="class">hpp::constraints::PointCom</class>
    <class kind="class">hpp::constraints::PointInJoint</class>
    <class kind="class">hpp::constraints::QPStaticStability</class>
    <class kind="class">hpp::constraints::RelativeCom</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::StaticStability</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::SymbolicFunction</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="struct">hpp::constraints::Traits&lt; JointTranspose &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; pinocchio::Joint &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; value_type &gt;</class>
    <class kind="class">hpp::constraints::VectorInJoint</class>
    <member kind="typedef">
      <type>pinocchio::size_type</type>
      <name>size_type</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a814ee4492e70bf211b6fb9915ce1e54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::value_type</type>
      <name>value_type</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a89b8f8d8e6a505595faae99c48b9743a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af2f1eff4448b3685ecb571df21823171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointConstPtr_t</type>
      <name>JointConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afe35bbb1218676f4e1904edd6d1d8b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a312c14c2e80260bc281b7c0cc6574ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix3_t</type>
      <name>matrix3_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1f02cdd2080797337d055a44e42abbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, 6 &gt;</type>
      <name>matrix6_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af2debb6a9d6b16fd716293e8bd319b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abd6ca588c37024349553c216cb9477ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const matrix_t &gt;</type>
      <name>matrixIn_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adda38afd03d9829e1f876c58eec0c9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; matrix_t &gt;</type>
      <name>matrixOut_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac27371d812fbe3af3375c781f7cd5e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4e7af7ffd02f53d6df34c7e415ca7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab1b52e662ad6c55da9f9b54c49812682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ade3f15882e933929faddad04096881ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ComJacobian_t</type>
      <name>ComJacobian_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a88a8d2e340c724ca2fa9416bf7d22038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a313fbc4e5dce815c64a450544eeefba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5b2b35fc4abea960ca5dd5da9a98700b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupElement</type>
      <name>LiegroupElement</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a063973be1c316528ae7e32fadf3be85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupElementRef</type>
      <name>LiegroupElementRef</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae77bc941b2bfe8045c78141ae36556c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupSpace</type>
      <name>LiegroupSpace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a57c2bbf66f0269d7d2936ab9589dd376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupSpacePtr_t</type>
      <name>LiegroupSpacePtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5906b3c8cdbdb03a1b381134033cf9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::LiegroupSpaceConstPtr_t</type>
      <name>LiegroupSpaceConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a53fc81b6ef46970f8256fb1ed8cef611</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 5, 1 &gt;</type>
      <name>vector5_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a20e68f45f2a942ab230c01df54a0c308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>vector6_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a33fc8e01e8c6749b46fadce92de42b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 7, 1 &gt;</type>
      <name>vector7_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a82f04fe102375c39088719ff6c7c7518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; value_type &gt;</type>
      <name>Quaternion_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a37184c6bcc554f770f1f1dfb7a5fafe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ArrayXb</type>
      <name>ArrayXb</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a864dadf1de71770094412617d8ea2c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayXb</type>
      <name>bool_array_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>addf0dcbb0101f32f411decae3f7b285f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_type, size_type &gt;</type>
      <name>segment_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5ab92c649bac6513f138b45be03e9011</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; segment_t &gt;</type>
      <name>segments_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8237dc0c03f6bb9cfcdc6108b813262d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1e8ff5fa9551b0cc932469a2cf257f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2ffd99f683154cbefc850cb2bdda98f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CollisionObjectConstPtr_t</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0da021048af7f109f7e50a9e7bd6753c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0b101443dde5d3fda26d530be1664161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abcf51622ac9c7022b1c356f0a5539827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afd23d6d6fc9ae9a6a528952bc4b70963</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::Device</type>
      <name>Device</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae07ff3046df3fffc8bf735d9544f2e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a46cf13d27e9076c419221a3964286738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CenterOfMassComputation</type>
      <name>CenterOfMassComputation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae64d6dd64dcc7122e1c3c9219683e813</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pinocchio::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acff12d90d8a76d9bd053ed2a3e5950e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DifferentiableFunction &gt;</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af86fed84ae43e85f9e8643a5af42feb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DifferentiableFunctionSet &gt;</type>
      <name>DifferentiableFunctionSetPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a550d1814ff0f9a27d88f2092be061f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferentiableFunctionSet DifferentiableFunctionStack</type>
      <name>HPP_CONSTRAINTS_DEPRECATED</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af28fe26b28d6fcd2eb7e40c48336fade</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ActiveSetDifferentiableFunction &gt;</type>
      <name>ActiveSetDifferentiableFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2626f3478c1feadcc52a793bdf3846ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenBodies &gt;</type>
      <name>DistanceBetweenBodiesPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae8aa66db0f13be7f030a9786660cbd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenPointsInBodies &gt;</type>
      <name>DistanceBetweenPointsInBodiesPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a15ee3f237e65b880c44706b41a8f8a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeCom &gt;</type>
      <name>RelativeComPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4684a56a58b53b91a25746d4edff4650</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComBetweenFeet &gt;</type>
      <name>ComBetweenFeetPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a935f1eb16b84796192b86a91af021419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContact &gt;</type>
      <name>ConvexShapeContactPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa74ca38325b6bc6dc38657cd1c80c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContactComplement &gt;</type>
      <name>ConvexShapeContactComplementPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0f8a402193410e7679ea2a7c9178414d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StaticStability &gt;</type>
      <name>StaticStabilityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad54fc72681dcd79a25c2b77bac619b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; QPStaticStability &gt;</type>
      <name>QPStaticStabilityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a3dd563dbf1b5b8560d2beb62bef7b00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationConstraint &gt;</type>
      <name>ConfigurationConstraintPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4830fba26342da49bd199af4a2411344</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Identity &gt;</type>
      <name>IdentityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1c3f567758932e650a25062500559537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; AffineFunction &gt;</type>
      <name>AffineFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a43c11b585e4a396e708b638c89095439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstantFunction &gt;</type>
      <name>ConstantFunctionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa0dacb625f16cfd38df87cd7bac5f971</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContact</type>
      <name>StaticStabilityGravity</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af95c1f506b5959e248368885afd5f653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplement</type>
      <name>StaticStabilityGravityComplement</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9856a331291063d631db35a3ae6255e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactPtr_t</type>
      <name>StaticStabilityGravityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a490b1e61263165c09c5fcd3773b59e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplementPtr_t</type>
      <name>StaticStabilityGravityComplementPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abe9fe9175df03855de4dddf730839b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit &gt;</type>
      <name>Position</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad2a7f1d1ff5c66f72712ae89b2202298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit &gt;</type>
      <name>Orientation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0813b13407a8d79d2b846142102e31d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit &gt;</type>
      <name>RelativeTransformation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4c509f76cba151d4af86c13aaae725cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit &gt;</type>
      <name>RelativePosition</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae42a4d835c0f81fe897feb246113d574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit &gt;</type>
      <name>RelativeOrientation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2ffaa731bb505fae8625a87eb4bacab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit|OrientationBit|OutputSE3Bit &gt;</type>
      <name>TransformationSE3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a360006be8b8d2660a57ba2b95b67d3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit|OutputSE3Bit &gt;</type>
      <name>RelativeTransformationSE3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad7d311a4d62c68d3850eac17142f913f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit|OutputSE3Bit &gt;</type>
      <name>OrientationSO3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af2e249d7cda2bdfc6aa658b0019a8f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit|OutputSE3Bit &gt;</type>
      <name>RelativeOrientationSO3</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9091b1fa6fc615b33f28dd3b73b8a5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Position &gt;</type>
      <name>PositionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adb8f4d210fca36e53a12b5eb3960ece6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Orientation &gt;</type>
      <name>OrientationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>adaa3650e7328397eafdf880365e314c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Transformation &gt;</type>
      <name>TransformationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a26c24f12d8ffb5c4f2572dc6e4773d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePosition &gt;</type>
      <name>RelativePositionPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac0bc5df5ffd19f9dec87b96e76afd819</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeOrientation &gt;</type>
      <name>RelativeOrientationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acba64d3d130ab6869c5e2e5f566e0431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeTransformation &gt;</type>
      <name>RelativeTransformationPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af4db8d10953253fa720cae60e5f6bdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::BlockIndex</type>
      <name>BlockIndex</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9ef5c6a971ca8ae27ee97dcc5caeb9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Implicit &gt;</type>
      <name>ImplicitPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a367bfb5f727ed74bcbd0f2cacb28e772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Implicit &gt;</type>
      <name>ImplicitConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aeb4eab9ef5678a2bbf4e672a6f43f903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; constraints::ImplicitPtr_t &gt;</type>
      <name>NumericalConstraints_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a65eb0406dc9ca3a542750df4d0660a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImplicitConstraintSet &gt;</type>
      <name>ImplicitConstraintSetPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae12942baf8885c31f625f102ef5a0216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ComparisonType &gt;</type>
      <name>ComparisonTypes_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0bf28774a6e0e6d54641d9d1bb529617</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Explicit &gt;</type>
      <name>ExplicitPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0a06d98526d0f0e9d3ddfe7e96fb0710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Explicit &gt;</type>
      <name>ExplicitConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aeed47f04016b5d64e44338f52015eb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LockedJoint &gt;</type>
      <name>LockedJointPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af448f64bfc3a1b740485d5782be2df31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const LockedJoint &gt;</type>
      <name>LockedJointConstPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af1e99dc0760810a516b7300554ace852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LockedJointPtr_t &gt;</type>
      <name>LockedJoints_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a274a16ac38592447263a029c18f25260</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Manipulability &gt;</type>
      <name>ManipulabilityPtr_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afb13d847f99bc1d1b3a6777bbd11af7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>eigen::matrix3_t</type>
      <name>CrossMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>gac3ce1835b556d06ebbd5598435c1ccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>RowJacobianMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>gac9f4b1bc8b7f541c249d43d07cf541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>JacobianMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ga515568ec06f6831be43ab4f95c122650</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComparisonType</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Equality</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79af46d36198b953dc68e7502479f5356c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EqualToZero</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79ad828e90700c38505f32eaef45f97eb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Superior</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79a56de81d7b8a214dd85081c7df7e2a55a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inferior</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af15f3e24f65735aeb94932f88fc86a79a1d5f096a4899eb5403d4c7194f67b4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closestPointToSegment</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a39d0c33b565f64e8b5865819bc23bd23</anchor>
      <arglist>(const vector3_t &amp;P, const vector3_t &amp;A, const vector3_t &amp;v, vector3_t &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>vector3_t</type>
      <name>linePlaneIntersection</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae5f7c5b91a4db313a6578f2beffa5d16</anchor>
      <arglist>(const vector3_t &amp;A, const vector3_t &amp;u, const vector3_t &amp;P, const vector3_t &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2b81f2c271a0cb8efa89e0ac8c549e80</anchor>
      <arglist>(DifferentiableFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afe42acc1f58f13298582303a21c451af</anchor>
      <arglist>(DifferentiableFunctionSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab8489554c7c34f6a15119dc475431f77</anchor>
      <arglist>(ActiveSetDifferentiableFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac1d4300ab7f40d189e6ecbf85d25c47c</anchor>
      <arglist>(DistanceBetweenBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9e64bad770c2cae3d8ae20097fbb59df</anchor>
      <arglist>(DistanceBetweenPointsInBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a48f490d8993173637421d83ed6dd5ea9</anchor>
      <arglist>(RelativeCom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad9d3264a2664eae8b6a746bef9257444</anchor>
      <arglist>(ComBetweenFeet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a3e6a69d9efcf95fb24bc700c44d4c07c</anchor>
      <arglist>(StaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a313654249287e5a86d3d216006831fcf</anchor>
      <arglist>(QPStaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad502d2cbbe178f788ae742865de9928c</anchor>
      <arglist>(ConvexShapeContact)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4d24e70d40b78704b406ee378a0da13</anchor>
      <arglist>(ConvexShapeContactComplement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afc4e6e75743061bf13439d2e971ba412</anchor>
      <arglist>(ConfigurationConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9811e5327267411f66b92542d0136b26</anchor>
      <arglist>(Identity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a10e99a6238f7112c8217106881c90564</anchor>
      <arglist>(AffineFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acbf902b10ef7ac4256d4e13c81fa4b79</anchor>
      <arglist>(ConstantFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad048574bd5bb9041974b1b94883e4f1d</anchor>
      <arglist>(Implicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5a8e1e914742df3986dd7365fe56d450</anchor>
      <arglist>(ImplicitConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a81a7cd18f02d8577862e279d02202324</anchor>
      <arglist>(Explicit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab482bba49fdb10a9e4b793e477604191</anchor>
      <arglist>(LockedJoint)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2625025a80dd6969fb83c01a782483c3</anchor>
      <arglist>(std::ostream &amp;os, const LockedJoint &amp;lj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aab5b630fd3d97518d2c1f5d75754e2db</anchor>
      <arglist>(Manipulability)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU1</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a66a40725a6d1b9937cd7e41a02a33479</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU2</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab5abeb259535e4c357f607d4831b9d55</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV1</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aaea98b964479d5027dbbba4dcb583632</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV2</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac404d931c2d216d9a3c1678063611f9c</anchor>
      <arglist>(const SVD &amp;svd, const size_type &amp;rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pseudoInverse</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aee7a1aa205ea73b31df2424a77648e45</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; pinvmat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpan</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a09368b11d437fb35c6f57bfa3579946b</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpanOfInv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a94325add4765e8973c85b6e8cd3064dd</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernel</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abf79bd427152f14208bcaf4b50e63a5a</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullV=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernelOfInv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a53a1e689ae6fccaa7c400de7d4038741</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullU=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeCrossMatrix</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aaa04907a27384cb8b798b742fa5ed369</anchor>
      <arglist>(const VectorType &amp;v, MatrixType &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logSO3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga83977cd58dc36ed9f5a3665e21f66c0b</anchor>
      <arglist>(const matrix3_t &amp;R, value_type &amp;theta, Eigen::MatrixBase&lt; Derived &gt; const &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JlogSO3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gaa1b1ffbc381e28e39d62d2a688793471</anchor>
      <arglist>(const value_type &amp;theta, const Eigen::MatrixBase&lt; Derived &gt; &amp;log, matrix3_t &amp;Jlog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logSE3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga0576b1bdc5592c8fc0ee5d5ae4cfae07</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JlogSE3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga563530d23011f23a19674c5770064fee</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; const &amp;Jlog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrixToQuat</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga0eb470dad27a7de4fd5cd176f6e36c88</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;M, Eigen::MatrixBase&lt; Derived2 &gt; const &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>se3ToConfig</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac3c88c2d6b4d4a85d68f800fb9b09c8d</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; const &amp;q)</arglist>
    </member>
    <member kind="variable">
      <type>DEVEL typedef GenericTransformation&lt; PositionBit|OrientationBit &gt;</type>
      <name>Transformation</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aabf0ec9434c314fbbe7a57963b983f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::eigen</name>
    <filename>a00142.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, 3 &gt;</type>
      <name>matrix3_t</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>affcbd3fc0d9ca6ecd66c1b10b1ce962f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, 1 &gt;</type>
      <name>vector3_t</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ade138a2da90ab24b4aa0f4e4b8e07470</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::explicit_</name>
    <filename>a00143.html</filename>
    <class kind="class">hpp::constraints::explicit_::ImplicitFunction</class>
    <class kind="class">hpp::constraints::explicit_::RelativePose</class>
    <class kind="class">hpp::constraints::explicit_::RelativeTransformation</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePose &gt;</type>
      <name>RelativePosePtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a62144319f3cecd9f23165f76fe903687</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeTransformation &gt;</type>
      <name>RelativeTransformationPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5d7fce2b9e3a3c60412b6b01810e2669</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImplicitFunction &gt;</type>
      <name>ImplicitFunctionPtr_t</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeb049b7cd956febaf0eb8337369ef115</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a454fdba22253e404a6480562fddc5dd3</anchor>
      <arglist>(RelativePose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7f3fbbc02cd65141618ed5255e167837</anchor>
      <arglist>(RelativeTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a087e096a79cd60232c39d9c7a2a191ed</anchor>
      <arglist>(ImplicitFunction)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::function</name>
    <filename>a00144.html</filename>
    <class kind="class">hpp::constraints::function::Difference</class>
    <class kind="class">hpp::constraints::function::OfParameterSubset</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Difference &gt;</type>
      <name>DifferencePtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af8dc61f1967a47674b2221c66bce49fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; OfParameterSubset &gt;</type>
      <name>OfParameterSubsetPtr_t</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3a241d51e04d7f8b58fa804eb71415e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a35d54cafd23dcb24a7d884ce04e16610</anchor>
      <arglist>(OfParameterSubset)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::implicit</name>
    <filename>a00145.html</filename>
    <class kind="class">hpp::constraints::implicit::RelativePose</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePose &gt;</type>
      <name>RelativePosePtr_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa1b4d8e2ae9ec6a2ef5acbdd8af79ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const RelativePose &gt;</type>
      <name>RelativePoseConstPtr_t</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4c9229f9cc8738f45a77dd5fa8e2fe61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad5d75aa392cb8237082d9f0c9d57ff96</anchor>
      <arglist>(RelativePose)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::lineSearch</name>
    <filename>a00146.html</filename>
    <member kind="typedef">
      <type>::hpp::constraints::solver::lineSearch::Constant Constant</type>
      <name>HPP_CONSTRAINTS_DEPRECATED</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa199da679393f727955e4ad50b755d17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::solver</name>
    <filename>a00147.html</filename>
    <namespace>hpp::constraints::solver::lineSearch</namespace>
    <class kind="class">hpp::constraints::solver::BySubstitution</class>
    <class kind="class">hpp::constraints::solver::HierarchicalIterative</class>
    <member kind="typedef">
      <type>std::numeric_limits&lt; value_type &gt;</type>
      <name>numeric_limits</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>afe2de5f14d88fbaf8fe8451d11999a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::NumTraits&lt; value_type &gt;</type>
      <name>NumTraits</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a247f16aa1274871f63b448e698f01e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a29e4f3aba39aa566c7dcaf3d9b0cf0a1</anchor>
      <arglist>(std::ostream &amp;os, const BySubstitution &amp;hs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::solver::lineSearch</name>
    <filename>a00148.html</filename>
    <class kind="struct">hpp::constraints::solver::lineSearch::Backtracking</class>
    <class kind="struct">hpp::constraints::solver::lineSearch::Constant</class>
    <class kind="struct">hpp::constraints::solver::lineSearch::ErrorNormBased</class>
    <class kind="struct">hpp::constraints::solver::lineSearch::FixedSequence</class>
  </compound>
  <compound kind="group">
    <name>symbolic_calculus</name>
    <title>Symbolic calculus</title>
    <filename>a00150.html</filename>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="struct">hpp::constraints::Traits&lt; value_type &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; pinocchio::Joint &gt;</class>
    <class kind="struct">hpp::constraints::JointTranspose</class>
    <class kind="struct">hpp::constraints::Traits&lt; JointTranspose &gt;</class>
    <class kind="class">hpp::constraints::CalculusBase</class>
    <class kind="class">hpp::constraints::PointInJoint</class>
    <class kind="class">hpp::constraints::VectorInJoint</class>
    <class kind="class">hpp::constraints::FunctionExp</class>
    <class kind="class">hpp::constraints::Point</class>
    <class kind="class">hpp::constraints::PointCom</class>
    <class kind="class">hpp::constraints::JointFrame</class>
    <class kind="class">hpp::constraints::MatrixOfExpressions</class>
    <member kind="typedef">
      <type>eigen::matrix3_t</type>
      <name>CrossMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>gac3ce1835b556d06ebbd5598435c1ccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>RowJacobianMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>gac9f4b1bc8b7f541c249d43d07cf541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>JacobianMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ga515568ec06f6831be43ab4f95c122650</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>constraints</name>
    <title>Constraints</title>
    <filename>a00151.html</filename>
    <subgroup>hpp_constraints_tools</subgroup>
    <class kind="class">hpp::constraints::Identity</class>
    <class kind="class">hpp::constraints::AffineFunction</class>
    <class kind="struct">hpp::constraints::ConstantFunction</class>
    <class kind="class">hpp::constraints::ConvexShapeContact</class>
    <class kind="class">hpp::constraints::ConvexShapeContactComplement</class>
    <class kind="class">hpp::constraints::DifferentiableFunctionSet</class>
    <class kind="class">hpp::constraints::DifferentiableFunction</class>
    <class kind="class">hpp::constraints::explicit_::RelativeTransformation</class>
    <class kind="class">hpp::constraints::Explicit</class>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <class kind="class">hpp::constraints::ImplicitConstraintSet</class>
    <class kind="class">hpp::constraints::Implicit</class>
    <class kind="class">hpp::constraints::LockedJoint</class>
    <class kind="class">hpp::constraints::Manipulability</class>
    <class kind="class">hpp::constraints::QPStaticStability</class>
    <class kind="class">hpp::constraints::RelativeCom</class>
    <class kind="class">hpp::constraints::StaticStability</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>solvers</name>
    <title>Constraint solvers</title>
    <filename>a00152.html</filename>
    <namespace>hpp::constraints::solver::lineSearch</namespace>
    <class kind="class">hpp::constraints::ExplicitConstraintSet</class>
    <class kind="class">hpp::constraints::solver::BySubstitution</class>
    <class kind="class">hpp::constraints::solver::HierarchicalIterative</class>
  </compound>
  <compound kind="group">
    <name>hpp_constraints_tools</name>
    <title>Tools</title>
    <filename>a00153.html</filename>
    <class kind="struct">Eigen::BlockIndex</class>
    <class kind="class">Eigen::MatrixBlockView</class>
    <class kind="class">Eigen::MatrixBlocks</class>
    <class kind="class">Eigen::MatrixBlocksBase</class>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; false, true &gt;</type>
      <name>RowBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga7c6741f034c1372efff96c61b7c8281e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixBlocks&lt; true, false &gt;</type>
      <name>ColBlockIndices</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga948a870b59cb5a3c12ff80cb31c9badb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac632f65a14cfc732dc2172eb700c6b1e</anchor>
      <arglist>(std::ostream &amp;os, const MatrixBlocksBase&lt; Derived &gt; &amp;mbi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logSO3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga83977cd58dc36ed9f5a3665e21f66c0b</anchor>
      <arglist>(const matrix3_t &amp;R, value_type &amp;theta, Eigen::MatrixBase&lt; Derived &gt; const &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JlogSO3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gaa1b1ffbc381e28e39d62d2a688793471</anchor>
      <arglist>(const value_type &amp;theta, const Eigen::MatrixBase&lt; Derived &gt; &amp;log, matrix3_t &amp;Jlog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logSE3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga0576b1bdc5592c8fc0ee5d5ae4cfae07</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JlogSE3</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga563530d23011f23a19674c5770064fee</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; const &amp;Jlog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrixToQuat</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ga0eb470dad27a7de4fd5cd176f6e36c88</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;M, Eigen::MatrixBase&lt; Derived2 &gt; const &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>se3ToConfig</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>gac3c88c2d6b4d4a85d68f800fb9b09c8d</anchor>
      <arglist>(const Transform3f &amp;M, Eigen::MatrixBase&lt; Derived &gt; const &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index">hpp_constraints_documentation</docanchor>
    <docanchor file="index" title="Introduction">hpp_pinocchio_intro</docanchor>
    <docanchor file="index" title="What is Pinocchio?">OverviewIntro</docanchor>
    <docanchor file="index" title="How to install Pinocchio?">OverviewInstall</docanchor>
    <docanchor file="index" title="Simplest example with compilation command">OverviewSimple</docanchor>
    <docanchor file="index" title="Compiling and running your program">OverviewSimpleCompile</docanchor>
    <docanchor file="index" title="Explanation of the program">OverviewSimpleExplain</docanchor>
    <docanchor file="index" title="More complex example with C++ and Python">OverviewComplex</docanchor>
    <docanchor file="index" title="Compiling and running your program">OverviewComplexCompile</docanchor>
    <docanchor file="index" title="Explanation of the program">OverviewComplexExplain</docanchor>
    <docanchor file="index" title="About Python wrappings">OverviewPython</docanchor>
    <docanchor file="index" title="How to cite Pinocchio">OverviewCite</docanchor>
    <docanchor file="index" title="Where to go from here?">OverviewConclu</docanchor>
  </compound>
</tagfile>
