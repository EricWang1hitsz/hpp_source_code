// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __obstacle_hh__
#define __obstacle_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_obstacle
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_obstacle
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_obstacle
#endif



#ifndef __common_hh_EXTERNAL_GUARD__
#define __common_hh_EXTERNAL_GUARD__
#include <hpp/common-idl.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE hpp

_CORBA_MODULE_BEG

  _CORBA_MODULE corbaserver

  _CORBA_MODULE_BEG

#ifndef __hpp_mcorbaserver_mObstacle__
#define __hpp_mcorbaserver_mObstacle__

    class Obstacle;
    class _objref_Obstacle;
    class _impl_Obstacle;
    
    typedef _objref_Obstacle* Obstacle_ptr;
    typedef Obstacle_ptr ObstacleRef;

    class Obstacle_Helper {
    public:
      typedef Obstacle_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_Obstacle, Obstacle_Helper> Obstacle_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_Obstacle,Obstacle_Helper > Obstacle_out;

#endif

    // interface Obstacle
    class Obstacle {
    public:
      // Declarations for this interface type.
      typedef Obstacle_ptr _ptr_type;
      typedef Obstacle_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_Obstacle :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      void loadObstacleModel(const char* package, const char* file, const char* prefix);
      void removeObstacleFromJoint(const char* objectName, const char* jointName, ::CORBA::Boolean collision, ::CORBA::Boolean distance);
      void cutObstacle(const char* objectName, const ::hpp::floatSeq& aabb);
      void addObstacle(const char* objectName, ::CORBA::Boolean collision, ::CORBA::Boolean distance);
      void moveObstacle(const char* objectName, const ::hpp::Transform_ cfg);
      void getObstaclePosition(const char* objectName, ::hpp::Transform_ cfg);
      Names_t* getObstacleNames(::CORBA::Boolean collision, ::CORBA::Boolean distance);
      void createPolyhedron(const char* polyName);
      void createBox(const char* inBoxName, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z);
      void createSphere(const char* name, ::CORBA::Double radius);
      void createCylinder(const char* name, ::CORBA::Double radius, ::CORBA::Double length);
      ::CORBA::ULong addPoint(const char* polyName, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z);
      ::CORBA::ULong addTriangle(const char* polyName, ::CORBA::ULong pt1, ::CORBA::ULong pt2, ::CORBA::ULong pt3);

      inline _objref_Obstacle()  { _PR_setobj(0); }  // nil
      _objref_Obstacle(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_Obstacle();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_Obstacle(const _objref_Obstacle&);
      _objref_Obstacle& operator = (const _objref_Obstacle&);
      // not implemented

      friend class Obstacle;
    };

    class _pof_Obstacle : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_Obstacle() : _OMNI_NS(proxyObjectFactory)(Obstacle::_PD_repoId) {}
      virtual ~_pof_Obstacle();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_Obstacle :
      public virtual omniServant
    {
    public:
      virtual ~_impl_Obstacle();

      virtual void loadObstacleModel(const char* package, const char* file, const char* prefix) = 0;
      virtual void removeObstacleFromJoint(const char* objectName, const char* jointName, ::CORBA::Boolean collision, ::CORBA::Boolean distance) = 0;
      virtual void cutObstacle(const char* objectName, const ::hpp::floatSeq& aabb) = 0;
      virtual void addObstacle(const char* objectName, ::CORBA::Boolean collision, ::CORBA::Boolean distance) = 0;
      virtual void moveObstacle(const char* objectName, const ::hpp::Transform_ cfg) = 0;
      virtual void getObstaclePosition(const char* objectName, ::hpp::Transform_ cfg) = 0;
      virtual Names_t* getObstacleNames(::CORBA::Boolean collision, ::CORBA::Boolean distance) = 0;
      virtual void createPolyhedron(const char* polyName) = 0;
      virtual void createBox(const char* inBoxName, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z) = 0;
      virtual void createSphere(const char* name, ::CORBA::Double radius) = 0;
      virtual void createCylinder(const char* name, ::CORBA::Double radius, ::CORBA::Double length) = 0;
      virtual ::CORBA::ULong addPoint(const char* polyName, ::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double z) = 0;
      virtual ::CORBA::ULong addTriangle(const char* polyName, ::CORBA::ULong pt1, ::CORBA::ULong pt2, ::CORBA::ULong pt3) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE corbaserver
  _CORBA_MODULE_BEG

    class Obstacle :
      public virtual hpp::corbaserver::_impl_Obstacle,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~Obstacle();

      inline ::hpp::corbaserver::Obstacle_ptr _this() {
        return (::hpp::corbaserver::Obstacle_ptr) _do_this(::hpp::corbaserver::Obstacle::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE corbaserver
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
hpp::corbaserver::Obstacle::_marshalObjRef(::hpp::corbaserver::Obstacle_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_obstacle
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_obstacle
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_obstacle
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_obstacle
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_obstacle
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_obstacle
#endif

#endif  // __obstacle_hh__

