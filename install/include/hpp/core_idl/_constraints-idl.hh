// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef hpp_core_idl____constraints_hh__
#define hpp_core_idl____constraints_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED___constraints
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED___constraints
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED___constraints
#endif



#ifndef hpp_core_idl__common_hh_EXTERNAL_GUARD__
#define hpp_core_idl__common_hh_EXTERNAL_GUARD__
#include <hpp/common-idl.hh>
#endif
#ifndef hpp_core_idl__constraints_hh_EXTERNAL_GUARD__
#define hpp_core_idl__constraints_hh_EXTERNAL_GUARD__
#include <hpp/constraints_idl/constraints-idl.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE hpp

_CORBA_MODULE_BEG

  _CORBA_MODULE constraints_idl

  _CORBA_MODULE_BEG

#ifndef __hpp_mconstraints__idl_mImplicit__
#define __hpp_mconstraints__idl_mImplicit__

    class Implicit;
    class _objref_Implicit;
    class _impl_Implicit;
    
    typedef _objref_Implicit* Implicit_ptr;
    typedef Implicit_ptr ImplicitRef;

    class Implicit_Helper {
    public:
      typedef Implicit_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_Implicit, Implicit_Helper> Implicit_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_Implicit,Implicit_Helper > Implicit_out;

#endif

  _CORBA_MODULE_END

  _CORBA_MODULE core_idl

  _CORBA_MODULE_BEG

#ifndef __hpp_mcore__idl_mConstraint__
#define __hpp_mcore__idl_mConstraint__

    class Constraint;
    class _objref_Constraint;
    class _impl_Constraint;
    
    typedef _objref_Constraint* Constraint_ptr;
    typedef Constraint_ptr ConstraintRef;

    class Constraint_Helper {
    public:
      typedef Constraint_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_Constraint, Constraint_Helper> Constraint_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_Constraint,Constraint_Helper > Constraint_out;

#endif

    // interface Constraint
    class Constraint {
    public:
      // Declarations for this interface type.
      typedef Constraint_ptr _ptr_type;
      typedef Constraint_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_Constraint :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      ::CORBA::Boolean apply(const ::hpp::floatSeq& configin, ::hpp::floatSeq_out configOut);
      char* name();
      char* str();
      ::CORBA::Boolean isSatisfied(const ::hpp::floatSeq& config);

      inline _objref_Constraint()  { _PR_setobj(0); }  // nil
      _objref_Constraint(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_Constraint();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_Constraint(const _objref_Constraint&);
      _objref_Constraint& operator = (const _objref_Constraint&);
      // not implemented

      friend class Constraint;
    };

    class _pof_Constraint : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_Constraint() : _OMNI_NS(proxyObjectFactory)(Constraint::_PD_repoId) {}
      virtual ~_pof_Constraint();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_Constraint :
      public virtual omniServant
    {
    public:
      virtual ~_impl_Constraint();

      virtual ::CORBA::Boolean apply(const ::hpp::floatSeq& configin, ::hpp::floatSeq_out configOut) = 0;
      virtual char* name() = 0;
      virtual char* str() = 0;
      virtual ::CORBA::Boolean isSatisfied(const ::hpp::floatSeq& config) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


#ifndef __hpp_mcore__idl_mConfigProjector__
#define __hpp_mcore__idl_mConfigProjector__

    class ConfigProjector;
    class _objref_ConfigProjector;
    class _impl_ConfigProjector;
    
    typedef _objref_ConfigProjector* ConfigProjector_ptr;
    typedef ConfigProjector_ptr ConfigProjectorRef;

    class ConfigProjector_Helper {
    public:
      typedef ConfigProjector_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_ConfigProjector, ConfigProjector_Helper> ConfigProjector_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_ConfigProjector,ConfigProjector_Helper > ConfigProjector_out;

#endif

    // interface ConfigProjector
    class ConfigProjector {
    public:
      // Declarations for this interface type.
      typedef ConfigProjector_ptr _ptr_type;
      typedef ConfigProjector_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_ConfigProjector :
      public virtual _objref_Constraint
    {
    public:
      void setRightHandSideFromConfig(const ::hpp::floatSeq& config);
      void setRightHandSideOfConstraintFromConfig(::hpp::constraints_idl::Implicit_ptr nm, const ::hpp::floatSeq& config);
      void setRightHandSide(const ::hpp::floatSeq& param);
      void setRightHandSideOfConstraint(::hpp::constraints_idl::Implicit_ptr nm, const ::hpp::floatSeq& rhs);
      floatSeq* getRightHandSide();
      void setRightHandSideAt(::hpp::value_type s);
      ::CORBA::Boolean isConstraintSatisfied(::hpp::constraints_idl::Implicit_ptr nm, const ::hpp::floatSeq& arg, ::hpp::floatSeq_out err, ::CORBA::Boolean& constraintFound);

      inline _objref_ConfigProjector()  { _PR_setobj(0); }  // nil
      _objref_ConfigProjector(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_ConfigProjector();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_ConfigProjector(const _objref_ConfigProjector&);
      _objref_ConfigProjector& operator = (const _objref_ConfigProjector&);
      // not implemented

      friend class ConfigProjector;
    };

    class _pof_ConfigProjector : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_ConfigProjector() : _OMNI_NS(proxyObjectFactory)(ConfigProjector::_PD_repoId) {}
      virtual ~_pof_ConfigProjector();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_ConfigProjector :
      public virtual _impl_Constraint
    {
    public:
      virtual ~_impl_ConfigProjector();

      virtual void setRightHandSideFromConfig(const ::hpp::floatSeq& config) = 0;
      virtual void setRightHandSideOfConstraintFromConfig(::hpp::constraints_idl::Implicit_ptr nm, const ::hpp::floatSeq& config) = 0;
      virtual void setRightHandSide(const ::hpp::floatSeq& param) = 0;
      virtual void setRightHandSideOfConstraint(::hpp::constraints_idl::Implicit_ptr nm, const ::hpp::floatSeq& rhs) = 0;
      virtual floatSeq* getRightHandSide() = 0;
      virtual void setRightHandSideAt(::hpp::value_type s) = 0;
      virtual ::CORBA::Boolean isConstraintSatisfied(::hpp::constraints_idl::Implicit_ptr nm, const ::hpp::floatSeq& arg, ::hpp::floatSeq_out err, ::CORBA::Boolean& constraintFound) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


#ifndef __hpp_mcore__idl_mConstraintSet__
#define __hpp_mcore__idl_mConstraintSet__

    class ConstraintSet;
    class _objref_ConstraintSet;
    class _impl_ConstraintSet;
    
    typedef _objref_ConstraintSet* ConstraintSet_ptr;
    typedef ConstraintSet_ptr ConstraintSetRef;

    class ConstraintSet_Helper {
    public:
      typedef ConstraintSet_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_ConstraintSet, ConstraintSet_Helper> ConstraintSet_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_ConstraintSet,ConstraintSet_Helper > ConstraintSet_out;

#endif

    // interface ConstraintSet
    class ConstraintSet {
    public:
      // Declarations for this interface type.
      typedef ConstraintSet_ptr _ptr_type;
      typedef ConstraintSet_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_ConstraintSet :
      public virtual _objref_Constraint
    {
    public:
      Constraint_ptr getConfigProjector();

      inline _objref_ConstraintSet()  { _PR_setobj(0); }  // nil
      _objref_ConstraintSet(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_ConstraintSet();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_ConstraintSet(const _objref_ConstraintSet&);
      _objref_ConstraintSet& operator = (const _objref_ConstraintSet&);
      // not implemented

      friend class ConstraintSet;
    };

    class _pof_ConstraintSet : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_ConstraintSet() : _OMNI_NS(proxyObjectFactory)(ConstraintSet::_PD_repoId) {}
      virtual ~_pof_ConstraintSet();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_ConstraintSet :
      public virtual _impl_Constraint
    {
    public:
      virtual ~_impl_ConstraintSet();

      virtual Constraint_ptr getConfigProjector() = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE constraints_idl
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

    class Constraint :
      public virtual hpp::core_idl::_impl_Constraint,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~Constraint();

      inline ::hpp::core_idl::Constraint_ptr _this() {
        return (::hpp::core_idl::Constraint_ptr) _do_this(::hpp::core_idl::Constraint::_PD_repoId);
      }
    };

    class ConfigProjector :
      public virtual hpp::core_idl::_impl_ConfigProjector,
      public virtual Constraint
    {
    public:
      virtual ~ConfigProjector();

      inline ::hpp::core_idl::ConfigProjector_ptr _this() {
        return (::hpp::core_idl::ConfigProjector_ptr) _do_this(::hpp::core_idl::ConfigProjector::_PD_repoId);
      }
    };

    class ConstraintSet :
      public virtual hpp::core_idl::_impl_ConstraintSet,
      public virtual Constraint
    {
    public:
      virtual ~ConstraintSet();

      inline ::hpp::core_idl::ConstraintSet_ptr _this() {
        return (::hpp::core_idl::ConstraintSet_ptr) _do_this(::hpp::core_idl::ConstraintSet::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE constraints_idl
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
hpp::core_idl::Constraint::_marshalObjRef(::hpp::core_idl::Constraint_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
hpp::core_idl::ConfigProjector::_marshalObjRef(::hpp::core_idl::ConfigProjector_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
hpp::core_idl::ConstraintSet::_marshalObjRef(::hpp::core_idl::ConstraintSet_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED___constraints
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED___constraints
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED___constraints
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED___constraints
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED___constraints
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED___constraints
#endif

#endif  // ____constraints_hh__

