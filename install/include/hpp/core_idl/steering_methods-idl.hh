// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef hpp_core_idl__steering__methods_hh__
#define hpp_core_idl__steering__methods_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_steering__methods
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_steering__methods
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_steering__methods
#endif



#ifndef hpp_core_idl__common_hh_EXTERNAL_GUARD__
#define hpp_core_idl__common_hh_EXTERNAL_GUARD__
#include <hpp/common-idl.hh>
#endif
#ifndef hpp_core_idl__paths_hh_EXTERNAL_GUARD__
#define hpp_core_idl__paths_hh_EXTERNAL_GUARD__
#include <hpp/core_idl/paths-idl.hh>
#endif
#ifndef hpp_core_idl__constraints_hh_EXTERNAL_GUARD__
#define hpp_core_idl__constraints_hh_EXTERNAL_GUARD__
#include <hpp/constraints_idl/constraints-idl.hh>
#endif
#ifndef hpp_core_idl____constraints_hh_EXTERNAL_GUARD__
#define hpp_core_idl____constraints_hh_EXTERNAL_GUARD__
#include <hpp/core_idl/_constraints-idl.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE hpp

_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl

  _CORBA_MODULE_BEG

#ifndef __hpp_mcore__idl_mSteeringMethod__
#define __hpp_mcore__idl_mSteeringMethod__

    class SteeringMethod;
    class _objref_SteeringMethod;
    class _impl_SteeringMethod;
    
    typedef _objref_SteeringMethod* SteeringMethod_ptr;
    typedef SteeringMethod_ptr SteeringMethodRef;

    class SteeringMethod_Helper {
    public:
      typedef SteeringMethod_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_SteeringMethod, SteeringMethod_Helper> SteeringMethod_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_SteeringMethod,SteeringMethod_Helper > SteeringMethod_out;

#endif

    // interface SteeringMethod
    class SteeringMethod {
    public:
      // Declarations for this interface type.
      typedef SteeringMethod_ptr _ptr_type;
      typedef SteeringMethod_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_SteeringMethod :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      Path_ptr call(const ::hpp::floatSeq& q1, const ::hpp::floatSeq& q2);
      void setConstraints(::hpp::core_idl::ConstraintSet_ptr constraints);
      Constraint_ptr getConstraints();

      inline _objref_SteeringMethod()  { _PR_setobj(0); }  // nil
      _objref_SteeringMethod(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_SteeringMethod();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_SteeringMethod(const _objref_SteeringMethod&);
      _objref_SteeringMethod& operator = (const _objref_SteeringMethod&);
      // not implemented

      friend class SteeringMethod;
    };

    class _pof_SteeringMethod : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_SteeringMethod() : _OMNI_NS(proxyObjectFactory)(SteeringMethod::_PD_repoId) {}
      virtual ~_pof_SteeringMethod();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_SteeringMethod :
      public virtual omniServant
    {
    public:
      virtual ~_impl_SteeringMethod();

      virtual Path_ptr call(const ::hpp::floatSeq& q1, const ::hpp::floatSeq& q2) = 0;
      virtual void setConstraints(::hpp::core_idl::ConstraintSet_ptr constraints) = 0;
      virtual Constraint_ptr getConstraints() = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

    class SteeringMethod :
      public virtual hpp::core_idl::_impl_SteeringMethod,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~SteeringMethod();

      inline ::hpp::core_idl::SteeringMethod_ptr _this() {
        return (::hpp::core_idl::SteeringMethod_ptr) _do_this(::hpp::core_idl::SteeringMethod::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
hpp::core_idl::SteeringMethod::_marshalObjRef(::hpp::core_idl::SteeringMethod_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_steering__methods
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_steering__methods
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_steering__methods
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_steering__methods
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_steering__methods
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_steering__methods
#endif

#endif  // __steering__methods_hh__

