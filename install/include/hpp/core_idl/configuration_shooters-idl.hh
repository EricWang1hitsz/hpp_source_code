// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef hpp_core_idl__configuration__shooters_hh__
#define hpp_core_idl__configuration__shooters_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
#endif



#ifndef hpp_core_idl__common_hh_EXTERNAL_GUARD__
#define hpp_core_idl__common_hh_EXTERNAL_GUARD__
#include <hpp/common-idl.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE hpp

_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl

  _CORBA_MODULE_BEG

#ifndef __hpp_mcore__idl_mConfigurationShooter__
#define __hpp_mcore__idl_mConfigurationShooter__

    class ConfigurationShooter;
    class _objref_ConfigurationShooter;
    class _impl_ConfigurationShooter;
    
    typedef _objref_ConfigurationShooter* ConfigurationShooter_ptr;
    typedef ConfigurationShooter_ptr ConfigurationShooterRef;

    class ConfigurationShooter_Helper {
    public:
      typedef ConfigurationShooter_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_ConfigurationShooter, ConfigurationShooter_Helper> ConfigurationShooter_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_ConfigurationShooter,ConfigurationShooter_Helper > ConfigurationShooter_out;

#endif

    // interface ConfigurationShooter
    class ConfigurationShooter {
    public:
      // Declarations for this interface type.
      typedef ConfigurationShooter_ptr _ptr_type;
      typedef ConfigurationShooter_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_ConfigurationShooter :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      floatSeq* shoot();

      inline _objref_ConfigurationShooter()  { _PR_setobj(0); }  // nil
      _objref_ConfigurationShooter(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_ConfigurationShooter();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_ConfigurationShooter(const _objref_ConfigurationShooter&);
      _objref_ConfigurationShooter& operator = (const _objref_ConfigurationShooter&);
      // not implemented

      friend class ConfigurationShooter;
    };

    class _pof_ConfigurationShooter : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_ConfigurationShooter() : _OMNI_NS(proxyObjectFactory)(ConfigurationShooter::_PD_repoId) {}
      virtual ~_pof_ConfigurationShooter();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_ConfigurationShooter :
      public virtual omniServant
    {
    public:
      virtual ~_impl_ConfigurationShooter();

      virtual floatSeq* shoot() = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


    _CORBA_MODULE configuration_shooter

    _CORBA_MODULE_BEG

#ifndef __hpp_mcore__idl_mconfiguration__shooter_mGaussian__
#define __hpp_mcore__idl_mconfiguration__shooter_mGaussian__

      class Gaussian;
      class _objref_Gaussian;
      class _impl_Gaussian;
      
      typedef _objref_Gaussian* Gaussian_ptr;
      typedef Gaussian_ptr GaussianRef;

      class Gaussian_Helper {
      public:
        typedef Gaussian_ptr _ptr_type;

        static _ptr_type _nil();
        static _CORBA_Boolean is_nil(_ptr_type);
        static void release(_ptr_type);
        static void duplicate(_ptr_type);
        static void marshalObjRef(_ptr_type, cdrStream&);
        static _ptr_type unmarshalObjRef(cdrStream&);
      };

      typedef _CORBA_ObjRef_Var<_objref_Gaussian, Gaussian_Helper> Gaussian_var;
      typedef _CORBA_ObjRef_OUT_arg<_objref_Gaussian,Gaussian_Helper > Gaussian_out;

#endif

      // interface Gaussian
      class Gaussian {
      public:
        // Declarations for this interface type.
        typedef Gaussian_ptr _ptr_type;
        typedef Gaussian_var _var_type;

        static _ptr_type _duplicate(_ptr_type);
        static _ptr_type _narrow(::CORBA::Object_ptr);
        static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
        
        static _ptr_type _nil();

        static inline void _marshalObjRef(_ptr_type, cdrStream&);

        static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
          omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
          if (o)
            return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
          else
            return _nil();
        }

        static _core_attr const char* _PD_repoId;

        // Other IDL defined within this scope.
        
      };

      class _objref_Gaussian :
        public virtual _objref_ConfigurationShooter
      {
      public:
        void setCenter(const ::hpp::floatSeq& c);
        floatSeq* getCenter();
        floatSeq* getSigmas();
        void setSigmas(const ::hpp::floatSeq& s);

        inline _objref_Gaussian()  { _PR_setobj(0); }  // nil
        _objref_Gaussian(omniIOR*, omniIdentity*);

      protected:
        virtual ~_objref_Gaussian();

        
      private:
        virtual void* _ptrToObjRef(const char*);

        _objref_Gaussian(const _objref_Gaussian&);
        _objref_Gaussian& operator = (const _objref_Gaussian&);
        // not implemented

        friend class Gaussian;
      };

      class _pof_Gaussian : public _OMNI_NS(proxyObjectFactory) {
      public:
        inline _pof_Gaussian() : _OMNI_NS(proxyObjectFactory)(Gaussian::_PD_repoId) {}
        virtual ~_pof_Gaussian();

        virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
        virtual _CORBA_Boolean is_a(const char*) const;
      };

      class _impl_Gaussian :
        public virtual _impl_ConfigurationShooter
      {
      public:
        virtual ~_impl_Gaussian();

        virtual void setCenter(const ::hpp::floatSeq& c) = 0;
        virtual floatSeq* getCenter() = 0;
        virtual floatSeq* getSigmas() = 0;
        virtual void setSigmas(const ::hpp::floatSeq& s) = 0;
        
      public:  // Really protected, workaround for xlC
        virtual _CORBA_Boolean _dispatch(omniCallHandle&);

      private:
        virtual void* _ptrToInterface(const char*);
        virtual const char* _mostDerivedRepoId();
        
      };


    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

    class ConfigurationShooter :
      public virtual hpp::core_idl::_impl_ConfigurationShooter,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~ConfigurationShooter();

      inline ::hpp::core_idl::ConfigurationShooter_ptr _this() {
        return (::hpp::core_idl::ConfigurationShooter_ptr) _do_this(::hpp::core_idl::ConfigurationShooter::_PD_repoId);
      }
    };

    _CORBA_MODULE configuration_shooter
    _CORBA_MODULE_BEG

      class Gaussian :
        public virtual hpp::core_idl::configuration_shooter::_impl_Gaussian,
        public virtual ConfigurationShooter
      {
      public:
        virtual ~Gaussian();

        inline ::hpp::core_idl::configuration_shooter::Gaussian_ptr _this() {
          return (::hpp::core_idl::configuration_shooter::Gaussian_ptr) _do_this(::hpp::core_idl::configuration_shooter::Gaussian::_PD_repoId);
        }
      };

    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

    _CORBA_MODULE configuration_shooter
    _CORBA_MODULE_BEG

    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
hpp::core_idl::ConfigurationShooter::_marshalObjRef(::hpp::core_idl::ConfigurationShooter_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
hpp::core_idl::configuration_shooter::Gaussian::_marshalObjRef(::hpp::core_idl::configuration_shooter::Gaussian_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_configuration__shooters
#endif

#endif  // __configuration__shooters_hh__

