// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef hpp_core_idl__paths_hh__
#define hpp_core_idl__paths_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_paths
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_paths
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_paths
#endif



#ifndef hpp_core_idl__common_hh_EXTERNAL_GUARD__
#define hpp_core_idl__common_hh_EXTERNAL_GUARD__
#include <hpp/common-idl.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE hpp

_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl

  _CORBA_MODULE_BEG

    typedef ::CORBA::ULongLong size_t;
    typedef ::CORBA::ULongLong_out size_t_out;

#ifndef __hpp_mcore__idl_mPathVector__
#define __hpp_mcore__idl_mPathVector__

    class PathVector;
    class _objref_PathVector;
    class _impl_PathVector;
    
    typedef _objref_PathVector* PathVector_ptr;
    typedef PathVector_ptr PathVectorRef;

    class PathVector_Helper {
    public:
      typedef PathVector_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_PathVector, PathVector_Helper> PathVector_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_PathVector,PathVector_Helper > PathVector_out;

#endif

#ifndef __hpp_mcore__idl_mPath__
#define __hpp_mcore__idl_mPath__

    class Path;
    class _objref_Path;
    class _impl_Path;
    
    typedef _objref_Path* Path_ptr;
    typedef Path_ptr PathRef;

    class Path_Helper {
    public:
      typedef Path_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_Path, Path_Helper> Path_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_Path,Path_Helper > Path_out;

#endif

    // interface Path
    class Path {
    public:
      // Declarations for this interface type.
      typedef Path_ptr _ptr_type;
      typedef Path_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_Path :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      size_type outputSize();
      size_type outputDerivativeSize();
      value_type length();
      floatSeq* initial();
      floatSeq* end();
      char* str();
      floatSeq* call(::hpp::value_type t, ::CORBA::Boolean& success);
      floatSeq* at(::hpp::value_type t, ::CORBA::Boolean& success);
      floatSeq* derivative(::hpp::value_type t, ::CORBA::Short order);
      Path_ptr extract(::hpp::value_type tmin, ::hpp::value_type tmax);
      PathVector_ptr asVector();

      inline _objref_Path()  { _PR_setobj(0); }  // nil
      _objref_Path(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_Path();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_Path(const _objref_Path&);
      _objref_Path& operator = (const _objref_Path&);
      // not implemented

      friend class Path;
    };

    class _pof_Path : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_Path() : _OMNI_NS(proxyObjectFactory)(Path::_PD_repoId) {}
      virtual ~_pof_Path();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_Path :
      public virtual omniServant
    {
    public:
      virtual ~_impl_Path();

      virtual size_type outputSize() = 0;
      virtual size_type outputDerivativeSize() = 0;
      virtual value_type length() = 0;
      virtual floatSeq* initial() = 0;
      virtual floatSeq* end() = 0;
      virtual char* str() = 0;
      virtual floatSeq* call(::hpp::value_type t, ::CORBA::Boolean& success) = 0;
      virtual floatSeq* at(::hpp::value_type t, ::CORBA::Boolean& success) = 0;
      virtual floatSeq* derivative(::hpp::value_type t, ::CORBA::Short order) = 0;
      virtual Path_ptr extract(::hpp::value_type tmin, ::hpp::value_type tmax) = 0;
      virtual PathVector_ptr asVector() = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


#ifndef __hpp_mcore__idl_mPathVector__
#define __hpp_mcore__idl_mPathVector__

    class PathVector;
    class _objref_PathVector;
    class _impl_PathVector;
    
    typedef _objref_PathVector* PathVector_ptr;
    typedef PathVector_ptr PathVectorRef;

    class PathVector_Helper {
    public:
      typedef PathVector_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_PathVector, PathVector_Helper> PathVector_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_PathVector,PathVector_Helper > PathVector_out;

#endif

    // interface PathVector
    class PathVector {
    public:
      // Declarations for this interface type.
      typedef PathVector_ptr _ptr_type;
      typedef PathVector_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_PathVector :
      public virtual _objref_Path
    {
    public:
      size_t numberPaths();
      Path_ptr pathAtRank(::hpp::core_idl::size_t rank);
      void appendPath(::hpp::core_idl::Path_ptr p);
      void concatenate(::hpp::core_idl::PathVector_ptr p);

      inline _objref_PathVector()  { _PR_setobj(0); }  // nil
      _objref_PathVector(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_PathVector();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_PathVector(const _objref_PathVector&);
      _objref_PathVector& operator = (const _objref_PathVector&);
      // not implemented

      friend class PathVector;
    };

    class _pof_PathVector : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_PathVector() : _OMNI_NS(proxyObjectFactory)(PathVector::_PD_repoId) {}
      virtual ~_pof_PathVector();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_PathVector :
      public virtual _impl_Path
    {
    public:
      virtual ~_impl_PathVector();

      virtual size_t numberPaths() = 0;
      virtual Path_ptr pathAtRank(::hpp::core_idl::size_t rank) = 0;
      virtual void appendPath(::hpp::core_idl::Path_ptr p) = 0;
      virtual void concatenate(::hpp::core_idl::PathVector_ptr p) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

    class Path :
      public virtual hpp::core_idl::_impl_Path,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~Path();

      inline ::hpp::core_idl::Path_ptr _this() {
        return (::hpp::core_idl::Path_ptr) _do_this(::hpp::core_idl::Path::_PD_repoId);
      }
    };

    class PathVector :
      public virtual hpp::core_idl::_impl_PathVector,
      public virtual Path
    {
    public:
      virtual ~PathVector();

      inline ::hpp::core_idl::PathVector_ptr _this() {
        return (::hpp::core_idl::PathVector_ptr) _do_this(::hpp::core_idl::PathVector::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_hpp
_CORBA_MODULE_BEG

  _CORBA_MODULE core_idl
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
hpp::core_idl::Path::_marshalObjRef(::hpp::core_idl::Path_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
hpp::core_idl::PathVector::_marshalObjRef(::hpp::core_idl::PathVector_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_paths
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_paths
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_paths
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_paths
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_paths
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_paths
#endif

#endif  // __paths_hh__

